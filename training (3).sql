-- phpMyAdmin SQL Dump
-- version 4.9.1
-- https://www.phpmyadmin.net/
--
-- Хост: localhost
-- Время создания: Апр 13 2023 г., 18:07
-- Версия сервера: 5.7.17-log
-- Версия PHP: 7.3.10

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `training`
--

-- --------------------------------------------------------

--
-- Структура таблицы `direction`
--

CREATE TABLE `direction` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `time` bigint(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Дамп данных таблицы `direction`
--

INSERT INTO `direction` (`id`, `name`, `description`, `time`) VALUES
(11, 'Что такое проект \"Информатик\"?', 'Проект для школы \"Информатик-2023\". \"Информатик\" - это платформа, на которой с нуля можно научиться программированию на языке программирования Python.\nВы научитесь:\n1.Решать математические задачи\n2.Решать логические задачи\n3.Строить алгоритмы\n4.Понимать, как устроено программирование\n5.Учиться программированию(по окончании обучения вы сможете с легкостью овладеть более сложными навыками или с легкостью овладеть любым другим языком программирования)\n6.Научитесь решать почти все задачи из ЕГЭ на программирование\n\nВы будете знать:\n1.Основы программирования\n2.Основы языка Python\n3.Как решаются задачи из ЕГЭ на программирование с помощью перебора\n4.Как применить Python к любой задачке', 1671022925314),
(12, 'Чему вы научитесь в проекте \"Информатик\"?', 'Вы научитесь:\n1.Решать математические задачи.\n2.Решать логические задачи.\n3.Строить алгоритмы.\n4.Понимать, как устроено программирование.\n5.Учиться программированию(по окончании обучения вы сможете с легкостью овладеть более сложными навыками или с легкостью овладеть любым другим языком программирования)\n6.Решать почти все задачи из ЕГЭ на программирование.\n7.Отличать языки программирования друг от друга.\n8.Упрощать логические выражения.\n9.Упрощать алгоритмы перебора.', 1671023434418),
(13, 'Что вы будете знать после прохождения  \"Информатика\"?', 'Вы будете знать:\n1.Основы программирования\n2.Основы языка Python\n3.Как решаются задачи из ЕГЭ на программирование с помощью перебора\n4.Как применить Python к любой задачке.\n5.Вы будете знать ,как изучать другие языки программирования.\n6.Какие языки программирования сейчас востребованы на рынке.\n7.Что такое фреймворки.\n8.Какие фреймворки востребованы сейчас на бирже труда.', 1671025111775),
(14, 'Чем проект \"Информатик\" отличается от сайта РЕШУ ЕГЭ?', 'В нашем проекте собраны задания только на программирование. У нас нету заданий, которые нужно решать не программой, потому что цель данного проекта - научить вас программировать на языке Python. \nВ том числе и задания с сайта <span href=\"https://inf-ege.sdamgia.ru/\" target=\"_blank\">РЕШУ ЕГЭ</span>. Но в нашем проекте присутствую задания не только с сайта РЕШУ ЕГЭ, но и задания с других сайтов а также наши собственные задания.', 1671023854551),
(15, 'почему стоит сдавать ЕГЭ по информатике?', 'Школьная программа предусматривает 1−2 урока в неделю. Этого достаточно для ознакомления с учебным материалом, используемым в ЕГЭ: алгоритмизация, логические вычисления, информационные модели и кодировка данных. Ученики с хорошими и отличными оценками имеют больше шансов получить высокий балл, так как 14 заданий (1, 2, 4, 5, 7, 8, 11−14, 19−21, 23) включают в себя перечисленные выше навыки.', 1671024071122),
(16, 'Из чего состоит ЕГЭ по информатике?', '2021 года претерпел большие изменения: усилился акцент на программирование, ответы перестали требовать развернутого пояснения (исчезла вторая часть), задания выполнялись исключительно на компьютере. Также были внесены следующие правки:\n\nудален устаревший BASIC; допускаются Python, Pascal, C++ и алгоритмический;\nисключен ряд заданий, в том числе № 23, вызывающее сложности у большинства учеников;\nустановлен акцент на программирование: задания выполняются на компьютере, а знание языка — обязательный навык.\nЗависимость от знания программирования усложнила сдачу на высокий балл; задания требуют не только написания программ, но и считывания данных из файла.\n\n2022 год отличается минорными дополнениями:\n\nзадания на работу с файлами увеличились с 6 до 8;\nизменены 3 и 17 задания (работа с реляционными базами данных и написание программы в готовом текстовом файле).\nСтруктура состоит из 27 заданий. Некоторые требуют просто указания ответа, другие решаются на компьютере. Наисложнейшие задания — 25−27, по два балла за правильный ответ. Максимальный первичный балл — 29, время на исполнение — 3 часа 55 минут. Каждый пункт проверяет навыки:\n\nкодирования данных;\nлогики;\nвоссоздания информационных моделей;\nалгоритмизации;\nпрограммирования;\nпоиска информации в файле.\nОт ученика ожидается умение работать с таблицами и графиками, считывая с них данные, решать задачи с помощью программирования, понимать логические выражения и разбираться в системах счисления.', 1671024136990),
(17, 'Особенности ЕГЭ по информатике?', 'Знание программирования — главный навык. Допускаются C++, Python, Pascal и алгоритмический, а также написание программ на C# и Java. Хотя экзамен включает математику, алгебру и логику, наибольшее количество пунктов невозможно решить без знания программирования.\n\nНекоторые задания больше не требуют письменного приложения с решением задачи. Ответ вводится в компьютер, поэтому в распоряжении ученика только черновик с личными пометками.\n\nПрограммирование реализуется на компьютере; к нему относятся задания и на работу с файлами.', 1671024197746),
(18, 'ПОЧЕМУ PYTHON?', 'Почему Python?\n\n\n<ol><li>Первая и главная причина начать с Python заключается в том, что <strong>он намного проще</strong>, чем другие языки программирования. На самом деле он имитирует человеческий язык, так что это большое преимущество для новичков. Синтаксис прост, и вы можете начать писать базовый код за считанные минуты. Фактически, рекомендуется начать с Python в качестве первого языка программирования из-за его простоты.<strong><br></strong></li></ol>\n\n\n\n<ol start=\"2\"><li>Другая причина заключается в том, что Python <strong>занимает первое место в рейтингах популярности</strong> среди языков программирования. Это широко используемый язык, и его используют все виды ИТ-специалистов. Поэтому, если вы знаете Python, скорее всего, вам не нужно будет изучать другой язык, если вы этого не хотите. Позже в этой статье мы обсудим, кому может быть полезен Python и почему, но тот факт, что это язык подходит всем, делает его желанным выбором для многих.<br><br></li><li>Третья причина заключается в том, что Python является <strong>языком общего назначения</strong>, а это означает, что он не имеет ограничений в использовании. Вы можете применять Python буквально к каждому проекту, над которым работаете. Даже если вы поменяете работу, Python по-прежнему полезен для многих компаний и продуктов. По сути, это язык, который подходит для любых нужд, и вы можете использовать его всю жизнь. В моем профессиональном опыте я использовала его для веб-разработки, задач автоматизации QA, анализа данных и общего управления системой. Например, запустив простой скрипт Python, вы можете легко переопределить системные настройки.<strong><br></strong></li></ol>\n\n<ol start=\"4\"><li>Четвертая причина заключается в том, что это <strong>язык с открытым исходным кодом</strong>, что означает, что он доступен для всех. Нет необходимости платить за дорогие фреймворки или инструменты, чтобы начать его использовать. Установите простой пакет, и вы сразу же начнете писать свои скрипты.<strong><br></strong></li></ol>\n\n<ol start=\"5\"><li>И, наконец, пятая причина заключается в том, что <strong>Python — хорошая база</strong>, если вы решите изучить другой, более сложный язык программирования. Многие люди, которые начинали с Python и чувствовали, что он слишком прост, позже перешли на более сложный язык. Мой брат тому хороший пример. Работая в биржевой торговле, он изучил основы Python для собственных задач автоматизации, просто чтобы упростить свою повседневную работу на фондовой бирже. Через пару лет, когда он перешел на должность ИТ-специалиста в качестве QA-инженера, он некоторое время продолжал использовать Python, пока не решил добавить Java в свою базу знаний. Позже я спросила его об опыте изучения другого, гораздо более сложного языка, учитывая, что он уже знал Python. Он ответил: «Я рад, что не начал с Java в качестве первого языка. Это настолько сложно, что я мог бы легко разочароваться в этом! На самом деле, я почти уверен, что даже не начал бы изучать Java, увидев всю ее сложность. Но поскольку я знал Python, это очень помогло мне перейти к Java. Хотя они совершенно разные, я смог понять некоторые концепции Java только потому, что знал Python. Я определенно рекомендую всем, кто хочет изучать программирование, начать с него».</li></ol>', 1671024972683),
(19, 'Кто может использовать Python?', '<p>Теперь давайте посмотрим, кто на самом деле может использовать Python в своей повседневной работе. Я приведу вам несколько примеров, но на самом деле их гораздо больше.<strong><br></strong></p>\n\n<p>Первая мысль, которая приходит на ум, когда вы думаете о ком-то, кто пишет код ежедневно, — это <strong>веб-разработчики</strong>. Это люди, которые программируют каждый день и, таким образом, занимаются кодированием все время, восемь или более часов в день. Это ваши лучшие ресурсы, чтобы задавать вопросы, если вы тоже новичок. Они могут оказать большую помощь в начале и обычно способны решить все проблемы, с которыми может столкнуться новый разработчик, QA или кто-либо еще при самостоятельном обучении программированию.<strong><br></strong></p>\n\n<p>Но не только разработчики пишут код. Вот несколько других <strong>ИТ-специалистов</strong>, которым приходится писать сценарии с использованием Python или других языков сценариев:<strong><br></strong></p>\n\n<ul><li><strong>QA инженеры</strong> используют скрипты Python для тестирования системы. Например, они могут установить параметры, при которых они хотят протестировать софт. Это может быть что угодно, например переопределение настроек времени или создание нового пользователя, и это лишь несколько примеров.</li><li><strong>Команды QA Automation</strong> пишут все свои тесты на Python или других языках, чтобы выполнять их непрерывно. При автоматизации QA Engineer в основном «переводит» ручные тесты в язык кодирования, чтобы компьютер мог его понять.</li><li><strong>Аналитики данных</strong> используют Python для запуска огромных наборов данных, их организации, чтения или управления ими. Эти задачи невозможно выполнить вручную из-за их размера и объема информации, которую необходимо обработать.</li><li><strong>Системные инженеры</strong> обычно используют Python для управления своей инфраструктурой.</li><li><strong>Специалисты по данным</strong> также ежедневно запускают сценарии для самых разных задач.</li><li><strong>Облачные инженеры и архитекторы</strong> используют его для создания и управления своей инфраструктурой.<strong><br></strong></li></ul>\n\n<p>Теперь вы видите, сколько команд используют этот язык, чтобы максимизировать свою эффективность и создавать высококачественные продукты. Python может служить простым помощником для рутинных повседневных задач, таких как назначение паролей для новых пользователей, или как способ запуска машины для всей инфраструктуры конечного продукта. Именно это делает Python таким желанным для многих — с помощью одного простого языка программирования можно делать буквально все что угодно. Если вы добавите Python в свое резюме, это даст вам хорошие шансы на получение многих вакансий в сфере ИТ, что даст вам больше шансов быть рассмотренным на желаемую должность в компании.</p>', 1671024877532);

-- --------------------------------------------------------

--
-- Структура таблицы `informatic_task`
--

CREATE TABLE `informatic_task` (
  `id` int(11) NOT NULL,
  `texts` text NOT NULL,
  `solution` text NOT NULL,
  `type` int(11) NOT NULL,
  `views` bigint(20) NOT NULL,
  `likes` bigint(20) NOT NULL,
  `dislike` bigint(20) NOT NULL,
  `comments` bigint(20) NOT NULL,
  `time_of_public` bigint(20) NOT NULL,
  `lang` text NOT NULL,
  `input_data_json` text NOT NULL,
  `output_data_json` text NOT NULL,
  `author` varchar(300) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `informatic_task`
--

INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(1, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>y</i> + 2<i>x</i> < <i>A</i>) &or; (<i>x</i> > 15) &or; (<i>y</i> > 30)</center><p>тождественно истинно при всех вещественных значениях <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (y + 2*x < a) or (x > 15) or (y > 30):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866014263, 'PYTHON', '', '61', 'Антон Сибгатулин'),
(2, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub>&#8239;=&#8239;0100<sub>2</sub>&#8239;=&#8239;4.<p class=\"left_margin\">Для какого наибольшего целого числа А формула <p class=\"left_margin\"><center><p><i>x</i>&51 = 0 &or; (<i>x</i>&41 = 0 → <i>x</i>&<i>А</i> = 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&51==0) or (x&41!=0) or (x&(63-A)==0))==0:\n            B=False\n    if B:\n        print(63-A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866033587, 'PYTHON', '', '41', 'Антон Сибгатулин'),
(3, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(4<i>x</i> + 3<i>y</i> < <i>A</i>) &or; (<i>x</i> &ge; <i>y</i>) &or; (<i>y</i> &ge; <i>13</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (4 * x + 3 * y < A) or (x >= y) or (y >= 13):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866033993, 'PYTHON', '', '81', 'Антон Сибгатулин'),
(4, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ</b>(<i>n, m</i>) утверждение «натуральное число <i>n</i> делится без остатка на натуральное число&#8239;<i>m</i>». Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ</b>(<i>x, А</i>) → (<b>ДЕЛ</b>(<i>x</i>, 21) + <b>ДЕЛ</b>(<i>x</i>, 35))<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)? <p><i>(М.&#8239;В.&#8239;Кузнецова)</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(1, 100): \n    k = 0\n    for x in range(1, 1000):\n        if (x % a == 0) <= ((x % 21 == 0) + (x % 35 == 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866034332, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(5, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 29 ≠ 0 → (<i>x</i> & 17 = 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:<div class=\"new-wrap\"></div><code>A=set()\nfor a in range (1, 65):\n&#8239;&#8239;&#8239;ok=1\n&#8239;&#8239;&#8239;for x in range (0, 65):\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;if ((x & 29 != 0) <= ((x & 17 == 0) <= (x & a != 0))) == 0:\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;ok=0\n&#8239;&#8239;&#8239;if ok:\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;A.add(a)\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;break\nprint(min(A))\n</code>', 5, 0, 0, 0, 0, 1671116729605, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(6, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>x</i> > <i>A</i>) &or; (<i>y</i> > <i>A</i>) &or; (2<i>y</i> + <i>x</i> < 110)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x > A) or (y > A) or (2 * y + x < 110):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866034632, 'PYTHON', '', '36', 'Антон Сибгатулин'),
(7, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через ДЕЛ(<i>n</i>, <i>m</i>) утверждение «натуральное число n делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>(ДЕЛ(<i>x</i>, 3)&#8239;→&#8239;&not;ДЕЛ(<i>x</i>, 5))&#8239;&or;&#8239;(<i>x</i>&#8239;+&#8239;<i>A</i>&#8239;≥&#8239;90)</b><p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1) при любом натуральном значении переменной <i>x</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(1, 101):\n    k = 0\n    for x in range(1, 1000):\n        if ((x % 3 == 0) <= (x % 5 != 0)) or (x + A >= 90):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866034953, 'PYTHON', '', '75', 'Антон Сибгатулин'),
(8, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4. <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула (x&41 ≠ 0) → ((x&33 = 0) → (x&А ≠ 0))<p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&41==0) or (x&33!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866035214, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(9, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(3<i>x</i> + 7<i>y</i> < <i>A</i>) &or; (<i>x</i> &ge; <i>y</i>) &or; (<i>y</i> > <i>6</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (3 * x + 7 * y < A) or (x >= y) or (y > 6):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866035412, 'PYTHON', '', '58', 'Антон Сибгатулин'),
(10, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула<p class=\"left_margin\"><center><p>x&33 = 0 → (x&45≠0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&33!=0) or (x&45==0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866035590, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(11, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(<i>A</i>, 40) &and; (ДЕЛ(780, <i>x</i>) → (&not;ДЕЛ(<i>A</i>, <i>x</i>) → ¬ДЕЛ(180, <i>x</i>)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(1, 1001):\n    k = 0\n    for x in range(1, 1000):\n        if (A % 40 == 0) and ((780 % x == 0) <= ((A % x != 0) <= (180 % x != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866035918, 'PYTHON', '', '120', 'Антон Сибгатулин'),
(12, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого числа А формула   <p class=\"left_margin\"><center><p class=\"left_margin\">((x ≤ 9)  →(x ⋅ x ≤ A)) ⋀ ((y ⋅ y ≤ A)  → (y ≤ 9))  <p class=\"left_margin\"></center><p>тождественно истинна, то есть принимает значение 1 при любых целых неотрицательных x и y?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(300, 1, -1): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x <= 9) <= (x * x <= a)) and ((y*y <= a) <= (y <= 9)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866036439, 'PYTHON', '', '99', 'Антон Сибгатулин'),
(13, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через ДЕЛ(<i>n</i>, <i>m</i>) утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого <b>наименьшего</b> натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>(ДЕЛ(<i>x</i>, 2) → ¬ДЕЛ(x, 3))&#8239;&or;&#8239;(<i>x</i> + <i>A</i> ≥ 100)</b><p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1) при любом натуральном значении переменной <i>х</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(1, 101):\n    k = 0\n    for x in range(1, 1000):\n        if ((x % 2 == 0) <= (x % 3 != 0)) or (x + A >= 100):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866036718, 'PYTHON', '', '94', 'Антон Сибгатулин'),
(14, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i>&<i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4. <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа <i>А</i> формула<p class=\"left_margin\"><center><p><img src=\"https://ege.sdamgia.ru/formula/svg/a6/a6910ca2d38da35607da284dfaa4f4ab.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\" левая круглая скобка левая круглая скобка x\\28 не равно 0 правая круглая скобка \\vee левая круглая скобка x\\45 не равно 0 правая круглая скобка правая круглая скобка arrow левая круглая скобка левая круглая скобка x\\17=0 правая круглая скобка arrow левая круглая скобка x\\A не равно 0 правая круглая скобка правая круглая скобка \" /><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&28==0) and (x&45==0) or (x&17!=0) or (x&A!=0))==0:\n            B=False \n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866036985, 'PYTHON', '', '44', 'Антон Сибгатулин'),
(15, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует целых значений числа <i>A</i>, при которых формула<p class=\"left_margin\"><center><p class=\"left_margin\">((<i>x</i> < <i>A</i>) → (<i>x<sup>2</sup></i> < 81)) &and; ((<i>y<sup>2</sup></i> &le; 36) → (<i>y</i> &le; <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинна при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor a in range(1, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x < a) <= (x**2 < 81)) and ((y**2 <= 36) <= (y <= a)):\n                k += 1\n    if k == 90_000:\n        count += 1\nprint(count)\n</code>', 5, 0, 0, 0, 0, 1670866037273, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(16, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub>&#8239;=&#8239;0100<sub>2</sub>&#8239;=&#8239;4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p><i>x</i>&51 = 0 &or; (<i>x</i>&41 = 0 → <i>x</i>&<i>А</i> = 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&51==0) or (x&41!=0) or (x&A==0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866037726, 'PYTHON', '', '0', 'Антон Сибгатулин'),
(17, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i>&<i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 12&6 = 1100<sub>2</sub>&0110<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наибольшего целого числа <i>А</i> формула<p class=\"left_margin\"><center><p><i>х&А</i><img src=\"https://ege.sdamgia.ru/formula/svg/67/6703c949ca1fcc038a55e128766be0b4.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\" не равно 0\" /> → (<i>x</i>&10 = 0 → <i>х</i>&3<img src=\"https://ege.sdamgia.ru/formula/svg/67/6703c949ca1fcc038a55e128766be0b4.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\" не равно 0\" />)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(16):\n    B = True\n    for x in range(16):\n        if ((x&(15-A)==0) or (x&10!=0) or (x&3!=0))==0:\n            B=False\n    if B:\n        print(15-A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866038571, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(18, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>(<i>A</i> < 50) &and; (¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 10) → ¬ДЕЛ(<i>x</i>, 12)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (a < 50) and ((x % a != 0) <= ((x % 10 == 0) <= (x % 12 != 0))):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866038920, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(19, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует целых значений числа <i>A</i>, при которых формула<p class=\"left_margin\"><center>((<i>x</i> < 6) → (<i>x</i><sup>2</sup> < <i>A</i>)) &and; ((<i>y</i><sup>2</sup> ≤ <i>A</i>) → (<i>y</i> ≤ 6))</center><p>тождественно истинна при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor a in range(1, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x < 6) <= (x**2 < a)) and ((y**2 <= a) <= (y <= 6)):\n                k += 1\n    if k == 90_000:\n        count += 1\nprint(count)\n</code>', 5, 0, 0, 0, 0, 1670866039572, 'PYTHON', '', '23', 'Антон Сибгатулин'),
(20, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(120, <i>A</i>) &and; (ДЕЛ(<i>x</i>, 36) → (&not;ДЕЛ(<i>x</i>, <i>А</i>) → ¬ДЕЛ(<i>x</i>, 45)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (120 % A == 0) and ((x % 36 == 0) <= ((x % A != 0) <= (x % 45 != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866040428, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(21, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(2<i>m</i> + 3<i>n</i> > 43) &or; (<i>m</i> < <i>A</i>) &or; (<i>n</i> ≤ <i>A</i>)<p class=\"left_margin\"></center><p>тождественно истинно при любых целых неотрицательных <i>m</i> и <i>n</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for n in range(300):\n        for m in range(300):\n            if (2 * m + 3 * n > 43) or (m < A) or (n <= A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866040682, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(22, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p>x&77 ≠ 0 → (x&12 = 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(128):\n    B = True\n    for x in range(128):\n        if ((x&77==0) or (x&12!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866040878, 'PYTHON', '', '65', 'Антон Сибгатулин'),
(23, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>(<i>A</i> < 50) &and; (¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 10) → ¬ДЕЛ(<i>x</i>, 18)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (a < 50) and ((x % a != 0) <= ((x % 10 == 0) <= (x % 18 != 0))):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866041238, 'PYTHON', '', '45', 'Антон Сибгатулин'),
(24, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 49 = 0 → (<i>x</i> & 28 ≠ 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(128):\n    B = True \n    for x in range(128):\n        if (x & 49 != 0 or (x & 28 == 0 or x & A != 0)) == 0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866041423, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(25, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого положительного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i> + <i>3y</i> > <i>A</i>) &or; (<i>y</i> < 30) &or; (<i>x</i> < 30)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x + 3 * y > A) or (y < 30) or (x < 30):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866041843, 'PYTHON', '', '119', 'Антон Сибгатулин'),
(26, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(90, <i>A</i>) &and; (¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 15) → ¬ДЕЛ(<i>x</i>, 20)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(100, 0, -1): \n    k = 0\n    for x in range(1, 1000):\n        if (90 % a == 0) and ((x % a != 0) <= ((x % 15 == 0) <= (x % 20 != 0))):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866042162, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(27, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует целых значений числа <i>A</i>, при которых формула<p class=\"left_margin\"><center><p class=\"left_margin\">((<i>x</i> < <i>A</i>) → (<i>x<sup>2</sup></i> < 100)) &and; ((<i>y<sup>2</sup></i> &le; 64) → (<i>y</i> &le; <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинна при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor a in range(1, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x < a) <= (x**2 < 100)) and ((y**2 <= 64) <= (y <= a)):\n                k += 1\n    if k == 90_000:\n        count += 1\nprint(count)\n</code>', 5, 0, 0, 0, 0, 1670866042470, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(28, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. Например, <nobr>14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.</nobr> Для какого наименьшего неотрицательного целого числа А формула<p class=\"left_margin\"><center><p>x&9 = 0 → (x&19 ≠ 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&9!=0) or (x&19==0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866043005, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(29, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">На числовой прямой задан отрезок <i>A</i>. Известно, что формула<p class=\"left_margin\"><center><p class=\"left_margin\">((<i>x</i> &in; <i>A</i>) → (<i>x<sup>2</sup></i> &le; 100)) &and; ((<i>x<sup>2</sup></i> &le; 64) → (<i>x</i> &in; <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинна при любом вещественном <i>x</i>. Какую наибольшую длину может иметь отрезок <i>A</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x,a): \n    return ((x in a) <= (x**2 <= 100)) and ((x**2 <= 64) <= (x in a))\na = set([i for i in range(-1000,1000)])\nfor x in range(-1000, 1000):\n    if not f(x,a):\n        a.remove(x)\nprint(len(a) - 1)\n</code>', 5, 0, 0, 0, 0, 1670866043369, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(30, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(70, <i>A</i>) &and; (ДЕЛ(<i>x</i>, 28) → (&not;ДЕЛ(<i>x</i>, <i>А</i>) → ¬ДЕЛ(<i>x</i>, 21)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (70 % A == 0) and ((x % 28 == 0) <= ((x % A != 0) <= (x % 21 != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866043586, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(31, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 73 = 0 → (<i>x</i> & 28 ≠ 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(128):\n    B = True \n    for x in range(128):\n        if (x & 73 != 0 or (x & 28 == 0 or x & A != 0)) == 0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866043919, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(32, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.  <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p>x&25 ≠ 0 → (x&19 = 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p> тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&25==0) or (x&19!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866044359, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(33, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(120, <i>A</i>) &and; (¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 18) → ¬ДЕЛ(<i>x</i>, 24)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (120 % A == 0) and ((x % A != 0) <= ((x % 18 == 0) <= (x % 24 != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866044751, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(34, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i>&#8239;·&#8239;<i>y</i> < <i>121</i>) &or; (<i>y</i> > <i>A</i>) &or; (<i>x</i> &ge; <i>A</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x * y < 121) or (y > A) or (x >= A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866045089, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(35, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа А выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(y + 2x < A) &or; (x > 30) &or; (y > 20)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных x и y?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(0, 300): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (y + 2 * x < a) or (x > 30) or (y > 20):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866045223, 'PYTHON', '', '81', 'Антон Сибгатулин'),
(36, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i>&<i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4. <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа <i>А</i> формула<p class=\"left_margin\"><center><p><img src=\"https://ege.sdamgia.ru/formula/svg/15/1547e7fa390a6794409c561c69fb91d2.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\" левая круглая скобка левая круглая скобка x\\28 не равно 0 правая круглая скобка \\vee левая круглая скобка x\\45 не равно 0 правая круглая скобка правая круглая скобка arrow левая круглая скобка левая круглая скобка x\\48=0 правая круглая скобка arrow левая круглая скобка x\\A не равно 0 правая круглая скобка правая круглая скобка \" /><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&28==0) and (x&45==0) or (x&48!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866045471, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(37, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(<i>A</i>, 45) &and; (ДЕЛ(750, <i>x</i>) → (&not;ДЕЛ(<i>A</i>, <i>x</i>) → ¬ДЕЛ(120, <i>x</i>)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(1, 101):\n    k = 0\n    for x in range(1, 1000):\n        if (A % 45 == 0) and ((750 % x == 0) <= ((A % x != 0) <= (120 % x != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866045649, 'PYTHON', '', '90', 'Антон Сибгатулин'),
(38, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i> + <i>2y</i> < <i>A</i>) &or; (<i>y</i> > <i>x</i>) &or; (<i>x</i> > 20)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x + 2 * y < A) or (y > x) or (x > 20):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866045995, 'PYTHON', '', '61', 'Антон Сибгатулин'),
(39, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 29 ≠ 0 → (<i>x</i> & 12 = 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной <i>х</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&29==0) or (x&12!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A) \n        break\n</code>', 5, 0, 0, 0, 0, 1670866046562, 'PYTHON', '', '17', 'Антон Сибгатулин'),
(40, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ</b>(<i>n, m</i>) утверждение «натуральное число n делится без остатка на натуральное число&#8239;<i>m</i>». Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ</b>(<i>x, А</i>) → (¬<b>ДЕЛ</b>(<i>x</i>, 21) + <b>ДЕЛ</b>(<i>x</i>, 35))<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)? <p><i>Задание К.&#8239;Ю.&#8239;Полякова </i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(1, 100):\n    k = 0\n    for x in range(1, 1000):\n        if (x % a == 0) <= ((x % 21 != 0) + (x % 35 == 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866046981, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(41, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(3<i>x</i> + 4<i>y</i> &ne; 70) &or; (<i>A</i> > <i>x</i>) &or; (<i>A</i> > <i>y</i>)</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (3*x + 4*y != 70) or (a > x) or (a > y):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866047237, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(42, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p>x&49 ≠ 0 → (x&41 = 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&49==0) or (x&41!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866047667, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(43, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует целых значений числа <i>A</i>, при которых формула<p class=\"left_margin\"><center>((<i>x</i> < 5) → (<i>x</i><sup>2</sup> < <i>A</i>)) &and; ((<i>y</i><sup>2</sup> ≤ <i>A</i>) → (<i>y</i> ≤ 5))</center><p>тождественно истинна при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor a in range(1, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x < 5) <= (x**2 < a)) and ((y**2 <= a) <= (y <= 5)):\n                k += 1\n    if k == 90_000:\n        count += 1\nprint(count)\n</code>', 5, 0, 0, 0, 0, 1670866047873, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(44, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m&n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. Так, например, 14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа <i> А</i> формула<p class=\"left_margin\"><center><i>x&25 ≠ 0 → (x&17 = 0 → x&А ≠ 0)</i></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом <i></i>неотрицательном целом значении переменной <i>х</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(32):\n    B = True \n    for x in range(32):\n        if ((x&25==0) or (x&17!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866048558, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(45, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.  <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p>x&25 ≠ 0 → (x&9 = 0 → x&А ≠ 0) <p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&25==0) or (x&9!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866049057, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(46, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ</b>(<i>n, m</i>) утверждение «натуральное число n делится без остатка на натуральное число&#8239;<i>m</i>». Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p>¬<b>ДЕЛ</b>(<i>x, А</i>) → (¬<b>ДЕЛ</b>(<i>x</i>, 21) &and;¬ <b>ДЕЛ</b>(<i>x</i>, 35))<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)? <p> <i>(Задание М.&#8239;В.&#8239;Кузнецовой) </i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (x % a != 0) <= ((x % 21 != 0) and (x % 35 != 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866049489, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(47, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> &ne; 60) &or; (<i>A</i> &ge; <i>x</i>) &or; (<i>A</i> &ge; <i>y</i>)</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(0, 300): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (2*x + 3*y != 60) or (a >= x) or (a >= y):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866049756, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(48, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> < 30) &or; (<i>x</i> + <i>y</i> &ge; <i>A</i>)</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(300, 0, -1): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (2*x + 3*y < 30) or (x + y >= a):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866050020, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(49, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ</b>(<i>n, m</i>) утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p>¬<b>ДЕЛ</b>(<i>x, А</i>) → (<b>ДЕЛ</b>(<i>x</i>, 6) → ¬<b>ДЕЛ</b>(<i>x</i>, 4))<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (x % a != 0) <= ((x % 6 == 0) <= (x % 4 != 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866050469, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(50, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p class=\"left_margin\">(<i>x</i> & 105 = 0) → ((<i>x</i> & 58 ≠ 0) → (<i>x</i> & <i>А</i> ≠ 0))<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(127):\n    B = True\n    for x in range(127):\n        B = B and (((x & 105 != 0) or (x & 58 == 0) or (x & A != 0)))\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866050673, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(51, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(3<i>m</i> + 4<i>n</i> > 63) &or; ((<i>m</i> ≤ <i>A</i>) &and; (<i>n</i> < <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинно при любых целых неотрицательных <i>m</i> и <i>n</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for m in range(0, 300):\n        for n in range(0, 300):\n            if (3*m + 4*n > 63) or ((m <= a) and (n < a)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866050974, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(52, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, <nobr>14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.</nobr> <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула<p class=\"left_margin\"><center><p>x&17 = 0 → (x&29 ≠ 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&17!=0) or (x&29==0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866051730, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(53, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i>&<i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. Так, например, 12&6 = 1100<sub>2</sub>&0110<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наибольшего целого числа <i>А</i> формула<p class=\"left_margin\"><center><p><i>х&А</i><img src=\"https://ege.sdamgia.ru/formula/svg/67/6703c949ca1fcc038a55e128766be0b4.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\" не равно 0\" /> → (<i>x</i>&36 = 0 → <i>х</i>&6<img src=\"https://ege.sdamgia.ru/formula/svg/67/6703c949ca1fcc038a55e128766be0b4.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\" не равно 0\" />)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(63, 0, -1):\n        if ((x&A==0) or (x&36!=0) or (x&6!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866052336, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(54, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> < <i>A</i>) &or; (<i>x</i> > <i>y</i>) &or; (<i>y</i> > <i>24</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (2 * x + 3 * y < A) or (x > y) or (y > 24):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866052791, 'PYTHON', '', '121', 'Антон Сибгатулин'),
(55, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i> + <i>2y</i> < <i>A</i>) &or; (<i>y</i> > <i>x</i>) &or; (<i>x</i> > 30)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x + 2 * y < A) or (y > x) or (x > 30):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866052999, 'PYTHON', '', '91', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(56, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 85 = 0 → (<i>x</i> & 54 ≠ 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(128):\n    B = True\n    for x in range(128):\n        if (x & 85 != 0 or (x & 54 == 0 or x & A != 0)) == 0:\n            B=False \n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866053285, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(57, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> < <i>A</i>) &or; (<i>x</i> &ge; <i>y</i>) &or; (<i>y</i> > <i>24</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (2 * x + 3 * y < A) or (x >= y) or (y > 24):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866053855, 'PYTHON', '', '119', 'Антон Сибгатулин'),
(58, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">На числовой прямой задан отрезок <i>A</i>. Известно, что формула<center><p class=\"left_margin\">((<i>x</i> &in; <i>A</i>) → (<i>x<sup>2</sup></i> &le; 81)) &and; ((<i>y<sup>2</sup></i> &le; 36) → (<i>y</i> &in; <i>A</i>))</center><p class=\"left_margin\">тождественно истинна при любых вещественных <i>x</i> и <i>y</i>. Какую наибольшую длину может иметь отрезок <i>A</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x,a): \n    return ((x in a) <= (x**2 <= 81)) and ((x**2 <= 36) <= (x in a))\na = set([i for i in range(-1000,1000)])\nfor x in range(-1000, 1000):\n    if not f(x,a):\n        a.remove(x)\nprint(len(a) - 1)\n</code>', 5, 0, 0, 0, 0, 1670866054168, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(59, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>x</i> > <i>A</i>) &or; (<i>y</i> > <i>x</i>) &or; (2<i>y</i> + <i>x</i> < 110)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x > A) or (y > x) or (2 * y + x < 110):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866054574, 'PYTHON', '', '36', 'Антон Сибгатулин'),
(60, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(3<i>m</i> + 4<i>n</i> > 66) &or; (<i>m</i> ≤ <i>A</i>) &or; (<i>n</i> < <i>A</i>)<p class=\"left_margin\"></center><p>тождественно истинно при любых целых неотрицательных <i>m</i> и <i>n</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for n in range(300):\n        for m in range(300):\n            if (3 * m + 4 * n > 66) or (m <= A) or (n < A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866055442, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(61, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(5<i>x</i> + 3<i>y</i> &ne; 60) &or; ((<i>A</i> > <i>x</i>) &and; (<i>A</i> > <i>y</i>))</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (5*x + 3*y != 60) or ((a > x) and (a > y)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866056486, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(62, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>x</i> * <i>y</i> < <i>A</i>) &or; (<i>x</i> < <i>y</i>) &or; (<i>x</i> &ge; 12)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x * y < A) or (x < y) or (x >= 12):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866056826, 'PYTHON', '', '122', 'Антон Сибгатулин'),
(63, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i>&#8239;·&#8239;<i>y</i> < <i>100</i>) &or; (<i>y</i> &ge; <i>A</i>) &or; (<i>x</i> > <i>A</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x * y < 100) or (y >= A) or (x > A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866057391, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(64, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<center><p class=\"left_margin\">(<i>y</i> + <i>2x</i> &ne; 48) &or; (<i>A</i> < <i>x</i>) &or; (<i>x</i> < <i>y</i>)</center><p class=\"left_margin\">тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(300, 0, -1): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (y + 2*x != 48) or (a < x) or (x < y):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866057671, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(65, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(3<i>x</i> + 4<i>y</i> &ne; 60) &or; ((<i>A</i> &ge; <i>x</i>) &and; (<i>A</i> &ge; <i>y</i>))</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (3*x + 4*y != 60) or ((a >= x) and (a >= y)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866058262, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(66, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(4<i>x</i> + 3<i>y</i> < <i>A</i>) &or; (<i>x</i> > <i>y</i>) &or; (<i>y</i> > <i>13</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (4 * x + 3 * y < A) or (x > y) or (y > 13):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866058426, 'PYTHON', '', '92', 'Антон Сибгатулин'),
(67, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<center><p class=\"left_margin\">(<i>y</i> + <i>2x</i> &ne; 48) &or; (<i>A</i> < <i>x</i>) &or; (<i>A</i> < <i>y</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(300, 0, -1): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (y + 2*x != 48) or (a < x) or (a < y):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866058704, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(68, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Светлана составляет коды из букв своего имени. Код должен состоять из 8 букв, и каждая буква в нём должна встречаться столько же раз, сколько в имени Светлана. Кроме того, одинаковые буквы в коде не должны стоять рядом. Сколько кодов может составить Светлана?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"СВЕТЛАНА\"\nar = itertools.permutations(alphabet, 8) #Размещение\narl = []\nfor e in ar:\n    arl.append(list(e))\na = set()\nfor e in arl:\n    flag = True\n    s = \"\"\n    for i in range(len(e)-1):\n        s += e[i]\n        if e[i] == e[i + 1]:\n            flag = False\n    if flag:\n        a.add(s)\nprint(len(a))\n</code>', 7, 0, 0, 0, 0, 1670866365246, 'PYTHON', '', '15120', 'Антон Сибгатулин'),
(69, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 6-буквенные слова, составленные из букв А, О, У, записаны в обратном алфавитном порядке. Вот начало списка: <p class=\"left_margin\">1.&#8239;&#8239;УУУУУУ<p class=\"left_margin\">2.&#8239;&#8239;УУУУУО <p class=\"left_margin\">3.&#8239;&#8239;УУУУУА <p class=\"left_margin\">4.&#8239;&#8239;УУУУОУ <p class=\"left_margin\">…… <p class=\"left_margin\">На каком месте от начала списка находится слово ОУУУОО.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"У\", 1: \"О\", 2: \"А\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    for l in range(0, len(a)):\n                        k += 1\n                        if a[i] == \'О\' and a[j] == \'У\' and a[g] == \'У\' and a[m] == \'У\' and a[n] == \'О\' and a[l] == \'О\':\n                            print(k)  \n</code>', 7, 0, 0, 0, 0, 1670866365555, 'PYTHON', '', '248', 'Антон Сибгатулин'),
(70, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Шифр кодового замка представляет собой последовательность из пяти символов, каждый из которых является цифрой от 1 до 5. Сколько различных вариантов шифра можно задать, если известно, что цифра 1 встречается ровно три раза, а каждая из других допустимых цифр может встречаться в шифре любое количество раз или не встречаться совсем?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfrom itertools import product \nalphabet = \'12345\'\ncount=0\nfor i in product(alphabet, repeat=5):    \n    if i.count(\'1\') == 3:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866365764, 'PYTHON', '', '160', 'Антон Сибгатулин'),
(71, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 5-буквенные слова, в которых есть только буквы С, Л, О, Н, причём буква С используется в каждом слове ровно 1 раз. Каждая из других допустимых букв может встречаться в слове любое количество раз или не встречаться совсем. Словом считается любая допустимая последовательность букв, не обязательно осмысленная. Сколько существует таких слов, которые может написать Вася?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"СЛОН\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'С\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866366029, 'PYTHON', '', '405', 'Антон Сибгатулин'),
(72, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв В, Е, К, Н, О, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ВВВВВ<p class=\"left_margin\">2.&#8239;&#8239;ВВВВЕ<p class=\"left_margin\">3.&#8239;&#8239;ВВВВК<p class=\"left_margin\">4.&#8239;&#8239;ВВВВН<p class=\"left_margin\">5.&#8239;&#8239;ВВВВО<p class=\"left_margin\">6.&#8239;&#8239;ВВВЕВ<p class=\"left_margin\">Под каким номером стоит первое из слов, которое начинается с буквы О?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"В\", 1: \"Е\", 2: \"К\", 3: \"Н\", 4: \"О\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if a[i] == \'О\':\n                        print(k)  # Возьмём первое число, которое выдаст программа\n                        break\n</code>', 7, 0, 0, 0, 0, 1670866366200, 'PYTHON', '', '2501', 'Антон Сибгатулин'),
(73, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Шифр кодового замка представляет собой последовательность из пяти символов, каждый из которых является цифрой от 1 до 4. Сколько различных вариантов шифра можно задать, если известно, что цифра 1 встречается ровно два раза, а каждая из других допустимых цифр может встречаться в шифре любое количество раз или не встречаться совсем?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfrom itertools import product \nalphabet = \'1234\'\nap=[]\nfor i in product(alphabet, repeat=5):    \n    if i.count(\'1\') == 2:\n        ap.append(i)\nprint(len(ap))\n</code>', 7, 0, 0, 0, 0, 1670866366468, 'PYTHON', '', '270', 'Антон Сибгатулин'),
(74, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все шестибуквенные слова, составленные из букв К, Л, Н, Т, Э, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;КККККК<p class=\"left_margin\">2.&#8239;&#8239;КККККЛ<p class=\"left_margin\">3.&#8239;&#8239;КККККН<p class=\"left_margin\">4.&#8239;&#8239;КККККТ<p class=\"left_margin\">5.&#8239;&#8239;КККККЭ<p class=\"left_margin\">...<p class=\"left_margin\">Под каким номером в списке идёт слово ККЛКЛК?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"К\", 1: \"Л\", 2: \"Н\", 3: \"Т\", 4: \"Э\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    for l in range(0, len(a)):\n                        k += 1\n                        if a[i] == \'К\' and a[j] == \'К\' and a[g] == \'Л\' and a[m] == \'К\' and a[n] == \'Л\' and a[l] == \'К\':\n                            print(k)\n</code>', 7, 0, 0, 0, 0, 1670866366642, 'PYTHON', '', '131', 'Антон Сибгатулин'),
(75, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Максим составляет таблицу кодовых слов для передачи сообщений, каждому возможному сообщению соответствует своё кодовое слово. В качестве кодовых слов Максим использует четырёхбуквенные слова, в которых есть только буквы A, B, C, D, E, F, X, причём буква X появляется ровно 1 раз. Сколько различных кодовых слов может использовать Максим?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ABCDEFX\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'X\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866366825, 'PYTHON', '', '864', 'Антон Сибгатулин'),
(76, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв В, Л, Т, У, записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ВВВВ<p class=\"left_margin\">2.&#8239;&#8239;ВВВЛ<p class=\"left_margin\">3.&#8239;&#8239;ВВВТ<p class=\"left_margin\">4.&#8239;&#8239;ВВВУ<p class=\"left_margin\">……<p class=\"left_margin\">Запишите слово, которое стоит под номером 75.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"В\", 1: \"Л\", 2: \"Т\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 75:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866367021, 'PYTHON', '', 'ЛВТТ', 'Антон Сибгатулин'),
(77, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Светлана составляет коды из букв слова ПАРАБОЛА. Код должен состоять из 8 букв, и каждая буква в нём должна встречаться столько же раз, сколько в заданном слове. Кроме того, в коде не должны стоять рядом две гласные и две согласные буквы. Сколько кодов может составить Светлана?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ПАРАБОЛА\"\nvol = \"ОА\"\ncon = \"ПРБЛ\"\nar = itertools.permutations(alphabet, 8) #Размещение\narl = []\nfor e in ar:\n    arl.append(list(e))\na = set()\nfor e in arl:\n    flag = True\n    s = \"\"\n    for i in range(len(e)-1):\n        s += e[i]\n        if (e[i] in vol and e[i+1] in vol) or (e[i] in con and e[i+1] in con):\n            flag = False\n    if flag:\n        a.add(s)\nprint(len(a))\n</code>', 7, 0, 0, 0, 0, 1670866367267, 'PYTHON', '', '192', 'Антон Сибгатулин'),
(78, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 6-буквенные слова из букв К, О, Т. Причем буква К используется в каждом слове ровно 1 раз. Остальные буквы могут быть использованы любое количество раз, в том числе совсем отсутствовать. Сколько слов может составить Вася? Словом называется любая буквенная комбинация, не обязательно осмысленное слово русского языка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"КОТ\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"К\") == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866367517, 'PYTHON', '', '192', 'Антон Сибгатулин'),
(79, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААУ<p class=\"left_margin\">5.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">Укажите номер слова РУКАА.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Р\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if i == 2 and j == 3 and g == 1 and m == 0 and n == 0:\n                        print(k)\n</code>', 7, 0, 0, 0, 0, 1670866367680, 'PYTHON', '', '721', 'Антон Сибгатулин'),
(80, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Тимофей составляет 5-буквенные коды из букв Т, И, М, О, Ф, Е, Й. Буква Т должна входить в код не менее одного раза, а буква Й&#8239;&#8239;— не более одного раза. Сколько различных кодов может составить Тимофей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfrom itertools import product\ns = \'ТИМОФЕЙ\'\nwords = []\nfor w in product(s, repeat=5):\n&#8239;&#8239;&#8239;&#8239;if (\'Т\' in w) and w.count(\'Й\') <= 1:\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;words.append(w)\nprint(len(words))\n</code>', 7, 0, 0, 0, 0, 1670866367924, 'PYTHON', '', '8006', 'Антон Сибгатулин'),
(81, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв В, И, Н, Т, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ВВВВВ<p class=\"left_margin\">2.&#8239;&#8239;ВВВВИ<p class=\"left_margin\">3.&#8239;&#8239;ВВВВН<p class=\"left_margin\">4.&#8239;&#8239;ВВВВТ<p class=\"left_margin\">5.&#8239;&#8239;ВВВИВ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 1020.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"В\", 1: \"И\", 2: \"Н\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 1020:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866368063, 'PYTHON', '', 'ТТТНТ', 'Антон Сибгатулин'),
(82, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Укажите номер первого слова, которое начинается с буквы О.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if a[i] == \"О\":\n                        print(k) # Возьмем первое число, которое выведет программа\n                        break\n</code>', 7, 0, 0, 0, 0, 1670866368215, 'PYTHON', '', '82', 'Антон Сибгатулин'),
(83, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 5-буквенные слова, в которых встречаются только буквы А, Б, В, Г, причём буква А появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в слове любое количество раз или не встречаться совсем. Словом считается любая допустимая последовательность букв, не обязательно осмысленная. Сколько существует таких слов, которые может написать Вася?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools \nalphabet = \"АБВГ\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'А\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866368365, 'PYTHON', '', '405', 'Антон Сибгатулин'),
(84, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААУ<p class=\"left_margin\">5.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 150-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Р\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 150:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866368522, 'PYTHON', '', 'АРККК', 'Антон Сибгатулин'),
(85, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Олег составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Олег использует 4-буквенные слова, в которых есть только буквы A, B, C, D, X, Y, Z, причём буквы X, Y и Z встречаются только на двух первых позициях, а буквы A, B, C, D&#8239;&#8239;— только на двух последних. Сколько различных кодовых слов может использовать Олег?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools \nalphabet = \"ABCDXYZ\"\ns = \'XYZ\'\ns1 = \'ABCD\'\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in s and e[1] in s and e[2] in s1 and e[3] in s1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866368774, 'PYTHON', '', '144', 'Антон Сибгатулин'),
(86, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Игорь составляет 8-буквенные коды из букв И, Г, О, Р, Ь. Буквы О и Ь должны встречаться в коде ровно по одному разу, при этом буква Ь не может стоять на первом месте. Остальные допустимые буквы могут встречаться произвольное количество раз или не встречаться совсем. Сколько различных кодов может составить Игорь?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ИГОРЬ\"\nar = itertools.product(alphabet, repeat=8) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"О\") == 1 and e.count(\"Ь\") == 1 and e[0] != \"Ь\":\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866368922, 'PYTHON', '', '35721', 'Антон Сибгатулин'),
(87, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв К, О, Р, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ККККК<p class=\"left_margin\">2.&#8239;&#8239;ККККО<p class=\"left_margin\">3.&#8239;&#8239;ККККР<p class=\"left_margin\">4.&#8239;&#8239;КККОК<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 238.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"К\", 1: \"О\", 2: \"Р\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 238:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866369062, 'PYTHON', '', 'РРРОК', 'Антон Сибгатулин'),
(88, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв М, У, Х, А записаны в алфавитном порядке и пронумерованы.<p> Вот начало списка:<p> 1.&#8239;&#8239;АААА<p> 2.&#8239;&#8239;АААМ<p> 3.&#8239;&#8239;АААУ<p> 4.&#8239;&#8239;АААХ<p> 5.&#8239;&#8239;ААМА<p class=\"left_margin\">Напишите номер слова ХУХХ</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"М\", 2: \"У\", 3: \"Х\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'Х\' and a[j] == \'У\' and a[g] == \'Х\' and a[m] == \'Х\':\n                    print(k)\n</code>', 7, 0, 0, 0, 0, 1670866369203, 'PYTHON', '', '240', 'Антон Сибгатулин'),
(89, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Найдите количество пятизначных восьмеричных чисел, в которых все цифры различны и никакие две четные или нечетные не стоят рядом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"01234567\"\nar = itertools.permutations(alphabet, 5) #Размещение\narl = []\nfor e in ar:\n    arl.append(list(e))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)-1):\n        if (e[0] == \"0\") or (int(e[i]) % 2 == 0 and int(e[i+1]) % 2 == 0) or (int(e[i]) % 2 != 0 and int(e[i+1]) % 2 != 0):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866369328, 'PYTHON', '', '504', 'Антон Сибгатулин'),
(90, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, составленные из букв П, А, Р, У, С, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААП<p class=\"left_margin\">3.&#8239;&#8239;АААР<p class=\"left_margin\">4.&#8239;&#8239;АААС<p class=\"left_margin\">5.&#8239;&#8239;АААУ<p class=\"left_margin\">6.&#8239;&#8239;ААПА<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&nbsp…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с буквы У?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"П\", 2: \"Р\", 3: \"С\", 4: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'У\':\n                    print(k)  # Возьмём первое число, которое выдаст программа\n                    break\n</code>', 7, 0, 0, 0, 0, 1670866369547, 'PYTHON', '', '501', 'Антон Сибгатулин'),
(91, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Иван составляет 5-буквенные коды из букв И, В, А, Н. Буквы в коде могут повторяться, использовать все буквы не обязательно, но букву И нужно использовать хотя бы один раз. Сколько различных кодов может составить Иван?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ИВАН\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"И\") >= 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866369687, 'PYTHON', '', '781', 'Антон Сибгатулин'),
(92, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Демьян составляет 6-буквенные коды из букв Д, Е, М, Ь, Я, Н. Каждую букву нужно использовать ровно 1 раз, при этом Ь нельзя ставить первым и нельзя ставить после гласной. Сколько различных кодов может составить Демьян?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ДЕМЬЯН\"\nvol = \'ЕЯ\'\nar = itertools.permutations(alphabet) #Перестановка\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)):\n        if (e[0] == \"Ь\") or (e[i] == \"Ь\" and e[i-1] in vol):\n            flag = False\n    if flag: count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866369859, 'PYTHON', '', '360', 'Антон Сибгатулин'),
(93, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, составленные из букв С, Е, Н, О, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;ЕЕЕЕ<p class=\"left_margin\">2.&#8239;&#8239;ЕЕЕН<p class=\"left_margin\">3.&#8239;&#8239;ЕЕЕО<p class=\"left_margin\">4.&#8239;&#8239;ЕЕЕС<p class=\"left_margin\">5.&#8239;&#8239;ЕЕНЕ<p class=\"left_margin\">…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с буквы С?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Е\", 1: \"Н\", 2: \"О\", 3: \"С\"} \nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'С\':\n                    print(k)  # Возьмём первое число, которое выдаст программа\n</code>', 7, 0, 0, 0, 0, 1670866370062, 'PYTHON', '', '193', 'Антон Сибгатулин'),
(94, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Настя составляет 4-буквенные коды из букв Н, А, С, Т, Я. Каждую букву можно использовать не более одного раза, при этом нельзя ставить рядом две гласные и две согласные. Сколько различных кодов может составить Настя?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"НАСТЯ\"\nvol = \"АЯ\"\ncon = \"НСТ\"\nar = itertools.permutations(alphabet, 4) #Размещение\narl = []\nfor e in ar:\n    arl.append(list(e))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)-1):\n        if (e[i] in vol and e[i+1] in vol) or (e[i] in con and e[i+1] in con):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866370250, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(95, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 240-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 240:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866370390, 'PYTHON', '', 'УУУОУ', 'Антон Сибгатулин'),
(96, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 4-буквенные слова, в которых есть только буквы Б, Е, Л, К, А, причём буква Б используется в каждом слове ровно 1 раз. Каждая из других допустимых букв может встречаться в слове любое количество раз или не встречаться совсем. Словом считается любая допустимая последовательность букв, не обязательно осмысленная. Сколько существует таких слов, которые может написать Вася?<p><!--restored from changelog 01.05.2020 08:26--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"БЕЛКА\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"Б\") == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866370593, 'PYTHON', '', '256', 'Антон Сибгатулин'),
(97, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 125-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 125:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866370843, 'PYTHON', '', 'ОООУО', 'Антон Сибгатулин'),
(98, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Настя составляет 6-буквенные коды из букв Н, А, С, Т, Я. Каждая допустимая гласная буква может входить в код не более одного раза. Сколько кодов может составить Настя?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"НАСТЯ\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"А\") <= 1 and e.count(\"Я\") <= 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866371156, 'PYTHON', '', '6075', 'Антон Сибгатулин'),
(99, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 170-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 170:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866371546, 'PYTHON', '', 'УААУО', 'Антон Сибгатулин'),
(100, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 6-буквенные слова, в которых могут быть использованы только буквы В, И, Ш, Н, Я, причём буква В используется не более одного раза. Каждая из других допустимых букв может встречаться в слове любое количество раз или не встречаться совсем. Слово не должно начинаться с буквы Ш и оканчиваться гласными буквами. Словом считается любая допустимая последовательность букв, не обязательно осмысленная. Сколько существует таких слов, которые может написать Вася?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ВИШНЯ\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"В\") <= 1 and e[0] != \"Ш\" and e[-1] != \"Я\" and e[-1] != \"И\":\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866371702, 'PYTHON', '', '4352', 'Антон Сибгатулин'),
(101, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв В, Н, Р, Т, записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ВВВВ<p class=\"left_margin\">2.&#8239;&#8239;ВВВН<p class=\"left_margin\">3.&#8239;&#8239;ВВВР<p class=\"left_margin\">4.&#8239;&#8239;ВВВТ<p class=\"left_margin\">5.&#8239;&#8239;ВВНВ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 251.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"В\", 1: \"Н\", 2: \"Р\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 251:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866372562, 'PYTHON', '', 'ТТРР', 'Антон Сибгатулин'),
(102, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Пётр составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Пётр использует все пятибуквенные слова в алфавите {A, B, C, D, E, F}, удовлетворяющие такому условию: кодовое слово не может начинаться с буквы F и заканчиваться буквой A. Сколько различных кодовых слов может использовать Пётр?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCDEF\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] != \'A\' and e[-1] != \'A\':\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866372749, 'PYTHON', '', '5400', 'Антон Сибгатулин'),
(103, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, в составе которых могут быть только буквы А, В, Т, О, Р, записаны в алфавитном порядке и пронумерованы, начиная с 1. Ниже приведено начало списка:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААВ<p class=\"left_margin\">3.&#8239;&#8239;АААО<p class=\"left_margin\">4.&#8239;&#8239;АААР<p class=\"left_margin\">5.&#8239;&#8239;АААТ<p class=\"left_margin\">6.&#8239;&#8239;ААВА<p class=\"left_margin\">Под каким номером в списке идёт слово ВАТА?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"В\", 2: \"О\", 3: \"Р\", 4: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if i == 1 and j == 0 and g == 4 and m == 0:\n                    print(k)\n</code>', 7, 0, 0, 0, 0, 1670866372905, 'PYTHON', '', '146', 'Антон Сибгатулин'),
(104, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 101-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 101:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866373140, 'PYTHON', '', 'ОАУАО', 'Антон Сибгатулин'),
(105, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Руслан составляет 6-буквенные коды из букв Р, У, С, Л, А, Н. Каждую букву нужно использовать ровно один раз, при этом нельзя ставить рядом две гласные. Сколько различных кодов может составить Руслан?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"РУСЛАН\"\nvol = \"УА\"\nar = itertools.permutations(alphabet) #Перестановка\narl = []\nfor e in ar:\n    arl.append(list(e))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)-1):\n        if e[i] in vol and e[i+1] in vol:\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866373421, 'PYTHON', '', '480', 'Антон Сибгатулин'),
(106, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, в составе которых могут быть только буквы Л, Е, М, У, Р, записаны в алфавитном порядке и пронумерованы, начиная с 1. Ниже приведено начало списка.<p class=\"left_margin\">1.&#8239;&#8239;ЕЕЕЕ<p class=\"left_margin\">2.&#8239;&#8239;ЕЕЕЛ<p class=\"left_margin\">3.&#8239;&#8239;ЕЕЕМ<p class=\"left_margin\">4.&#8239;&#8239;ЕЕЕР<p class=\"left_margin\">5.&#8239;&#8239;ЕЕЕУ<p class=\"left_margin\">6.&#8239;&#8239;ЕЕЛЕ<p class=\"left_margin\">…<p> Под каким номером в списке идёт первое слово, которое начинается с буквы Л?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"Е\", 1: \"Л\", 2: \"М\", 3: \"Р\", 4: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \"Л\":\n                    print(k)  # Возьмем первое число, которое выведет программа\n</code>', 7, 0, 0, 0, 0, 1670866373577, 'PYTHON', '', '126', 'Антон Сибгатулин'),
(107, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Игорь использует 6-буквенные слова, в которых есть только буквы A, B,   X, причём буква X появляется ровно 1 раз. Каждая из букв A, B может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Игорь?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABX\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'X\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866373702, 'PYTHON', '', '192', 'Антон Сибгатулин'),
(108, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алексей составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Алексей использует 5-буквенные слова, в которых есть только буквы A, B, C, X, причём буква X может появиться только на последнем месте или не появиться вовсе. Сколько различных кодовых слов может использовать Алексей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCX\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if (e[-1] == \'X\' or e[-1] != \'X\') and e[0] != \'X\' and e[1] != \'X\' and e[2] != \'X\' and e[3] != \'X\':\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866373874, 'PYTHON', '', '324', 'Антон Сибгатулин'),
(109, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, составленные из букв П, А, Р, У, С, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААП<p class=\"left_margin\">3.&#8239;&#8239;АААР<p class=\"left_margin\">4.&#8239;&#8239;АААС<p class=\"left_margin\">5.&#8239;&#8239;АААУ<p class=\"left_margin\">6.&#8239;&#8239;ААПА<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&nbsp…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с буквы Р?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"П\", 2: \"Р\", 3: \"С\", 4: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'Р\':\n                    print(k)  # Возьмём первое число, которое выдаст программа\n                    break\n</code>', 7, 0, 0, 0, 0, 1670866374046, 'PYTHON', '', '251', 'Антон Сибгатулин'),
(110, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Игорь использует 5-буквенные слова, в которых есть только буквы A, B, C, X, причём буква X появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Игорь?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCX\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'X\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866374202, 'PYTHON', '', '405', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(111, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, составленные из букв П, А, Р, У, С, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААП<p class=\"left_margin\">3.&#8239;&#8239;АААР<p class=\"left_margin\">4.&#8239;&#8239;АААС<p class=\"left_margin\">5.&#8239;&#8239;АААУ<p class=\"left_margin\">6.&#8239;&#8239;ААПА<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&nbsp…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, в котором нет буквы А?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"П\", 2: \"Р\", 3: \"С\", 4: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                s = a[i] + a[j] + a[g] + a[m]\n                k += 1\n                if s.count(\'А\') == 0:\n                    print(k)  # Возьмём первое число, которое выдаст программа\n                    break\n</code>', 7, 0, 0, 0, 0, 1670866374421, 'PYTHON', '', '157', 'Антон Сибгатулин'),
(112, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Матвей составляет 6-буквенные коды из букв М, А, Т, В, Е, Й. Каждую букву нужно использовать ровно 1 раз, при этом код не может начинаться с буквы Й и не может содержать сочетания АЕ. Сколько различных кодов может составить Матвей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"МАТВЕЙ\"\nar = itertools.permutations(alphabet) #Перестановка\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if e[0] == \'Й\' or (e[i] == \'А\' and e[i + 1] == \'Е\'):\n            flag = False\n    if flag == True: count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866374695, 'PYTHON', '', '504', 'Антон Сибгатулин'),
(113, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв Л, Н, Р, Т, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ЛЛЛЛЛ<p class=\"left_margin\">2.&#8239;&#8239;ЛЛЛЛН<p class=\"left_margin\">3.&#8239;&#8239;ЛЛЛЛР<p class=\"left_margin\">4.&#8239;&#8239;ЛЛЛЛТ<p class=\"left_margin\">5.&#8239;&#8239;ЛЛЛНЛ<p class=\"left_margin\">Запишите слово, которое стоит на 150-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Л\", 1: \"Н\", 2: \"Р\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 150:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866374861, 'PYTHON', '', 'ЛРННН', 'Антон Сибгатулин'),
(114, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Укажите номер слова ОАОАО.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if i == 1 and j == 0 and g == 1 and m == 0 and n == 1:\n                        print(k)\n</code>', 7, 0, 0, 0, 0, 1670866374983, 'PYTHON', '', '92', 'Антон Сибгатулин'),
(115, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Николай составляет 4-буквенные коды из букв Н, И, К, О, Л, А, Й. Каждую букву можно использовать любое количество раз, при этом код не может начинаться с буквы Й и должен содержать хотя бы одну гласную. Сколько различных кодов может составить Николай?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"НИКОЛАЙ\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)):\n        if (e[0] == \"Й\") or (e.count(\"И\") + e.count(\"О\") + e.count(\"А\") == 0):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866375149, 'PYTHON', '', '1866', 'Антон Сибгатулин'),
(116, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААУ<p class=\"left_margin\">5.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">Укажите номер первого слова, которое начинается с буквы К.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Р\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if a[i] == \"К\":\n                        print(k) # Возьмем первое число, которое выведет программа\n                        break\n</code>', 7, 0, 0, 0, 0, 1670866375305, 'PYTHON', '', '257', 'Антон Сибгатулин'),
(117, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Полина составляет 4-буквенные коды из букв П, О, Л, И, Н, А. Каждую букву можно использовать любое количество раз или совсем не использовать, при этом нельзя ставить подряд две гласные или две согласные. Сколько различных кодов может составить Полина?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ПОЛИНА\"\nvol = \"ОИА\"\ncon = \"ПЛН\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if (e[i] in vol and e[i + 1] in vol) or (e[i] in con and e[i + 1] in con):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866375492, 'PYTHON', '', '162', 'Антон Сибгатулин'),
(118, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Ольга составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Ольга использует 4-буквенные слова, в которых есть только буквы A, B, C, D, E, X, причём буква X появляется ровно 1 раз и только на первом или последнем месте. Каждая из других допустимых букв  может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Ольга?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCDEX\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'X\') == 1 and (e[0] == \'X\' or e[-1] == \'X\'):\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866375649, 'PYTHON', '', '250', 'Антон Сибгатулин'),
(119, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв Е, Ж, И, записаны в алфавитном порядке и пронумерованы. <p class=\"left_margin\">Вот начало списка: <p class=\"left_margin\">1.&#8239;&#8239;ЕЕЕЕЕ <p class=\"left_margin\">2.&#8239;&#8239;ЕЕЕЕЖ <p class=\"left_margin\">3.&#8239;&#8239;ЕЕЕЕИ <p class=\"left_margin\">4.&#8239;&#8239;ЕЕЕЖЕ <p>…… <p class=\"left_margin\">Запишите слово, которое стоит под номером 238.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Е\", 1: \"Ж\", 2: \"И\"} \nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 238:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866375824, 'PYTHON', '', 'ИИИЖЕ', 'Антон Сибгатулин'),
(120, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв В, И, Р, Т, записаны в алфавитном порядке.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ВВВВ<p class=\"left_margin\">2.&#8239;&#8239;ВВВИ<p class=\"left_margin\">3.&#8239;&#8239;ВВВР<p class=\"left_margin\">4.&#8239;&#8239;ВВВТ<p class=\"left_margin\">5.&#8239;&#8239;ВВИВ<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 249-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"В\", 1: \"И\", 2: \"Р\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 249:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866376011, 'PYTHON', '', 'ТТРВ', 'Антон Сибгатулин'),
(121, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Олег составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Олег использует 4-буквенные слова, в которых есть только буквы A, B, C, D, E, X, Z, причём буквы X и Z встречаются только на двух первых позициях, а буквы A, B, C, D, E&#8239;&#8239;— только на двух последних. Сколько различных кодовых слов может использовать Олег?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCDEXZ\"\ns = \'XZ\'\ns1 = \'ABCDE\'\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in s and e[1] in s and e[2] in s1 and e[3] in s1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866376186, 'PYTHON', '', '100', 'Антон Сибгатулин'),
(122, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв С, Л, О, Н записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ЛЛЛЛЛ<p class=\"left_margin\">2.&#8239;&#8239;ЛЛЛЛН<p class=\"left_margin\">3.&#8239;&#8239;ЛЛЛЛО<p class=\"left_margin\">4.&#8239;&#8239;ЛЛЛЛС<p class=\"left_margin\">5.&#8239;&#8239;ЛЛЛНЛ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 1020.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Л\", 1: \"Н\", 2: \"О\", 3: \"С\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 1020:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866376343, 'PYTHON', '', 'СССОС', 'Антон Сибгатулин'),
(123, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Левий составляет 5-буквенные коды из букв Л, Е, В, И, Й. Каждую букву нужно использовать ровно 1 раз, при этом код не может начинаться с буквы Й и не может содержать сочетания ЕИ. Сколько различных кодов может составить Левий?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ЛЕВИЙ\"\nar = itertools.permutations(alphabet) #Перестановка\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if e[0] == \'Й\' or (e[i] == \'Е\' and e[i + 1] == \'И\'):\n            flag = False\n    if flag == True: count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866376530, 'PYTHON', '', '78', 'Антон Сибгатулин'),
(124, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв Е, Ж, И, записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ЕЕЕЕЕ<p class=\"left_margin\">2.&#8239;&#8239;ЕЕЕЕЖ<p class=\"left_margin\">3.&#8239;&#8239;ЕЕЕЕИ<p class=\"left_margin\">4.&#8239;&#8239;ЕЕЕЖЕ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 238.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Е\", 1: \"Ж\", 2: \"И\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 238:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866376686, 'PYTHON', '', 'ИИИЖЕ', 'Антон Сибгатулин'),
(125, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько слов длины 5, начинающихся с гласной буквы, можно составить из букв Е, Г, Э? Каждая буква может входить в слово несколько раз. Слова не обязательно должны быть осмысленными словами русского языка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ЕГЭ\"\nvol = \"ЕЭ\"\nar = itertools.product(alphabet, repeat = 5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in vol:\n            count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866376874, 'PYTHON', '', '162', 'Антон Сибгатулин'),
(126, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Регина составляет 5-буквенные коды из букв Р, Е, Г, И, Н, А. Буквы Р и Г нужно обязательно использовать ровно по одному разу, букву Н можно использовать один раз или не использовать совсем, остальные буквы можно использовать произвольное количество раз или не использовать совсем. Сколько различных кодов может составить Регина?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"РЕГИНА\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"Г\") == 1 and e.count(\"Р\") == 1 and e.count(\"Н\") <= 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866377148, 'PYTHON', '', '1080', 'Антон Сибгатулин'),
(127, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из 5 букв А, К, Л, О, Ш, записаны в алфавитном порядке.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААЛ<p class=\"left_margin\">4.&#8239;&#8239;ААААО<p class=\"left_margin\">5.&#8239;&#8239;ААААШ<p class=\"left_margin\">6.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">На каком месте от начала списка стоит слово ШКОЛА?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Л\", 3: \"О\", 4: \"Ш\"} \nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if a[i] == \'Ш\' and a[j] == \'К\' and  a[g] == \'О\' and a[m] == \'Л\' and a[n] == \'А\':\n                        print(k)\n</code>', 7, 0, 0, 0, 0, 1670866377357, 'PYTHON', '', '2711', 'Антон Сибгатулин'),
(128, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в обратном алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;УУУУУ<p class=\"left_margin\">2.&#8239;&#8239;УУУУО<p class=\"left_margin\">3.&#8239;&#8239;УУУУА<p class=\"left_margin\">4.&#8239;&#8239;УУУОУ<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 240-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"У\", 1: \"О\", 2: \"А\"} \nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 240:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866377523, 'PYTHON', '', 'АААОА', 'Антон Сибгатулин'),
(129, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 5-буквенные слова, в которых есть только буквы В, О, Л, К, причём буква В используется в каждом слове ровно 1 раз. Каждая из других допустимых букв может встречаться в слове любое количество раз или не встречаться совсем. Словом считается любая допустимая последовательность букв, не обязательно осмысленная. Сколько существует таких слов, которые может написать Вася?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ВОЛК\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"В\") == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866377705, 'PYTHON', '', '405', 'Антон Сибгатулин'),
(130, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько слов длины 4, начинающихся с согласной буквы и заканчивающихся гласной буквой, можно составить из букв М, Е, Т, Р, О? Каждая буква может входить в слово несколько раз. Слова не обязательно должны быть осмысленными словами русского языка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfrom itertools import product\ns=\'метро\'\ns0=\'мтр\'\ns3=\'ео\'\nwords=[]\nfor w in product(s,repeat=4):\n    if (w[0] in s0) and (w[3] in s3):\n        words.append(w)\nprint(len(words))\n</code>', 7, 0, 0, 0, 0, 1670866377895, 'PYTHON', '', '150', 'Антон Сибгатулин'),
(131, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв М, У, Х, А записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААМ<p class=\"left_margin\">3.&#8239;&#8239;АААУ<p class=\"left_margin\">4.&#8239;&#8239;АААХ<p class=\"left_margin\">5.&#8239;&#8239;ААМА<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 254.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"М\", 2: \"У\", 3: \"Х\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 254:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866378044, 'PYTHON', '', 'ХХХМ', 'Антон Сибгатулин'),
(132, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Игорь использует трёхбуквенные слова, в которых могут быть только буквы Ш, К, О, Л, А, причём буква К появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Игорь?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ШКОЛА\"\nar = itertools.product(alphabet, repeat=3) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"К\") == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866378234, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(133, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв К, О, Р, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ККККК<p class=\"left_margin\">2.&#8239;&#8239;ККККО<p class=\"left_margin\">3.&#8239;&#8239;ККККР<p class=\"left_margin\">4.&#8239;&#8239;КККОК<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 182.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"К\", 1: \"О\", 2: \"Р\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 182:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866378441, 'PYTHON', '', 'РКРКО', 'Антон Сибгатулин'),
(134, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Светлана составляет коды из букв слова РОСОМАХА. Код должен состоять из 8 букв, и каждая буква в нём должна встречаться столько же раз, сколько в заданном слове. Кроме того, в коде не должны стоять рядом две гласные и две согласные буквы. Сколько кодов может составить Светлана?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"РОСОМАХА\"\nvol = \"ОА\"\ncon = \"РСМХ\"\nar = itertools.permutations(alphabet, 8) #Размещение\narl = []\nfor e in ar:\n    arl.append(list(e))\na = set()\nfor e in arl:\n    flag = True\n    s = \"\"\n    for i in range(len(e)-1):\n        s += e[i]\n        if (e[i] in vol and e[i+1] in vol) or (e[i] in con and e[i+1] in con):\n            flag = False\n    if flag:\n        a.add(s)\nprint(len(a))\n</code>', 7, 0, 0, 0, 0, 1670866378713, 'PYTHON', '', '288', 'Антон Сибгатулин'),
(135, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, в составе которых могут быть буквы Н, О, Т, К, И, записаны в алфавитном порядке и пронумерованы, начиная с 1.<p class=\"left_margin\">Ниже приведено начало списка.<p class=\"left_margin\">1.&#8239;&#8239;ИИИИ<p class=\"left_margin\">2.&#8239;&#8239;ИИИК<p class=\"left_margin\">3.&#8239;&#8239;ИИИН<p class=\"left_margin\">4.&#8239;&#8239;ИИИО<p class=\"left_margin\">5.&#8239;&#8239;ИИИТ<p class=\"left_margin\">6.&#8239;&#8239;ИИКИ<p>…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с буквы О?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"И\", 1: \"К\", 2: \"Н\", 3: \"О\", 4: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'О\':\n                    print(k)  # Возьмём первое число, которое выдаст программа\n</code>', 7, 0, 0, 0, 0, 1670866378886, 'PYTHON', '', '376', 'Антон Сибгатулин'),
(136, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Петя составляет 3-буквенные слова из букв Р, У, Ч, К, А причем буква К должна встречаться в слове ровно 1 раз. Сколько различных слов может составить Петя?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"РУЧКА\"\nar = itertools.product(alphabet, repeat=3) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"К\") == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866379058, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(137, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв И, О, У, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ИИИИИ<p class=\"left_margin\">2.&#8239;&#8239;ИИИИО<p class=\"left_margin\">3.&#8239;&#8239;ИИИИУ<p class=\"left_margin\">4.&#8239;&#8239;ИИИОИ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 240.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"И\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 240:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866379189, 'PYTHON', '', 'УУУОУ', 'Антон Сибгатулин'),
(138, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алексей составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Алексей использует 4-буквенные слова, в которых есть только буквы A, B, C, D, X, причём буква X может появиться на первом месте или не появиться вовсе. Сколько различных кодовых слов может использовать Алексей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCDX\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if (e[0] == \'X\' or e[0] != \'X\') and e[1] != \'X\' and e[2] != \'X\' and e[3] != \'X\':\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866379344, 'PYTHON', '', '320', 'Антон Сибгатулин'),
(139, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 6-буквенные слова, составленные из букв Б, К, Ф, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ББББББ<p class=\"left_margin\">2.&#8239;&#8239;БББББК<p class=\"left_margin\">3.&#8239;&#8239;БББББФ<p class=\"left_margin\">4.&#8239;&#8239;ББББКБ<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 345-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Б\", 1: \"К\", 2: \"Ф\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    for l in range(0, len(a)):\n                        k += 1\n                        if k == 345:\n                            print(a[i], a[j], a[g], a[m], a[n], a[l], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866379508, 'PYTHON', '', 'ККБФБФ', 'Антон Сибгатулин'),
(140, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вадим составляет таблицу кодовых слов для передачи сообщений, каждому возможному сообщению соответствует своё кодовое слово. В качестве кодовых слов Вадим использует четырёхбуквенные слова, в которых есть только буквы A, B, C, D, E, X, причём буква X появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Вадим?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCDEX\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'X\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866379702, 'PYTHON', '', '500', 'Антон Сибгатулин'),
(141, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААУ<p class=\"left_margin\">5.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 250-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Р\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 250:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866379852, 'PYTHON', '', 'АУУРК', 'Антон Сибгатулин'),
(142, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько слов длины 6, начинающихся и заканчивающихся согласной буквой, можно составить из букв Г, О, Д? Каждая буква может входить в слово несколько раз. Слова не обязательно должны быть осмысленными словами русского языка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ГОД\"\ncon = \"ГД\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in con and e[-1] in con:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866380005, 'PYTHON', '', '324', 'Антон Сибгатулин'),
(143, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААУ<p class=\"left_margin\">5.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 350-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Р\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 350:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866380196, 'PYTHON', '', 'КККУК', 'Антон Сибгатулин'),
(144, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Тимофей составляет 5-буквенные коды из букв Т, И, М, О, Ф, Е, Й. Буква Й может использоваться в коде не более одного раза, при этом она не может стоять на первом месте, на последнем месте и рядом с буквой И. Все остальные буквы могут встречаться произвольное количество раз или не встречаться совсем. Сколько различных кодов может составить Тимофей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ТИМОФЕЙ\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторениями\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if e.count(\'Й\') > 1 or e[0] == \'Й\' or e[-1] == \'Й\' or (e[i] == \'Й\' and e[i + 1] == \'И\') or (e[i + 1] == \'Й\' and e[i] == \'И\'):\n            flag = False\n    if flag == True: count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866380392, 'PYTHON', '', '10476', 'Антон Сибгатулин'),
(145, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв В, Н, Р, Т, записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ВВВВ<p class=\"left_margin\">2.&#8239;&#8239;ВВВН<p class=\"left_margin\">3.&#8239;&#8239;ВВВР<p class=\"left_margin\">4.&#8239;&#8239;ВВВТ<p class=\"left_margin\">5.&#8239;&#8239;ВВНВ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 250.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"В\", 1: \"Н\", 2: \"Р\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 250:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866380546, 'PYTHON', '', 'ТТРН', 'Антон Сибгатулин'),
(146, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Андрей составляет 6-буквенные коды из букв А, Н, Д, Р, Е, Й. Буква Й может использоваться в коде не более одного раза, при этом она не может стоять на первом месте, на последнем месте и рядом с буквой Е. Все остальные буквы могут встречаться произвольное количество раз или не встречаться совсем. Сколько различных кодов может составить Андрей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"АНДРЕЙ\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторениями\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if e.count(\'Й\') > 1 or e[0] == \'Й\' or e[-1] == \'Й\' or (e[i] == \'Й\' and e[i + 1] == \'Е\') or (e[i + 1] == \'Й\' and e[i] == \'Е\'):\n            flag = False\n    if flag == True: count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866380716, 'PYTHON', '', '23625', 'Антон Сибгатулин'),
(147, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв М, А, Р, Т, записаны в алфавитном порядке.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААМ<p class=\"left_margin\">3.&#8239;&#8239;АААР<p class=\"left_margin\">4.&#8239;&#8239;АААТ<p class=\"left_margin\">5.&#8239;&#8239;ААМА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 250-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"М\", 2: \"Р\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 250:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866380851, 'PYTHON', '', 'ТТРМ', 'Антон Сибгатулин'),
(148, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Укажите номер первого слова, которое начинается с буквы У.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if a[i] == \"У\":\n                        print(k) # Возьмем первое число, которое выведет программа\n                        break\n</code>', 7, 0, 0, 0, 0, 1670866381029, 'PYTHON', '', '163', 'Антон Сибгатулин'),
(149, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Рассматриваются символьные последовательности длины 6&#8239; в пятибуквенном алфавите {К, А, Т, Е, Р}. Сколько существует таких последовательностей, которые начинаются с буквы Р и заканчиваются буквой К?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"КАТЕР\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] == \'Р\' and e[-1] == \'К\':\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866381157, 'PYTHON', '', '625', 'Антон Сибгатулин'),
(150, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Игорь использует 5-буквенные слова, в которых есть только буквы A, B, C,  X, причём буква X появляется ровно 1 раз и только на 1-й или последней позиции слова. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Игорь</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCX\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'X\') == 1 and (e[0] == \'X\' or e[-1] == \'X\'):\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866381405, 'PYTHON', '', '162', 'Антон Сибгатулин'),
(151, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 210-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 210:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866381604, 'PYTHON', '', 'УОУАУ', 'Антон Сибгатулин'),
(152, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв С, Л, О, Н записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ЛЛЛЛ<p class=\"left_margin\">2.&#8239;&#8239;ЛЛЛН<p class=\"left_margin\">3.&#8239;&#8239;ЛЛЛО<p class=\"left_margin\">4.&#8239;&#8239;ЛЛЛС<p class=\"left_margin\">5.&#8239;&#8239;ЛЛНЛ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 250.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Л\", 1: \"Н\", 2: \"О\", 3: \"С\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 250:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866381746, 'PYTHON', '', 'ССОН', 'Антон Сибгатулин'),
(153, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Герасим составляет 7-буквенные коды из букв Г, Е, Р, А, С, И, М. Каждую букву нужно использовать ровно 1 раз, при этом нельзя ставить подряд две гласные или две согласные. Сколько различных кодов может составить Герасим?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ГЕРАСИМ\"\ncon = \'ГРСМ\'\nvol = \'ЕАИ\'\nar = itertools.permutations(alphabet) #Перестановка\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if (e[i] in con and e[i + 1] in con) or (e[i] in vol and e[i + 1] in vol):\n            flag = False\n    if flag == True: count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866381911, 'PYTHON', '', '144', 'Антон Сибгатулин'),
(154, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, составленные из букв А, Л, Г, О, Р, И, Т, М, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААГ<p class=\"left_margin\">3.&#8239;&#8239;АААИ<p class=\"left_margin\">4.&#8239;&#8239;АААЛ<p class=\"left_margin\">5.&#8239;&#8239;АААМ<p class=\"left_margin\">6.&#8239;&#8239;АААО<p class=\"left_margin\">7.&#8239;&#8239;АААР<p class=\"left_margin\">8.&#8239;&#8239;АААТ<p class=\"left_margin\">9.&#8239;&#8239;ААГА<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&nbsp…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с букв ИГ?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"Г\", 2: \"И\", 3: \"Л\", 4: \"М\", 5: \"О\", 6: \"Р\", 7: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'И\' and a[j] == \'Г\':\n                    print(k)  # Возьмём первое число, которое выдаст программа\n</code>', 7, 0, 0, 0, 0, 1670866382093, 'PYTHON', '', '1089', 'Антон Сибгатулин'),
(155, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 5-буквенные слова, в которых есть только буквы З, И, М, А, причём в каждом слове есть ровно одна гласная буква и она встречается ровно 1 раз. Каждая из допустимых согласных букв может встречаться в слове любое количество раз или не встречаться совсем. Словом считается любая допустимая последовательность букв, не обязательно осмысленная. Сколько существует таких слов, которые может написать Вася?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ЗИМА\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if (e.count(\'И\') == 1 and e.count(\'А\') == 0) or (e.count(\'И\') == 0 and e.count(\'А\') == 1):\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866382281, 'PYTHON', '', '160', 'Антон Сибгатулин'),
(156, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 6-буквенные слова, составленные из букв С, В, Е, Т, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ВВВВВB<p class=\"left_margin\">2.&#8239;&#8239;ВВВВВЕ<p class=\"left_margin\">3.&#8239;&#8239;ВВВВВС<p class=\"left_margin\">4.&#8239;&#8239;ВВВВВТ<p class=\"left_margin\">5.&#8239;&#8239;ВВВВЕВ<p class=\"left_margin\">Под каким номером стоит первое из слов, которое начинается с буквы Т?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"В\", 1: \"Е\", 2: \"С\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    for l in range(0, len(a)):\n                        k += 1\n                        if a[i] == \'Т\':\n                            print(k)  # Возьмём первое число, которое выдаст программа\n                            break\n</code>', 7, 0, 0, 0, 0, 1670866382456, 'PYTHON', '', '3073', 'Антон Сибгатулин'),
(157, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Виктор составляет 4-буквенные коды из букв В, И, К, Т, О, Р. Каждую букву можно использовать не более одного раза, при этом нельзя ставить рядом две гласные и две согласные. Сколько различных кодов может составить Виктор?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ВИКТОР\"\nvol = \"ИО\"\ncon = \"ВКТР\"\nar = itertools.permutations(alphabet, 4) #Размещение\narl = []\nfor e in ar:\n    arl.append(list(e))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)-1):\n        if (e[i] in vol and e[i+1] in vol) or (e[i] in con and e[i+1] in con):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866382685, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(158, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв Б, О, Р, записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;БББББ<p class=\"left_margin\">2.&#8239;&#8239;ББББО<p class=\"left_margin\">3.&#8239;&#8239;ББББР<p class=\"left_margin\">4.&#8239;&#8239;БББОБ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 240.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Б\", 1: \"О\", 2: \"Р\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 240:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866382821, 'PYTHON', '', 'РРРОР', 'Антон Сибгатулин'),
(159, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько слов длины 5, начинающихся с согласной буквы и заканчивающихся гласной буквой, можно составить из букв З, И, М, А? Каждая буква может входить в слово несколько раз. Слова не обязательно должны быть осмысленными словами русского языка.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ЗИМА\"\ncon = \"ЗМ\"\nvol = \"ИА\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in con and e[-1] in vol:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866382970, 'PYTHON', '', '256', 'Антон Сибгатулин'),
(160, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААУ<p class=\"left_margin\">5.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">Укажите номер первого слова, которое начинается с буквы У.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Р\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if a[i] == \"У\":\n                        print(k) # Возьмем первое число, которое выведет программа\n                        break\n</code>', 7, 0, 0, 0, 0, 1670866383159, 'PYTHON', '', '769', 'Антон Сибгатулин'),
(161, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Руслан составляет 5-буквенные коды из букв Р, У, С, Л, А, Н. Каждая допустимая гласная буква может входить в код не более одного раза. Сколько кодов может составить Руслан?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"РУСЛАН\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"У\") <= 1 and e.count(\"А\") <= 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866383388, 'PYTHON', '', '4864', 'Антон Сибгатулин'),
(162, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Игорь использует 4-буквенные слова, в которых есть только буквы A, B, C, D, X, причём буква X появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Игорь?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCDX\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'X\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866383568, 'PYTHON', '', '256', 'Антон Сибгатулин'),
(163, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв В, Л, Т, У, записаны  в алфавитном порядке и пронумерованы. <p class=\"left_margin\">Вот начало списка: <p class=\"left_margin\">1.&#8239;&#8239;ВВВВ <p class=\"left_margin\">2.&#8239;&#8239;ВВВЛ <p class=\"left_margin\">3.&#8239;&#8239;ВВВТ <p class=\"left_margin\">4.&#8239;&#8239;ВВВУ <p class=\"left_margin\">…… <p class=\"left_margin\">Запишите слово, которое стоит под номером 98.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"В\", 1: \"Л\", 2: \"Т\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 98:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866383741, 'PYTHON', '', 'ЛТВЛ', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(164, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алексей составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Алексей использует 5-буквенные слова, в которых есть только буквы A, B, C, X, причём буква X может появиться только на последнем месте или не появиться вовсе. Сколько различных кодовых слов может использовать Алексей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCX\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if (e[-1] == \'X\' or e[-1] != \'X\') and e[0] != \'X\' and e[1] != \'X\' and e[2] != \'X\' and e[3] != \'X\':\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866383881, 'PYTHON', '', '324', 'Антон Сибгатулин'),
(165, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв Н, Р, Т, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;НННН<p class=\"left_margin\">2.&#8239;&#8239;НННР<p class=\"left_margin\">3.&#8239;&#8239;НННТ<p class=\"left_margin\">4.&#8239;&#8239;НННУ<p class=\"left_margin\">5.&#8239;&#8239;ННРН<p class=\"left_margin\">Запишите слово, которое стоит на 215-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Н\", 1: \"Р\", 2: \"Т\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 215:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866384062, 'PYTHON', '', 'УРРТ', 'Антон Сибгатулин'),
(166, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Рассматриваются символьные последовательности длины 5&#8239; в шестибуквенном алфавите {У, Ч, Е, Н, И, К}. Сколько существует таких последовательностей, которые начинаются с буквы У и заканчиваются буквой К?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"УЧЕНИК\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] == \'У\' and e[-1] == \'К\':\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866384213, 'PYTHON', '', '216', 'Антон Сибгатулин'),
(167, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 6-буквенные слова, составленные из букв Б, К, Ф, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ББББББ<p class=\"left_margin\">2.&#8239;&#8239;БББББК<p class=\"left_margin\">3.&#8239;&#8239;БББББФ<p class=\"left_margin\">4.&#8239;&#8239;ББББКБ<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 342-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Б\", 1: \"К\", 2: \"Ф\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    for l in range(0, len(a)):\n                        k += 1\n                        if k == 342:\n                            print(a[i], a[j], a[g], a[m], a[n], a[l], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866384374, 'PYTHON', '', 'ККБКФФ', 'Антон Сибгатулин'),
(168, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, в составе которых могут быть только буквы А, В, Т, О, Р, записаны в алфавитном порядке и пронумерованы, начиная с 1. Ниже приведено начало списка:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААВ<p class=\"left_margin\">3.&#8239;&#8239;АААО<p class=\"left_margin\">4.&#8239;&#8239;АААР<p class=\"left_margin\">5.&#8239;&#8239;АААТ<p class=\"left_margin\">6.&#8239;&#8239;ААВА<p class=\"left_margin\">Под каким номером в списке идёт слово ТАРА?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"В\", 2: \"О\", 3: \"Р\", 4: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if i == 4 and j == 0 and g == 3 and m == 0:\n                    print(k)\n</code>', 7, 0, 0, 0, 0, 1670866384552, 'PYTHON', '', '516', 'Антон Сибгатулин'),
(169, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Михаил составляет 6-буквенные коды. В кодах разрешается использовать только буквы А, Б, В, Г, при этом код не может начинаться с гласной и не может содержать двух одинаковых букв подряд. Сколько различных кодов может составить Михаил?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"АБВГ\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if e[0] == \'А\' or e[i] == e[i + 1]:\n            flag = False\n    if flag == True: count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866384694, 'PYTHON', '', '729', 'Антон Сибгатулин'),
(170, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв В, И, Н, Т, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ВВВВВ<p class=\"left_margin\">2.&#8239;&#8239;ВВВВИ<p class=\"left_margin\">3.&#8239;&#8239;ВВВВН<p class=\"left_margin\">4.&#8239;&#8239;ВВВВТ<p class=\"left_margin\">5.&#8239;&#8239;ВВВИВ<p>……<p class=\"left_margin\">Запишите слово, которое стоит под номером 1019.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"В\", 1: \"И\", 2: \"Н\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 1019:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866384858, 'PYTHON', '', 'ТТТНН', 'Антон Сибгатулин'),
(171, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Полина составляет 6-буквенные коды из букв П, О, Л, И, Н, А. Каждую букву нужно использовать ровно 1 раз, при этом нельзя ставить подряд две гласные или две согласные. Сколько различных кодов может составить Полина?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ПОЛИНА\"\ncon = \"ПЛН\"\nvol = \"ОИА\"\nar = itertools.permutations(alphabet) #Перестановка\narl = []\nfor e in ar:\n    arl.append(list(e))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)-1):\n        if (e[i] in con and e[i+1] in con) or (e[i+1] in vol and e[i] in vol):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866385042, 'PYTHON', '', '72', 'Антон Сибгатулин'),
(172, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Михаил составляет 5-буквенные коды. В кодах разрешается использовать только буквы А, Б, В, Г, Д, при этом код не может начинаться с гласной и не может содержать двух одинаковых букв подряд. Сколько различных кодов может составить Михаил?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools \nalphabet = \"АБВГД\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if e[0] == \'А\' or e[i] == e[i + 1]:\n            flag = False\n    if flag == True: count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866385178, 'PYTHON', '', '1024', 'Антон Сибгатулин'),
(173, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Укажите номер слова УАУАУ.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if i == 2 and j == 0 and g == 2 and m == 0 and n == 2:\n                        print(k)\n</code>', 7, 0, 0, 0, 0, 1670866385332, 'PYTHON', '', '183', 'Антон Сибгатулин'),
(174, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Игорь использует 5-буквенные слова, в которых есть только буквы П, И, Р, причём буква П появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Игорь?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ПИР\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'П\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866385490, 'PYTHON', '', '80', 'Антон Сибгатулин'),
(175, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, составленные из букв Р, Е, К, А, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААЕ<p class=\"left_margin\">3.&#8239;&#8239;АААК<p class=\"left_margin\">4.&#8239;&#8239;АААР<p class=\"left_margin\">5.&#8239;&#8239;ААЕА<p class=\"left_margin\">...<p class=\"left_margin\">Под каким номером в списке идёт первое слово, в котором нет буквы А?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"Е\", 2: \"К\", 3: \"Р\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                s = a[i] + a[j] + a[g] + a[m]\n                k += 1\n                if s.count(\'А\') == 0:\n                    print(k)  # Возьмём первое число, которое выдаст программа\n                    break\n</code>', 7, 0, 0, 0, 0, 1670866385691, 'PYTHON', '', '86', 'Антон Сибгатулин'),
(176, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует шестизначных чисел, делящихся на 5, в которых каждая цифра может встречаться только один раз, при этом никакие две чётные и две нечётные цифры не стоят рядом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"0123456789\"\nar = itertools.permutations(alphabet, 6) #Размещение\narl = []\nfor e in ar:\n    arl.append(list(e))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)-1):\n        if (e[0] == \"0\") or (int(e[i]) % 2 == 0 and int(e[i+1]) % 2 == 0) or (int(e[i]) % 2 != 0 and int(e[i+1]) % 2 != 0) or (e[5] != \"5\" and e[5] != \"0\"):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866385828, 'PYTHON', '', '1296', 'Антон Сибгатулин'),
(177, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вероника составляет 3-буквенные коды из букв В, Е, Р, О, Н, И, К, А, причём буква В должна входить в код ровно один раз. Все полученные коды Вероника записала в алфавитном порядке и пронумеровала. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;ААВ<p class=\"left_margin\">2.&#8239;&#8239;АВА<p class=\"left_margin\">3.&#8239;&#8239;АВЕ<p class=\"left_margin\">…<p class=\"left_margin\">На каком месте будет записан первый код, не содержащий ни одной буквы А?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"В\", 2: \"Е\", 3: \"И\", 4: \"К\", 5: \"Н\", 6: \"О\", 7: \"Р\"} \nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            s = a[i] + a[j] + a[g]\n            if s.count(\'В\') == 1:\n                k += 1\n                if s.count(\'А\') == 0:\n                    print(k)  # Возьмём первое число, которое выдаст программа\n                    break\n</code>', 7, 0, 0, 0, 0, 1670866386050, 'PYTHON', '', '23', 'Антон Сибгатулин'),
(178, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алексей составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Алексей использует 5-буквенные слова, в которых есть только буквы A, B, C, X, причём буква X может появиться на первом месте или не появиться вовсе. Сколько различных кодовых слов может использовать Алексей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ABCX\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if (e[0] == \'X\' or e[0] != \'X\') and e[1] != \'X\' and e[2] != \'X\' and e[3] != \'X\' and e[4] != \'X\':\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866386223, 'PYTHON', '', '324', 'Антон Сибгатулин'),
(179, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААО<p class=\"left_margin\">3.&#8239;&#8239;ААААУ<p class=\"left_margin\">4.&#8239;&#8239;АААОА<p>……<p class=\"left_margin\">Сколько букв А встречается в слове, стоящем на 101-м месте от начала<p>списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"О\", 2: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 101:\n                        s = a[i] + a[j] + a[g] + a[m] + a[n]\n                        print(s.count(\"А\"))\n</code>', 7, 0, 0, 0, 0, 1670866386410, 'PYTHON', '', '2', 'Антон Сибгатулин'),
(180, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Игорь составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Игорь использует 5-буквенные слова, в которых есть только буквы A, B, C, X, причём буква X появляется ровно 1 раз. Каждая из других допустимых букв может встречаться в кодовом слове любое количество раз или не встречаться совсем. Сколько различных кодовых слов может использовать Игорь?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools \nalphabet = \"ABCX\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'X\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866386588, 'PYTHON', '', '405', 'Антон Сибгатулин'),
(181, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААУ<p class=\"left_margin\">5.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 450-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Р\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 450:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866386781, 'PYTHON', '', 'КУААК', 'Антон Сибгатулин'),
(182, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв К, Л, Р, Т, записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;КККК<p class=\"left_margin\">2.&#8239;&#8239;КККЛ<p class=\"left_margin\">3.&#8239;&#8239;КККР<p class=\"left_margin\">4.&#8239;&#8239;КККТ<p class=\"left_margin\">……<p class=\"left_margin\">Запишите слово, которое стоит под номером 67.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"К\", 1: \"Л\", 2: \"Р\", 3: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                    k += 1\n                    if k == 67:\n                        print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866386950, 'PYTHON', '', 'ЛККР', 'Антон Сибгатулин'),
(183, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 4-буквенные слова, в которых могут быть только буквы Ж, И, Р, А, Ф, причём буква Р используется в каждом слове ровно 1 раз. Каждая из других допустимых букв может встречаться в слове любое количество раз или не встречаться совсем. Словом считается любая допустимая последовательность букв, не обязательно осмысленная. Сколько существует таких слов, которые может написать Вася?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ЖИРАФ\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'Ф\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866387118, 'PYTHON', '', '256', 'Антон Сибгатулин'),
(184, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько слов длины 4, начинающихся с согласной буквы, можно составить из букв Л, Е, Т, О? Каждая буква может входить в слово несколько раз. Слова не обязательно должны быть осмысленными словами русского языка.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ЛЕТО\"\ncon = \'ЛТ\'\nar = itertools.product(alphabet, repeat=4) #Размещение с повторениями\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in con:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866387534, 'PYTHON', '', '128', 'Антон Сибгатулин'),
(185, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААК<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААУ<p class=\"left_margin\">5.&#8239;&#8239;АААКА<p>……<p class=\"left_margin\">Укажите номер слова УКАРА.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"К\", 2: \"Р\", 3: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if i == 3 and j == 1 and g == 0 and m == 2 and n == 0:\n                        print(k)\n</code>', 7, 0, 0, 0, 0, 1670866387771, 'PYTHON', '', '841', 'Антон Сибгатулин'),
(186, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв Д, Е, К, О, Р, записаны в алфавитном порядке и пронумерованы, начиная с 1. Ниже приведено начало списка. <p class=\"left_margin\">1.&#8239;&#8239; ДДДД <p class=\"left_margin\">2.&#8239;&#8239; ДДДЕ <p class=\"left_margin\">3.&#8239;&#8239; ДДДК <p class=\"left_margin\">4.&#8239;&#8239; ДДДО <p class=\"left_margin\">5.&#8239;&#8239; ДДДР <p class=\"left_margin\">6.&#8239;&#8239; ДДЕД <p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;… <p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с буквы K?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"Д\", 1: \"Е\", 2: \"К\", 3: \"О\", 4: \"Р\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'К\':\n                    print(k)  # Возьмём первое число, которое выдаст программа\n                    break\n</code>', 7, 0, 0, 0, 0, 1670866387965, 'PYTHON', '', '251', 'Антон Сибгатулин'),
(187, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Света составляет 5-буквенные коды из букв С, В, Е, Т, А. Буквы в коде могут повторяться, использовать все буквы не обязательно, но букву С нужно использовать хотя бы один раз. Сколько различных кодов может составить Света?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"СВЕТА\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"С\") >= 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866388154, 'PYTHON', '', '2101', 'Антон Сибгатулин'),
(188, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Петя составляет 6-буквенные коды из букв П, Е, Т, Я. Каждую букву можно использовать любое количество раз или совсем не использовать, при этом нельзя ставить подряд две гласные или две согласные. Сколько различных кодов может составить Петя?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ПЕТЯ\"\nvol = \"ЕЯ\"\ncon = \"ПТ\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e) - 1):\n        if (e[i] in vol and e[i + 1] in vol) or (e[i] in con and e[i + 1] in con):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866388326, 'PYTHON', '', '128', 'Антон Сибгатулин'),
(189, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв М, С, Т, Ф, записаны<p>в алфавитном порядке.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ММММ<p class=\"left_margin\">2.&#8239;&#8239;МММС<p class=\"left_margin\">3.&#8239;&#8239;МММТ<p class=\"left_margin\">4.&#8239;&#8239;МММФ<p class=\"left_margin\">5.&#8239;&#8239;ММСМ<p>……<p class=\"left_margin\">Запишите слово, которое стоит на <b>138-м</b> месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"М\", 1: \"С\", 2: \"Т\", 3: \"Ф\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if k == 138:\n                    print(a[i], a[j], a[g], a[m], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866388504, 'PYTHON', '', 'ТМТС', 'Антон Сибгатулин'),
(190, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Иван составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Иван использует все пятибуквенные слова в алфавите {A, B, C, D, E}, удовлетворяющие такому условию: кодовое слово не может начинаться с буквы E и заканчиваться буквой A. Сколько различных кодовых слов может использовать Иван?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ABCDE\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] != \'E\' and e[-1] != \'A\':\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866388723, 'PYTHON', '', '2000', 'Антон Сибгатулин'),
(191, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 4-буквенные слова, составленные из букв А, И, О, У, Э, записаны в алфавитном порядке и пронумерованы.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААИ<p class=\"left_margin\">3.&#8239;&#8239;АААО<p class=\"left_margin\">4.&#8239;&#8239;АААУ<p class=\"left_margin\">...<p class=\"left_margin\">Под каким номером стоит ИААЭ?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"И\", 2: \"О\", 3: \"У\", 4: \"Э\"} \nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'И\' and a[j] == \'А\' and a[g] == \'А\' and a[m] == \'Э\':\n                    print(k)  \n</code>', 7, 0, 0, 0, 0, 1670866388915, 'PYTHON', '', '130', 'Антон Сибгатулин'),
(192, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв А, Н, П, записаны в алфавитном порядке.<p class=\"left_margin\">Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААН<p class=\"left_margin\">3.&#8239;&#8239;ААААП<p class=\"left_margin\">4.&#8239;&#8239;АААНА<p class=\"left_margin\">5.&#8239;&#8239;АААНН<p>……<p class=\"left_margin\">Запишите слово, которое стоит на <b>201-м</b> месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"Н\", 2: \"П\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 201:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866389084, 'PYTHON', '', 'ПННАП', 'Антон Сибгатулин'),
(193, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Ольга составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Ольга использует 4-буквенные слова, в которых есть только буквы A, B, C, D, X, Y, Z. При этом первая буква кодового слова&#8239;&#8239;— это буква X, Y или Z, а далее в кодовом слове буквы X, Y и Z не встречаются. Сколько различных кодовых слов может использовать Ольга?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools \nalphabet = \"ABCDXYZ\"\ns = \'XYZ\'\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in s and e[1] not in s and e[2] not in s and e[3] not in s:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866389252, 'PYTHON', '', '192', 'Антон Сибгатулин'),
(194, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько слов длины 6, начинающихся с согласной буквы, можно составить из букв Г, О, Д? Каждая буква может входить в слово несколько раз. Слова не обязательно должны быть осмысленными словами русского языка.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ГОД\"\ncon = \"ГД\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in con:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866389410, 'PYTHON', '', '486', 'Антон Сибгатулин'),
(195, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все пятибуквенные слова, в составе которых могут быть только буквы Б, А, Т, Ы, Р, записаны в алфавитном порядке и пронумерованы начиная с 1.<p class=\"left_margin\">Ниже приведено начало списка.<p class=\"left_margin\">1.&#8239;&#8239;ААААА<p class=\"left_margin\">2.&#8239;&#8239;ААААБ<p class=\"left_margin\">3.&#8239;&#8239;ААААР<p class=\"left_margin\">4.&#8239;&#8239;ААААТ<p class=\"left_margin\">5.&#8239;&#8239;ААААЫ<p class=\"left_margin\">6.&#8239;&#8239;АААБА<p class=\"left_margin\">…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое не содержит ни одной буквы Ы и не содержит букв А, стоящих рядом?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"Б\", 2: \"Р\", 3: \"Т\", 4: \"Ы\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    s = a[i] + a[j] + a[g] + a[m] + a[n]\n                    if s.count(\"Ы\") == 0 and s.count(\"АА\") == 0:\n                        print(k) # Возьмем первое число, которое выведет программа\n</code>', 7, 0, 0, 0, 0, 1670866389588, 'PYTHON', '', '131', 'Антон Сибгатулин'),
(196, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Андрей составляет 4-буквенные коды из букв А, Н, Д, Р, Е, Й. Каждую букву можно использовать любое количество раз, при этом код не может начинаться с буквы Й и должен содержать хотя бы одну гласную. Сколько различных кодов может составить Андрей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"АНДРЕЙ\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)):\n        if (e[0] == \"Й\") or (e.count(\"Е\") + e.count(\"А\") == 0):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866389730, 'PYTHON', '', '888', 'Антон Сибгатулин'),
(197, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв Б, К, Ф, Ц, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;БББББ<p class=\"left_margin\">2.&#8239;&#8239;ББББК<p class=\"left_margin\">3.&#8239;&#8239;ББББФ<p class=\"left_margin\">4.&#8239;&#8239;ББББЦ<p class=\"left_margin\">5.&#8239;&#8239;БББКБ<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 239-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"Б\", 1: \"К\", 2: \"Ф\", 3: \"Ц\"} \nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 239:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866389951, 'PYTHON', '', 'БЦФЦФ', 'Антон Сибгатулин'),
(198, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Света составляет 5-буквенные коды из букв С, В, Е, Т, А. Каждую букву нужно использовать ровно один раз, при этом нельзя ставить рядом две гласные. Сколько различных кодов может составить Света?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"СВЕТА\"\nvol = \"ЕА\"\nar = itertools.permutations(alphabet) #Перестановка\narl = []\nfor e in ar:\n    arl.append(list(e))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)-1):\n        if e[i] in vol and e[i+1] in vol:\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866390385, 'PYTHON', '', '72', 'Антон Сибгатулин'),
(199, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все 5-буквенные слова, составленные из букв Б, К, Ф, Ц, записаны в алфавитном порядке и пронумерованы. Вот начало списка:<p class=\"left_margin\">1.&#8239;&#8239;БББББ<p class=\"left_margin\">2.&#8239;&#8239;ББББК<p class=\"left_margin\">3.&#8239;&#8239;ББББФ<p class=\"left_margin\">4.&#8239;&#8239;ББББЦ<p class=\"left_margin\">5.&#8239;&#8239;БББКБ<p>……<p class=\"left_margin\">Запишите слово, которое стоит на 486-м месте от начала списка.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"Б\", 1: \"К\", 2: \"Ф\", 3: \"Ц\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                for n in range(0, len(a)):\n                    k += 1\n                    if k == 486:\n                        print(a[i], a[j], a[g], a[m], a[n], end=\" \")\n</code>', 7, 0, 0, 0, 0, 1670866390614, 'PYTHON', '', 'КЦФКК', 'Антон Сибгатулин'),
(200, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Ученица составляет 5-буквенные слова из букв ГЕПАРД. При этом в каждом слове ровно одна буква Г, слово не может начинаться на букву А и заканчиваться буквой Е. Какое количество слов может составить ученица?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfrom itertools import *\nc = 0\nfor w in product(\'ГЕПАРД\', repeat=5):\n&#8239;&#8239;&#8239;&#8239;if w.count(\'Г\')==1 and w[0]!=\'А\' and w[-1]!=\'Е\':\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;c += 1\nprint(c)\n </code>', 7, 0, 0, 0, 0, 1670866390742, 'PYTHON', '', '2200', 'Антон Сибгатулин'),
(201, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все трёхбуквенные слова, составленные из букв П, А, Р, У, С, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;ААА<p class=\"left_margin\">2.&#8239;&#8239;ААП<p class=\"left_margin\">3.&#8239;&#8239;ААР<p class=\"left_margin\">4.&#8239;&#8239;ААС<p class=\"left_margin\">5.&#8239;&#8239;ААУ<p class=\"left_margin\">6.&#8239;&#8239;АПА<p class=\"left_margin\">…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с буквы С?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"П\", 2: \"Р\", 3: \"С\", 4: \"У\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            k += 1\n            if a[i] == \'С\':\n                print(k)  # Возьмём первое число, которое выдаст программа\n                break\n</code>', 7, 0, 0, 0, 0, 1670866390909, 'PYTHON', '', '76', 'Антон Сибгатулин'),
(202, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Георгий составляет коды из букв своего имени. Код должен состоять из 7 букв, и каждая буква в нём должна встречаться столько же раз, сколько в имени Георгий. Кроме того, одинаковые буквы в коде не должны стоять рядом. Сколько кодов может составить Георгий?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ГЕОРГИЙ\"\nar = itertools.permutations(alphabet, 7) #Размещение\narl = []\nfor e in ar:\n    arl.append(list(e))\na = set()\nfor e in arl:\n    flag = True\n    s = \"\"\n    for i in range(len(e)-1):\n        s += e[i]\n        if e[i] == e[i + 1]:\n            flag = False\n    if flag:\n        a.add(s)\nprint(len(a))\n</code>', 7, 0, 0, 0, 0, 1670866391068, 'PYTHON', '', '1800', 'Антон Сибгатулин'),
(203, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все четырёхбуквенные слова, составленные из букв А, Л, Г, О, Р, И, Т, М, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;АААА<p class=\"left_margin\">2.&#8239;&#8239;АААГ<p class=\"left_margin\">3.&#8239;&#8239;АААИ<p class=\"left_margin\">4.&#8239;&#8239;АААЛ<p class=\"left_margin\">5.&#8239;&#8239;АААМ<p class=\"left_margin\">6.&#8239;&#8239;АААО<p class=\"left_margin\">7.&#8239;&#8239;АААР<p class=\"left_margin\">8.&#8239;&#8239;АААТ<p class=\"left_margin\">9.&#8239;&#8239;ААГА<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&nbsp…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с букв ГО?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"Г\", 2: \"И\", 3: \"Л\", 4: \"М\", 5: \"О\", 6: \"Р\", 7: \"Т\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            for m in range(0, len(a)):\n                k += 1\n                if a[i] == \'Г\' and a[j] == \'О\':\n                    print(k)  # Возьмём первое число, которое выдаст программа\n</code>', 7, 0, 0, 0, 0, 1670866391251, 'PYTHON', '', '833', 'Антон Сибгатулин'),
(204, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Андрей составляет 6-буквенные коды из букв А, Н, Д, Р, Е, Й. Буква А должна входить в код не менее одного раза, а буква Й&#8239;&#8239;— не более одного раза. Сколько различных кодов может составить Андрей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"АНДРЕЙ\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"А\") >= 1 and e.count(\"Й\") <= 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866391438, 'PYTHON', '', '24135', 'Антон Сибгатулин'),
(205, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Валерия составляет 3-буквенные коды из букв В, А, Л, Е, Р, И, Я, причём буква В должна входить в код ровно один раз. Все полученные коды Валерия записала в алфавитном порядке и пронумеровала. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;ААВ<p class=\"left_margin\">2.&#8239;&#8239;АВА<p class=\"left_margin\">3.&#8239;&#8239;АВЕ<p class=\"left_margin\">…<p class=\"left_margin\">На каком месте будет записан первый код, не содержащий ни одной буквы А?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \na = {0: \"А\", 1: \"В\", 2: \"Е\", 3: \"И\", 4: \"Л\", 5: \"Р\", 6: \"Я\"}\nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            s = a[i] + a[j] + a[g]\n            if s.count(\'В\') == 1:\n                k += 1\n                if s.count(\'А\') == 0:\n                    print(k)  # Возьмём первое число, которое выдаст программа\n                    break\n</code>', 7, 0, 0, 0, 0, 1670866391643, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(206, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Все трёхбуквенные слова, составленные из букв П, А, Р, У, С, записаны в алфавитном порядке и пронумерованы, начиная с 1. Начало списка выглядит так:<p class=\"left_margin\">1.&#8239;&#8239;ААА<p class=\"left_margin\">2.&#8239;&#8239;ААП<p class=\"left_margin\">3.&#8239;&#8239;ААР<p class=\"left_margin\">4.&#8239;&#8239;ААС<p class=\"left_margin\">5.&#8239;&#8239;ААУ<p class=\"left_margin\">6.&#8239;&#8239;АПА<p class=\"left_margin\">…<p class=\"left_margin\">Под каким номером в списке идёт первое слово, которое начинается с буквы Р?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\na = {0: \"А\", 1: \"П\", 2: \"Р\", 3: \"С\", 4: \"У\"} \nk = 0\nfor i in range(0, len(a)):\n    for j in range(0, len(a)):\n        for g in range(0, len(a)):\n            k += 1\n            if a[i] == \'Р\':\n                print(k)  # Возьмём первое число, которое выдаст программа\n                break\n</code>', 7, 0, 0, 0, 0, 1670866391793, 'PYTHON', '', '51', 'Антон Сибгатулин'),
(207, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Борис составляет 6-буквенные коды из букв Б, О, Р, И, С. Буквы Б и Р нужно обязательно использовать ровно по одному разу, букву С можно использовать один раз или не использовать совсем, буквы О и И можно использовать произвольное количество раз или не использовать совсем. Сколько различных кодов может составить Борис?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"БОРИС\"\nar = itertools.product(alphabet, repeat=6) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"Б\") == 1 and e.count(\"Р\") == 1 and e.count(\"С\") <= 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866392027, 'PYTHON', '', '1440', 'Антон Сибгатулин'),
(208, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Матвей составляет 5-буквенные коды из букв П, Р, А, В, О. Каждую букву можно использовать неограниченное количество раз, при этом в коде должна быть ровно одна буква П. Сколько различных кодов может составить Матвей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ПРАВО\"\nar = itertools.product(alphabet, repeat=5) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"П\") == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866392152, 'PYTHON', '', '1280', 'Антон Сибгатулин'),
(209, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Ольга составляет таблицу кодовых слов для передачи сообщений, каждому сообщению соответствует своё кодовое слово. В качестве кодовых слов Ольга использует 4-буквенные слова, в которых есть только буквы A, B, C, D, X, Y. При этом первая буква кодового слова&#8239;&#8239;— это буква X или Y, а далее в кодовом слове буквы X и Y не встречаются. Сколько различных кодовых слов может использовать Ольга?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"ABCDXY\"\ns = \'XY\'\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e[0] in s and e[1] not in s and e[2] not in s and e[3] not in s:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866392324, 'PYTHON', '', '128', 'Антон Сибгатулин'),
(210, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Вася составляет 4-буквенные слова, в которых есть только буквы Б, Р, О, Н, Х, И, причём буква Х используется в каждом слове, и только 1 раз. Каждая из других допустимых букв может встречаться в слове любое количество раз или не встречаться совсем. Словом считается любая допустимая последовательность букв, не обязательно осмысленная. Сколько существует таких слов, которые может написать Вася?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nimport itertools\nalphabet = \"БРОНХИ\"\nar = itertools.product(alphabet, repeat=4) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\'Х\') == 1:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866392699, 'PYTHON', '', '500', 'Антон Сибгатулин'),
(211, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Андрей составляет 7-буквенные коды из букв А, Н, Д, Р, Е, Й. Буквы А и Й должны встречаться в коде ровно по одному разу, при этом буква Й не может стоять на первом месте. Остальные допустимые буквы могут встречаться произвольное количество раз или не встречаться совсем. Сколько различных кодов может составить Андрей?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"АНДРЕЙ\"\nar = itertools.product(alphabet, repeat=7) #Размещение с повторением\narl = []\nfor i in ar:\n    arl.append(list(i))\ncount = 0\nfor e in arl:\n    if e.count(\"А\") == 1 and e.count(\"Й\") == 1 and e[0] != \"Й\":\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866393000, 'PYTHON', '', '36864', 'Антон Сибгатулин'),
(212, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Ольга составляет 5-буквенные коды из букв О, Л, Ь, Г, А. Каждую букву нужно использовать ровно 1 раз, при этом Ь нельзя ставить первым и нельзя ставить после гласной. Сколько различных кодов может составить Ольга?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport itertools\nalphabet = \"ОЛЬГА\"\nvol = \"ОА\"\nar = itertools.permutations(alphabet) #Перестановка\narl = []\nfor e in ar:\n    arl.append(list(e))\ncount = 0\nfor e in arl:\n    flag = True\n    for i in range(len(e)):\n        if (e[0] == \"Ь\") or (e[i] == \"Ь\" and e[i-1] in vol):\n            flag = False\n    if flag:\n        count += 1\nprint(count)\n</code>', 7, 0, 0, 0, 0, 1670866393312, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(213, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i> + <i>2y</i> < <i>A</i>) &or; (<i>y</i> > <i>x</i>) &or; (<i>x</i> > 20)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x + 2 * y < A) or (y > x) or (x > 20):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866721715, 'PYTHON', '', '61', 'Антон Сибгатулин'),
(214, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p class=\"left_margin\">(<i>x</i> & 105 = 0) → ((<i>x</i> & 58 ≠ 0) → (<i>x</i> & <i>А</i> ≠ 0))<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(127):\n    B = True\n    for x in range(127):\n        B = B and (((x & 105 != 0) or (x & 58 == 0) or (x & A != 0)))\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866722519, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(215, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(90, <i>A</i>) &and; (¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 15) → ¬ДЕЛ(<i>x</i>, 20)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(100, 0, -1): \n    k = 0\n    for x in range(1, 1000):\n        if (90 % a == 0) and ((x % a != 0) <= ((x % 15 == 0) <= (x % 20 != 0))):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866722741, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(216, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i>&#8239;·&#8239;<i>y</i> < <i>100</i>) &or; (<i>y</i> &ge; <i>A</i>) &or; (<i>x</i> > <i>A</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x * y < 100) or (y >= A) or (x > A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866722923, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(217, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p>x&77 ≠ 0 → (x&12 = 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(128):\n    B = True\n    for x in range(128):\n        if ((x&77==0) or (x&12!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866723155, 'PYTHON', '', '65', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(218, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ</b>(<i>n, m</i>) утверждение «натуральное число n делится без остатка на натуральное число&#8239;<i>m</i>». Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ</b>(<i>x, А</i>) → (¬<b>ДЕЛ</b>(<i>x</i>, 21) + <b>ДЕЛ</b>(<i>x</i>, 35))<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)? <p><i>Задание К.&#8239;Ю.&#8239;Полякова </i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(1, 100):\n    k = 0\n    for x in range(1, 1000):\n        if (x % a == 0) <= ((x % 21 != 0) + (x % 35 == 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866723458, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(219, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i>&<i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. Так, например, 12&6 = 1100<sub>2</sub>&0110<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наибольшего целого числа <i>А</i> формула<p class=\"left_margin\"><center><p><i>х&А</i><img src=\"https://ege.sdamgia.ru/formula/svg/67/6703c949ca1fcc038a55e128766be0b4.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\" не равно 0\" /> → (<i>x</i>&36 = 0 → <i>х</i>&6<img src=\"https://ege.sdamgia.ru/formula/svg/67/6703c949ca1fcc038a55e128766be0b4.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\" не равно 0\" />)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(63, 0, -1):\n        if ((x&A==0) or (x&36!=0) or (x&6!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866723852, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(220, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(3<i>x</i> + 4<i>y</i> &ne; 70) &or; (<i>A</i> > <i>x</i>) &or; (<i>A</i> > <i>y</i>)</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (3*x + 4*y != 70) or (a > x) or (a > y):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866724275, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(221, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через ДЕЛ(<i>n</i>, <i>m</i>) утверждение «натуральное число n делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>(ДЕЛ(<i>x</i>, 3)&#8239;→&#8239;&not;ДЕЛ(<i>x</i>, 5))&#8239;&or;&#8239;(<i>x</i>&#8239;+&#8239;<i>A</i>&#8239;≥&#8239;90)</b><p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1) при любом натуральном значении переменной <i>x</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(1, 101):\n    k = 0\n    for x in range(1, 1000):\n        if ((x % 3 == 0) <= (x % 5 != 0)) or (x + A >= 90):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866724465, 'PYTHON', '', '75', 'Антон Сибгатулин'),
(222, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, <nobr>14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.</nobr> <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула<p class=\"left_margin\"><center><p>x&17 = 0 → (x&29 ≠ 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&17!=0) or (x&29==0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866724645, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(223, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(<i>A</i>, 40) &and; (ДЕЛ(780, <i>x</i>) → (&not;ДЕЛ(<i>A</i>, <i>x</i>) → ¬ДЕЛ(180, <i>x</i>)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(1, 1001):\n    k = 0\n    for x in range(1, 1000):\n        if (A % 40 == 0) and ((780 % x == 0) <= ((A % x != 0) <= (180 % x != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866724788, 'PYTHON', '', '120', 'Антон Сибгатулин'),
(224, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">На числовой прямой задан отрезок <i>A</i>. Известно, что формула<center><p class=\"left_margin\">((<i>x</i> &in; <i>A</i>) → (<i>x<sup>2</sup></i> &le; 81)) &and; ((<i>y<sup>2</sup></i> &le; 36) → (<i>y</i> &in; <i>A</i>))</center><p class=\"left_margin\">тождественно истинна при любых вещественных <i>x</i> и <i>y</i>. Какую наибольшую длину может иметь отрезок <i>A</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x,a): \n    return ((x in a) <= (x**2 <= 81)) and ((x**2 <= 36) <= (x in a))\na = set([i for i in range(-1000,1000)])\nfor x in range(-1000, 1000):\n    if not f(x,a):\n        a.remove(x)\nprint(len(a) - 1)\n</code>', 5, 0, 0, 0, 0, 1670866725049, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(225, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>(<i>A</i> < 50) &and; (¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 10) → ¬ДЕЛ(<i>x</i>, 18)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (a < 50) and ((x % a != 0) <= ((x % 10 == 0) <= (x % 18 != 0))):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866725452, 'PYTHON', '', '45', 'Антон Сибгатулин'),
(226, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m & n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула<p class=\"left_margin\"><center><p>x&33 = 0 → (x&45≠0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&33!=0) or (x&45==0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866725698, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(227, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого числа А формула   <p class=\"left_margin\"><center><p class=\"left_margin\">((x ≤ 9)  →(x ⋅ x ≤ A)) ⋀ ((y ⋅ y ≤ A)  → (y ≤ 9))  <p class=\"left_margin\"></center><p>тождественно истинна, то есть принимает значение 1 при любых целых неотрицательных x и y?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(300, 1, -1): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x <= 9) <= (x * x <= a)) and ((y*y <= a) <= (y <= 9)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866726143, 'PYTHON', '', '99', 'Антон Сибгатулин'),
(228, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i> + <i>2y</i> < <i>A</i>) &or; (<i>y</i> > <i>x</i>) &or; (<i>x</i> > 30)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x + 2 * y < A) or (y > x) or (x > 30):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866726298, 'PYTHON', '', '91', 'Антон Сибгатулин'),
(229, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. Например, <nobr>14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.</nobr> Для какого наименьшего неотрицательного целого числа А формула<p class=\"left_margin\"><center><p>x&9 = 0 → (x&19 ≠ 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&9!=0) or (x&19==0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866726563, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(230, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 6) → ¬ДЕЛ(<i>x</i>, 9))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (x % a != 0) <= ((x % 6 == 0) <= (x % 9 != 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866726693, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(231, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(3<i>x</i> + 7<i>y</i> < <i>A</i>) &or; (<i>x</i> &ge; <i>y</i>) &or; (<i>y</i> > <i>6</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (3 * x + 7 * y < A) or (x >= y) or (y > 6):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866726867, 'PYTHON', '', '58', 'Антон Сибгатулин'),
(232, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через ДЕЛ(<i>n</i>, <i>m</i>) утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого <b>наименьшего</b> натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>(ДЕЛ(<i>x</i>, 2) → ¬ДЕЛ(x, 3))&#8239;&or;&#8239;(<i>x</i> + <i>A</i> ≥ 100)</b><p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1) при любом натуральном значении переменной <i>х</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(1, 101):\n    k = 0\n    for x in range(1, 1000):\n        if ((x % 2 == 0) <= (x % 3 != 0)) or (x + A >= 100):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866727104, 'PYTHON', '', '94', 'Антон Сибгатулин'),
(233, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 29 ≠ 0 → (<i>x</i> & 17 = 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nok=1<p class=\"left_margin\">A=set()\nfor a in range (1, 65):\n&#8239;&#8239;&#8239;ok=1\n&#8239;&#8239;&#8239;for x in range (0, 65):\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;if ((x & 29 != 0) <= ((x & 17 == 0) <= (x & a != 0))) == 0:\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;ok=0\n&#8239;&#8239;&#8239;if ok:\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;A.add(a)\n&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;break\nprint(min(A))\n</code>', 5, 0, 0, 0, 0, 1670866727532, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(234, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>xy</i> < <i>A</i>) &or; (<i>y</i> > <i>x</i>) &or; (<i>x</i> &ge; 8)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(11):\n        for y in range(11):\n            if (x * y < A) or (y > x) or (x >= 8):\n                k += 1\n    if k == 121:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866727723, 'PYTHON', '', '50', 'Антон Сибгатулин'),
(235, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(120, <i>A</i>) &and; (¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 18) → ¬ДЕЛ(<i>x</i>, 24)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (120 % A == 0) and ((x % A != 0) <= ((x % 18 == 0) <= (x % 24 != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866728030, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(236, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i>&<i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4. <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа <i>А</i> формула<p class=\"left_margin\"><center><p><img src=\"https://ege.sdamgia.ru/formula/svg/a6/a6910ca2d38da35607da284dfaa4f4ab.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\" левая круглая скобка левая круглая скобка x\\28 не равно 0 правая круглая скобка \\vee левая круглая скобка x\\45 не равно 0 правая круглая скобка правая круглая скобка arrow левая круглая скобка левая круглая скобка x\\17=0 правая круглая скобка arrow левая круглая скобка x\\A не равно 0 правая круглая скобка правая круглая скобка \" /><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&28==0) and (x&45==0) or (x&17!=0) or (x&A!=0))==0:\n            B=False \n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866728402, 'PYTHON', '', '44', 'Антон Сибгатулин'),
(237, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">На числовой прямой задан отрезок <i>A</i>. Известно, что формула<p class=\"left_margin\"><center><p class=\"left_margin\">((<i>x</i> &in; <i>A</i>) → (<i>x<sup>2</sup></i> &le; 100)) &and; ((<i>x<sup>2</sup></i> &le; 64) → (<i>x</i> &in; <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинна при любом вещественном <i>x</i>. Какую наибольшую длину может иметь отрезок <i>A</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x,a): \n    return ((x in a) <= (x**2 <= 100)) and ((x**2 <= 64) <= (x in a))\na = set([i for i in range(-1000,1000)])\nfor x in range(-1000, 1000):\n    if not f(x,a):\n        a.remove(x)\nprint(len(a) - 1)\n</code>', 5, 0, 0, 0, 0, 1670866728814, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(238, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.  <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p>x&25 ≠ 0 → (x&19 = 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p> тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&25==0) or (x&19!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866729197, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(239, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(<i>A</i>, 45) &and; (ДЕЛ(750, <i>x</i>) → (&not;ДЕЛ(<i>A</i>, <i>x</i>) → ¬ДЕЛ(120, <i>x</i>)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(1, 101):\n    k = 0\n    for x in range(1, 1000):\n        if (A % 45 == 0) and ((750 % x == 0) <= ((A % x != 0) <= (120 % x != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866729321, 'PYTHON', '', '90', 'Антон Сибгатулин'),
(240, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(3<i>m</i> + 4<i>n</i> > 63) &or; ((<i>m</i> ≤ <i>A</i>) &and; (<i>n</i> < <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинно при любых целых неотрицательных <i>m</i> и <i>n</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for m in range(0, 300):\n        for n in range(0, 300):\n            if (3*m + 4*n > 63) or ((m <= a) and (n < a)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866729544, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(241, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 29 ≠ 0 → (<i>x</i> & 12 = 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной <i>х</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&29==0) or (x&12!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A) \n        break\n</code>', 5, 0, 0, 0, 0, 1670866729810, 'PYTHON', '', '17', 'Антон Сибгатулин'),
(242, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i>&#8239;·&#8239;<i>y</i> < <i>120</i>) &or; (<i>y</i> > <i>A</i>) &or; (<i>x</i> > <i>A</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x * y < 120) or (y > A) or (x > A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866729992, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(243, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>(<i>A</i> < 50) &and; (¬ДЕЛ(<i>x</i>, <i>А</i>) → (ДЕЛ(<i>x</i>, 10) → ¬ДЕЛ(<i>x</i>, 12)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (a < 50) and ((x % a != 0) <= ((x % 10 == 0) <= (x % 12 != 0))):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866730135, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(244, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.  <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p>x&25 ≠ 0 → (x&9 = 0 → x&А ≠ 0) <p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(32):\n    B = True\n    for x in range(32):\n        if ((x&25==0) or (x&9!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866730402, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(245, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует целых значений числа <i>A</i>, при которых формула<p class=\"left_margin\"><center><p class=\"left_margin\">((<i>x</i> < <i>A</i>) → (<i>x<sup>2</sup></i> < 100)) &and; ((<i>y<sup>2</sup></i> &le; 64) → (<i>y</i> &le; <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинна при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor a in range(1, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x < a) <= (x**2 < 100)) and ((y**2 <= 64) <= (y <= a)):\n                k += 1\n    if k == 90_000:\n        count += 1\nprint(count)\n</code>', 5, 0, 0, 0, 0, 1670866730590, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(246, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(70, <i>A</i>) &and; (ДЕЛ(<i>x</i>, 28) → (&not;ДЕЛ(<i>x</i>, <i>А</i>) → ¬ДЕЛ(<i>x</i>, 21)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (70 % A == 0) and ((x % 28 == 0) <= ((x % A != 0) <= (x % 21 != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866730730, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(247, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p>x&49 ≠ 0 → (x&41 = 0 → x&А ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&49==0) or (x&41!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866731012, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(248, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<center><p class=\"left_margin\">(<i>y</i> + <i>2x</i> &ne; 48) &or; (<i>A</i> < <i>x</i>) &or; (<i>x</i> < <i>y</i>)</center><p class=\"left_margin\">тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(300, 0, -1): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (y + 2*x != 48) or (a < x) or (x < y):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866731378, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(249, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ(<i>n</i>, <i>m</i>)</b> утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ(120, <i>A</i>) &and; (ДЕЛ(<i>x</i>, 36) → (&not;ДЕЛ(<i>x</i>, <i>А</i>) → ¬ДЕЛ(<i>x</i>, 45)))</b><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (120 % A == 0) and ((x % 36 == 0) <= ((x % A != 0) <= (x % 45 != 0))):\n            k += 1\n    if k == 999:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866731511, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(250, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i>&<i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 12&6 = 1100<sub>2</sub>&0110<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наибольшего целого числа <i>А</i> формула<p class=\"left_margin\"><center><p><i>х&А</i><img src=\"https://ege.sdamgia.ru/formula/svg/67/6703c949ca1fcc038a55e128766be0b4.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\" не равно 0\" /> → (<i>x</i>&10 = 0 → <i>х</i>&3<img src=\"https://ege.sdamgia.ru/formula/svg/67/6703c949ca1fcc038a55e128766be0b4.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\" не равно 0\" />)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(16):\n    B = True\n    for x in range(16):\n        if ((x&(15-A)==0) or (x&10!=0) or (x&3!=0))==0:\n            B=False\n    if B:\n        print(15-A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866731788, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(251, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>y</i> + 2<i>x</i> < <i>A</i>) &or; (<i>x</i> > 15) &or; (<i>y</i> > 30)</center><p>тождественно истинно при всех вещественных значениях <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (y + 2*x < a) or (x > 15) or (y > 30):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866732026, 'PYTHON', '', '61', 'Антон Сибгатулин'),
(252, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 85 = 0 → (<i>x</i> & 54 ≠ 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(128):\n    B = True\n    for x in range(128):\n        if (x & 85 != 0 or (x & 54 == 0 or x & A != 0)) == 0:\n            B=False \n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866732145, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(253, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ</b>(<i>n, m</i>) утверждение «натуральное число <i>n</i> делится без остатка на натуральное число&#8239;<i>m</i>». Для какого наименьшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p><b>ДЕЛ</b>(<i>x, А</i>) → (<b>ДЕЛ</b>(<i>x</i>, 21) + <b>ДЕЛ</b>(<i>x</i>, 35))<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)? <p><i>(М.&#8239;В.&#8239;Кузнецова)</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(1, 100): \n    k = 0\n    for x in range(1, 1000):\n        if (x % a == 0) <= ((x % 21 == 0) + (x % 35 == 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866732462, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(254, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> < <i>A</i>) &or; (<i>x</i> > <i>y</i>) &or; (<i>y</i> > <i>24</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (2 * x + 3 * y < A) or (x > y) or (y > 24):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866732611, 'PYTHON', '', '121', 'Антон Сибгатулин'),
(255, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел m и n. <p class=\"left_margin\">Например, 14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4. <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула (x&41 ≠ 0) → ((x&33 = 0) → (x&А ≠ 0))<p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной х)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&41==0) or (x&33!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866732760, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(256, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа А выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(y + 2x < A) &or; (x > 30) &or; (y > 20)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных x и y?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(0, 300): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (y + 2 * x < a) or (x > 30) or (y > 20):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866732995, 'PYTHON', '', '81', 'Антон Сибгатулин'),
(257, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i>&<i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4. <p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа <i>А</i> формула<p class=\"left_margin\"><center><p><img src=\"https://ege.sdamgia.ru/formula/svg/15/1547e7fa390a6794409c561c69fb91d2.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\" левая круглая скобка левая круглая скобка x\\28 не равно 0 правая круглая скобка \\vee левая круглая скобка x\\45 не равно 0 правая круглая скобка правая круглая скобка arrow левая круглая скобка левая круглая скобка x\\48=0 правая круглая скобка arrow левая круглая скобка x\\A не равно 0 правая круглая скобка правая круглая скобка \" /><p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&28==0) and (x&45==0) or (x&48!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866733277, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(258, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ</b>(<i>n, m</i>) утверждение «натуральное число n делится без остатка на натуральное число&#8239;<i>m</i>». Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p>¬<b>ДЕЛ</b>(<i>x, А</i>) → (¬<b>ДЕЛ</b>(<i>x</i>, 21) &and;¬ <b>ДЕЛ</b>(<i>x</i>, 35))<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)? <p> <i>(Задание М.&#8239;В.&#8239;Кузнецовой) </i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (x % a != 0) <= ((x % 21 != 0) and (x % 35 != 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866734602, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(259, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 49 = 0 → (<i>x</i> & 28 ≠ 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(128):\n    B = True \n    for x in range(128):\n        if (x & 49 != 0 or (x & 28 == 0 or x & A != 0)) == 0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866734793, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(260, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(3<i>m</i> + 4<i>n</i> > 66) &or; (<i>m</i> ≤ <i>A</i>) &or; (<i>n</i> < <i>A</i>)<p class=\"left_margin\"></center><p>тождественно истинно при любых целых неотрицательных <i>m</i> и <i>n</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for n in range(300):\n        for m in range(300):\n            if (3 * m + 4 * n > 66) or (m <= A) or (n < A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866734928, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(261, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> &ne; 60) &or; (<i>A</i> &ge; <i>x</i>) &or; (<i>A</i> &ge; <i>y</i>)</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(0, 300): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (2*x + 3*y != 60) or (a >= x) or (a >= y):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866735175, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(262, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m&n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. Так, например, 14&5 = 1110<sub>2</sub>&0101<sub>2</sub> = 0100<sub>2</sub> = 4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа <i> А</i> формула<p class=\"left_margin\"><center><i>x&25 ≠ 0 → (x&17 = 0 → x&А ≠ 0)</i></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом <i></i>неотрицательном целом значении переменной <i>х</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor A in range(32):\n    B = True \n    for x in range(32):\n        if ((x&25==0) or (x&17!=0) or (x&A!=0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866735466, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(263, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <b>ДЕЛ</b>(<i>n, m</i>) утверждение «натуральное число <i>n</i> делится без остатка на натуральное число <i>m</i>».<p class=\"left_margin\">Для какого наибольшего натурального числа <i>А</i> формула<p class=\"left_margin\"><center><p>¬<b>ДЕЛ</b>(<i>x, А</i>) → (<b>ДЕЛ</b>(<i>x</i>, 6) → ¬<b>ДЕЛ</b>(<i>x</i>, 4))<p class=\"left_margin\"></center><p>тождественно истинна (то есть принимает значение 1 при любом натуральном значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(100, 0, -1):\n    k = 0\n    for x in range(1, 1000):\n        if (x % a != 0) <= ((x % 6 == 0) <= (x % 4 != 0)):\n            k += 1\n    if k == 999:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866735646, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(264, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> > 30) &or; (<i>x</i> + <i>y</i> &le; <i>A</i>)</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (2*x + 3*y > 30) or (x + y <= a):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866735904, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(265, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub>&#8239;=&#8239;0100<sub>2</sub>&#8239;=&#8239;4.<p class=\"left_margin\">Для какого наибольшего целого числа А формула <p class=\"left_margin\"><center><p><i>x</i>&51 = 0 &or; (<i>x</i>&41 = 0 → <i>x</i>&<i>А</i> = 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&51==0) or (x&41!=0) or (x&(63-A)==0))==0:\n            B=False\n    if B:\n        print(63-A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866736174, 'PYTHON', '', '41', 'Антон Сибгатулин'),
(266, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(4<i>x</i> + 3<i>y</i> < <i>A</i>) &or; (<i>x</i> > <i>y</i>) &or; (<i>y</i> > <i>13</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (4 * x + 3 * y < A) or (x > y) or (y > 13):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866736519, 'PYTHON', '', '92', 'Антон Сибгатулин'),
(267, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>m</i> & <i>n</i> поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14 & 5 = 1110<sub>2</sub> & 0101<sub>2</sub> = 0100<sub>2</sub> = 4. Для какого наименьшего неотрицательного целого числа <i>А</i> формула <p class=\"left_margin\"><center><p><i>x</i> & 73 = 0 → (<i>x</i> & 28 ≠ 0 → <i>x</i> & <i>А</i> ≠ 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(128):\n    B = True \n    for x in range(128):\n        if (x & 73 != 0 or (x & 28 == 0 or x & A != 0)) == 0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866736814, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(268, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через m&n поразрядную конъюнкцию неотрицательных целых чисел <i>m</i> и <i>n</i>. <p class=\"left_margin\">Так, например, 14&5&#8239;=&#8239;1110<sub>2</sub>&0101<sub>2</sub>&#8239;=&#8239;0100<sub>2</sub>&#8239;=&#8239;4.<p class=\"left_margin\">Для какого наименьшего неотрицательного целого числа А формула <p class=\"left_margin\"><center><p><i>x</i>&51 = 0 &or; (<i>x</i>&41 = 0 → <i>x</i>&<i>А</i> = 0)<p class=\"left_margin\"></center><p>тождественно истинна (т.&#8239;е. принимает значение 1 при любом неотрицательном целом значении переменной <i>x</i>)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(64):\n    B = True\n    for x in range(64):\n        if ((x&51==0) or (x&41!=0) or (x&A==0))==0:\n            B=False\n    if B:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866737011, 'PYTHON', '', '0', 'Антон Сибгатулин'),
(269, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(5<i>x</i> + 3<i>y</i> &ne; 60) &or; ((<i>A</i> > <i>x</i>) &and; (<i>A</i> > <i>y</i>))</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (5*x + 3*y != 60) or ((a > x) and (a > y)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866737166, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(270, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует целых значений числа <i>A</i>, при которых формула<p class=\"left_margin\"><center>((<i>x</i> < 6) → (<i>x</i><sup>2</sup> < <i>A</i>)) &and; ((<i>y</i><sup>2</sup> ≤ <i>A</i>) → (<i>y</i> ≤ 6))</center><p>тождественно истинна при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor a in range(1, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x < 6) <= (x**2 < a)) and ((y**2 <= a) <= (y <= 6)):\n                k += 1\n    if k == 90_000:\n        count += 1\nprint(count)\n</code>', 5, 0, 0, 0, 0, 1670866737442, 'PYTHON', '', '23', 'Антон Сибгатулин'),
(271, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(2<i>m</i> + 3<i>n</i> > 43) &or; (<i>m</i> < <i>A</i>) &or; (<i>n</i> ≤ <i>A</i>)<p class=\"left_margin\"></center><p>тождественно истинно при любых целых неотрицательных <i>m</i> и <i>n</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for n in range(300):\n        for m in range(300):\n            if (2 * m + 3 * n > 43) or (m < A) or (n <= A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866737889, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(272, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>x</i> > <i>A</i>) &or; (<i>y</i> > <i>x</i>) &or; (2<i>y</i> + <i>x</i> < 110)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x > A) or (y > x) or (2 * y + x < 110):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866738195, 'PYTHON', '', '36', 'Антон Сибгатулин'),
(273, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> < 30) &or; (<i>x</i> + <i>y</i> &ge; <i>A</i>)</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(300, 0, -1): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (2*x + 3*y < 30) or (x + y >= a):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866738497, 'PYTHON', '', '10', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(274, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i>&#8239;·&#8239;<i>y</i> < <i>121</i>) &or; (<i>y</i> > <i>A</i>) &or; (<i>x</i> &ge; <i>A</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x * y < 121) or (y > A) or (x >= A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866738960, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(275, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>x</i> * <i>y</i> < <i>A</i>) &or; (<i>x</i> < <i>y</i>) &or; (<i>x</i> &ge; 12)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x * y < A) or (x < y) or (x >= 12):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866739230, 'PYTHON', '', '122', 'Антон Сибгатулин'),
(276, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i>&#8239;·&#8239;<i>y</i> < <i>140</i>) &or; (<i>y</i> > <i>A</i>) &or; (<i>x</i> > <i>A</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(1, 301):\n        for y in range(1, 301):\n            if (x * y < 140) or (y > A) or (x > A):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866739523, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(277, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(4<i>x</i> + 3<i>y</i> < <i>A</i>) &or; (<i>x</i> &ge; <i>y</i>) &or; (<i>y</i> &ge; <i>13</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (4 * x + 3 * y < A) or (x >= y) or (y >= 13):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866739822, 'PYTHON', '', '81', 'Антон Сибгатулин'),
(278, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует целых значений числа <i>A</i>, при которых формула<p class=\"left_margin\"><center><p class=\"left_margin\">((<i>x</i> < <i>A</i>) → (<i>x<sup>2</sup></i> < 81)) &and; ((<i>y<sup>2</sup></i> &le; 36) → (<i>y</i> &le; <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинна при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor a in range(1, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x < a) <= (x**2 < 81)) and ((y**2 <= 36) <= (y <= a)):\n                k += 1\n    if k == 90_000:\n        count += 1\nprint(count)\n</code>', 5, 0, 0, 0, 0, 1670866740163, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(279, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(3<i>x</i> + 4<i>y</i> &ne; 60) &or; ((<i>A</i> &ge; <i>x</i>) &and; (<i>A</i> &ge; <i>y</i>))</center><p>тождественно истинно при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (3*x + 4*y != 60) or ((a >= x) and (a >= y)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866740407, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(280, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Сколько существует целых значений числа <i>A</i>, при которых формула<p class=\"left_margin\"><center>((<i>x</i> < 5) → (<i>x</i><sup>2</sup> < <i>A</i>)) &and; ((<i>y</i><sup>2</sup> ≤ <i>A</i>) → (<i>y</i> ≤ 5))</center><p>тождественно истинна при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor a in range(1, 300):\n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if ((x < 5) <= (x**2 < a)) and ((y**2 <= a) <= (y <= 5)):\n                k += 1\n    if k == 90_000:\n        count += 1\nprint(count)\n</code>', 5, 0, 0, 0, 0, 1670866740580, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(281, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого положительного числа <i>А</i> выражение<center><p class=\"left_margin\">(<i>x</i> + <i>3y</i> > <i>A</i>) &or; (<i>y</i> < 30) &or; (<i>x</i> < 30)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x + 3 * y > A) or (y < 30) or (x < 30):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866740707, 'PYTHON', '', '119', 'Антон Сибгатулин'),
(282, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<center><p class=\"left_margin\">(<i>y</i> + <i>2x</i> &ne; 48) &or; (<i>A</i> < <i>x</i>) &or; (<i>A</i> < <i>y</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor a in range(300, 0, -1): \n    k = 0\n    for x in range(0, 300):\n        for y in range(0, 300):\n            if (y + 2*x != 48) or (a < x) or (a < y):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866741316, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(283, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(<i>x</i> > <i>A</i>) &or; (<i>y</i> > <i>A</i>) &or; (2<i>y</i> + <i>x</i> < 110)<p class=\"left_margin\"></center><p>тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (x > A) or (y > A) or (2 * y + x < 110):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866741457, 'PYTHON', '', '36', 'Антон Сибгатулин'),
(284, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(3<i>x</i> + 5<i>y</i> < <i>A</i>) &or; (<i>x</i> &ge; <i>y</i>) &or; (<i>y</i> > <i>8</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (3 * x + 5 * y < A) or (x >= y) or (y > 8):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866741622, 'PYTHON', '', '62', 'Антон Сибгатулин'),
(285, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наибольшего целого неотрицательного числа <i>A</i> выражение<center><p class=\"left_margin\">(<i>2x</i> + <i>y</i> &ne; 70) &or; (<i>x</i> < <i>y</i>) &or; (<i>A</i> < <i>x</i>)</center><p class=\"left_margin\">тождественно истинно, то есть принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300, -1, -1):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (2 * x + y != 70) or (x < y) or (A < x):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866741825, 'PYTHON', '', '23', 'Антон Сибгатулин'),
(286, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>A</i> выражение<p class=\"left_margin\"><center><p class=\"left_margin\">(2<i>m</i> + 3<i>n</i> > 40) &or; ((<i>m</i> < <i>A</i>) &and; (<i>n</i> ≤ <i>A</i>))<p class=\"left_margin\"></center><p>тождественно истинно при любых целых неотрицательных <i>m</i> и <i>n</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \nfor a in range(0, 300):\n    k = 0\n    for m in range(0, 300):\n        for n in range(0, 300):\n            if (2*m + 3*n > 40) or ((m < a) and (n <= a)):\n                k += 1\n    if k == 90_000:\n        print(a)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866741962, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(287, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Для какого наименьшего целого неотрицательного числа <i>А</i> выражение<center><p class=\"left_margin\">(2<i>x</i> + 3<i>y</i> < <i>A</i>) &or; (<i>x</i> &ge; <i>y</i>) &or; (<i>y</i> > <i>24</i>)<p class=\"left_margin\"></center><p class=\"left_margin\">тождественно истинно, т.&#8239;е. принимает значение 1 при любых целых неотрицательных <i>x</i> и <i>y</i>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfor A in range(300):\n    k = 0\n    for x in range(300):\n        for y in range(300):\n            if (2 * x + 3 * y < A) or (x >= y) or (y > 24):\n                k += 1\n    if k == 90_000:\n        print(A)\n        break\n</code>', 5, 0, 0, 0, 0, 1670866742148, 'PYTHON', '', '119', 'Антон Сибгатулин'),
(288, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 9 Направо 90]</b><p class=\"left_margin\"><b>Повтори 3 [Вперёд 9 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 4 [Вперёд 9 Направо 90]</b> и находиться вне области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 3 [Вперёд 9 Направо 120]</b>. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor x in range(1, 9):\n    for y in range(1, 9):\n        if (y < x / 3 ** 0.5) or (y > -x / 3 ** 0.5 + 9):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866845507, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(289, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 6 [Направо 36 Вперёд 10 Направо 36]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport turtle as t  # Подключим модуль черепашка\nk = 20  # коэффициент для настраивания более удобного масштаба\nt.left(90)\nt.speed(10)\nfor i in range(10):  # пропишем алгоритм построения фигуры по условию\n    t.right(36)\n    t.forward(10 * k)\n    t.right(36)\nt.up()\nt.speed(10)  # Увеличим скорость черепашки\nfor x in range(16, -10, - 1):  # Алгоритм построения точек\n    for y in range(10, -10, - 1):\n        t.goto(x * k, y * k)\n        t.dot(3)  # точки размером 3 пикселя\nt.done()\n</code>', 6, 0, 0, 0, 0, 1670866845694, 'PYTHON', '', '175', 'Антон Сибгатулин'),
(290, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 5 [Вперёд 7 Направо 90 Вперёд 4 Направо 90]</b><p class=\"left_margin\">Определите количество точек с целочисленными координатами, лежащих внутри или на границе области, которую ограничивает заданная алгоритмом линия.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor x in range(8):\n    for y in range(5):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866845850, 'PYTHON', '', '40', 'Антон Сибгатулин'),
(291, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси абсцисс, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 8 Направо 150 Вперёд 8 Направо 30]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом.<i> Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 20):\n    for y in range(1, 10):\n        if (y < x / 3 ** 0.5) and (y > (x - 8) / 3 ** 0.5) and (y < 4):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866845991, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(292, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: Вперёд <i>n</i> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и Направо <i>m</i> (где <i>m</i>&#8239;&#8239;—  целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. <p class=\"left_margin\">Запись <b>Повтори <i>k</i> [Команда1 Команда2 … Команда<i>S</i>]</b> означает, что последовательность из <i>S</i> команд повторится <i>k</i> раз.<p class=\"left_margin\">Черепахе был дан для исполнения следующий алгоритм: <b>Повтори 7 [Вперёд 10 Направо 120].</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 10):\n    for y in range(1, 10):\n        if -x / 3 ** 0.5 + 10 > y > x / 3 ** 0.5:\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866846147, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(293, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 12 Направо 90]</b><p class=\"left_margin\"><b>Направо 30</b><p class=\"left_margin\"><b>Повтори 3 [Вперёд 8 Направо 60 Вперёд 8 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 4 [Вперёд 12 Направо 90]</b><p>и находиться вне области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 3 [Вперёд 8 Направо 60 Вперёд 8 Направо 120]</b>. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0\nfor x in range(1, 12):\n    for y in range(1, 12):\n        if (y > x * 3 ** 0.5) or (y < (x - 8) * 3 ** 0.5) or (y > (64 - 16)**(1/2)):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866846303, 'PYTHON', '', '73', 'Антон Сибгатулин'),
(294, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 5 Направо 90 Вперёд 7 Направо 90]</b><p class=\"left_margin\">Определите количество точек с целочисленными координатами, лежащих внутри или на границе области, которую ограничивает заданная алгоритмом линия.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor x in range(6):\n    for y in range(8):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866846475, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(295, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 10 Направо 90]</b><p class=\"left_margin\"><b>Направо 30</b><p class=\"left_margin\"><b>Повтори 5 [Вперёд 6 Направо 60 Вперёд 6 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 4 [Вперёд 10 Направо 90]</b> и находиться вне области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 5 [Вперёд 6 Направо 60 Вперёд 6 Направо 120]</b>. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 10):\n    for y in range(1, 10):\n        if (y > x * 3 ** 0.5) or (y < (x - 6) * 3 ** 0.5) or (y > (36 - 9)**(1/2)):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866846631, 'PYTHON', '', '51', 'Антон Сибгатулин'),
(296, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 10 Направо 90]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor x in range(1, 10):\n    for y in range(1, 10):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866846819, 'PYTHON', '', '81', 'Антон Сибгатулин'),
(297, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и <p>его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b> <p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 5 [Вперёд 9 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 9):\n    for y in range(1, 9):\n        if -x / 3 ** 0.5 + 9 > y > x / 3 ** 0.5:\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866847037, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(298, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i> </b>(где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i> </b>(где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 12 Направо 150 Вперёд 12 Направо 30]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. <i>Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 24):\n    for y in range(1, 10):\n        if (y < x / 3 ** 0.5) and (y > (x - 12) / 3 ** 0.5) and (y < 6):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866847678, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(299, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 10 [Вперёд 5 Направо 60]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport turtle as t  # Подключим модуль черепашка\nk = 30\nt.left(90)\nt.speed(10)\nfor i in range(10):  # пропишем алгоритм построения фигуры по условию\n    t.forward(5 * k)\n    t.right(60)\nt.up()\nt.speed(10)  # Увеличим скорость черепашки\nfor x in range(10, -5, - 1):  # Алгоритм построения точек\n    for y in range(10, -10, - 1):\n        t.goto(x * k, y * k)\n        t.dot(3)  # точки размером 4 пикселя\nt.done()\n</code>', 6, 0, 0, 0, 0, 1670866848053, 'PYTHON', '', '62', 'Антон Сибгатулин'),
(300, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 5 [Вперёд 7 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 7):\n    for y in range(1, 7):\n        if -x / 3 ** 0.5 + 7 > y > x / 3 ** 0.5:\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866848209, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(301, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 5 [Вперёд 9 Направо 90 Вперёд 3 Направо 90]</b><p class=\"left_margin\">Определите количество точек с целочисленными координатами, лежащих внутри или на границе области, которую ограничивает заданная алгоритмом линия.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0\nfor x in range(4):\n    for y in range(10):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866848334, 'PYTHON', '', '40', 'Антон Сибгатулин'),
(302, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 8 Направо 90 Вперёд 8 Направо 90]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. <i>Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0\nfor x in range(1, 8): \n    for y in range(1, 8):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866848584, 'PYTHON', '', '49', 'Антон Сибгатулин'),
(303, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 10 Направо 60 Вперёд 10 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. <i>Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport turtle as t # Подключим модуль черепашка\nk = 20 # коэффициент для настраивания более удобного масштаба\nt.left(90)\nt.speed(5)\nfor i in range(4): # пропишем алгоритм построения фигуры по условию\n    t.forward(10 * k)\n    t.right(60)\n    t.forward(10 * k)\n    t.right(120)\nt.up()\nt.speed(10) # Увеличим скорость черепашки\nfor x in range(-10, 15): # Алгоритм построения точек\n    for y in range(0, 20):\n        t.goto(x * k, y * k)\n        t.dot(3) # точки размером 4 пикселя\nt.done()\n</code>', 6, 0, 0, 0, 0, 1670866848896, 'PYTHON', '', '80', 'Антон Сибгатулин'),
(304, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 5 Направо 90 Вперёд 10 Направо 90]</b><p class=\"left_margin\">Определите количество точек с целочисленными координатами, лежащих внутри и на границе области, которую ограничивает заданная алгоритмом линия.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(11):\n    for y in range(6):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866849115, 'PYTHON', '', '66', 'Антон Сибгатулин'),
(305, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 10 Направо 90]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. <i>Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 10):\n    for y in range(1, 10):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866849256, 'PYTHON', '', '81', 'Антон Сибгатулин'),
(306, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 10 [Вперёд 9 Направо 90 Вперёд 2 Направо 90]</b><p class=\"left_margin\">Определите количество точек с целочисленными координатами, лежащих внутри или на границе области, которую ограничивает заданная алгоритмом линия.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor x in range(10):\n    for y in range(3):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866849396, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(307, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 5 [Вперёд 8 Направо 60 Вперёд 8 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. <i>Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0\nfor x in range(1, 20):\n    for y in range(1, 10):\n        if (y < x * 3 ** 0.5) and (y > (x - 8) * 3 ** 0.5) and (y < (64 - 16)**(1/2)):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866849553, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(308, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 9 Направо 90 Вперёд 7 Направо 90]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. <i>Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 9):\n    for y in range(1, 7):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866849709, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(309, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i> </b>(где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 12 [Направо 60 Вперёд 1 Направо 60 Вперёд 1 Направо 270]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nimport turtle as t  # Подключим модуль черепашка\nk = 50  # коэффициент для настраивания более удобного масштаба\nt.left(90)\nfor i in range(12):  # пропишем алгоритм построения фигуры по условию\n    t.right(60)\n    t.forward(1 * k)\n    t.right(60)\n    t.forward(1 * k)\n    t.right(270)\nt.up()\nt.speed(10)  # Увеличим скорость черепашки\nfor x in range(5, -4, - 1):  # Алгоритм построения точек\n    for y in range(5, -10, - 1):\n        t.goto(x * k, y * k)\n        t.dot(4)  # точки размером 4 пикселя\nt.done()\n</code>', 6, 0, 0, 0, 0, 1670866849927, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(310, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси абсцисс, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 6 Направо 150 Вперёд 6 Направо 30]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. <i>Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0\nfor x in range(1, 20):\n    for y in range(1, 10):\n        if (y < x / 3 ** 0.5) and (y > (x - 6) / 3 ** 0.5) and (y < 3):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866850099, 'PYTHON', '', '12', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(311, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 6 [Вперёд 13 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 13):\n    for y in range(1, 13):\n        if -x / 3 ** 0.5 + 13 > y > x / 3 ** 0.5:\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866850302, 'PYTHON', '', '66', 'Антон Сибгатулин'),
(312, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 14 [Направо 60 Вперёд 2 Направо 60 Вперёд 2 Направо 270]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nfrom turtle import * # Подключим модуль черепашка\ncolor(\'black\',\'red\') # устанавливаем цвет пера и цвет заливки\nspeed(100)\nlt(90)\nk = 100 # коэффициент для настраивания более удобного масштаба\nbegin_fill()\nfor i in range(12): #указываем число циклов необходимое до полного завершения фигуры\n    rt(60)\n    fd(2*k)\n    rt(60)\n    fd(2*k)\n    rt(270)\nend_fill()\ncnt = 0\ncanvas = getcanvas()\nfor x in range(-100*k,100*k,k):\n    for y in range(-100*k,100*k,k):\n        s = canvas.find_overlapping(x,y,x,y)\n        if len(s) == 1 and s[0] == 5: \n            cnt+=1\nprint(cnt)\ndone()\nexit()\n</code>', 6, 0, 0, 0, 0, 1670866850459, 'PYTHON', '', '149', 'Антон Сибгатулин'),
(313, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 6 [Вперёд 7 Направо 90 Вперёд 7 Направо 90]</b><p class=\"left_margin\">Определите количество точек с целочисленными координатами, лежащих внутри или на границе области, которую ограничивает заданная алгоритмом линия.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0\nfor x in range(8):\n    for y in range(8):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866850646, 'PYTHON', '', '64', 'Антон Сибгатулин'),
(314, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 8 [Вперёд 6 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0\nfor x in range(1, 6):\n    for y in range(1, 6):\n        if -x / 3 ** 0.5 + 6 > y > x / 3 ** 0.5:\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866850818, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(315, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 12 Направо 90]</b><p class=\"left_margin\"><b>Повтори 3 [Вперёд 12 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 4 [Вперёд 12 Направо 90]</b><p>и находиться вне области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 3 [Вперёд 12 Направо 120]</b>. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor x in range(1, 12):\n    for y in range(1, 12):\n        if (y < x / 3 ** 0.5) or (y > -x / 3 ** 0.5 + 12):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866851021, 'PYTHON', '', '65', 'Антон Сибгатулин'),
(316, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 6 [Вперёд 10 Направо 60]</b><p class=\"left_margin\">Определите количество точек с целочисленными координатами, лежащих внутри или на границе области, которую ограничивает заданная алгоритмом линия.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\nc = 0\nfor x in range(0, 20):\n    for y in range(-5, 15):\n        if x >= 0 and x <= 10 * 3**0.5 and \\\n            y >= -1/(3**0.5)*x and y >= 1/(3**0.5)*x-10 and \\\n            y <= 1/(3**0.5)*x+10 and y <= -1/(3**0.5)*x+20:\n                c += 1\nprint(c)\n</code>', 6, 0, 0, 0, 0, 1670866851193, 'PYTHON', '', '268', 'Антон Сибгатулин'),
(317, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>] </b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 7 Направо 90 Вперёд 8 Направо 90]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. <i>Точки на линии учитывать не следует.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0 \nfor x in range(1, 7):\n    for y in range(1, 8):\n        count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866851365, 'PYTHON', '', '42', 'Антон Сибгатулин'),
(318, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись<p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b><p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 8 Направо 90]</b><p class=\"left_margin\"><b>Повтори 3 [Вперёд 12 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом:<b>Повтори 4 [Вперёд 8 Направо 90]</b><p>и находиться вне области, ограниченной линией, заданной данным алгоритмом: <b>Повтори 3 [Вперёд 12 Направо 120]</b>. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ncount = 0\nfor x in range(1, 8):\n    for y in range(1, 8):\n        if (y < x / 3 ** 0.5) or (y > -x / 3 ** 0.5 + 12):\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866851552, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(319, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Черепаха действует на плоскости с декартовой системой координат. В начальный момент Черепаха находится в начале координат, её голова направлена вдоль положительного направления оси ординат, хвост опущен. При опущенном хвосте Черепаха оставляет на поле след в виде линии. В каждый конкретный момент известно положение исполнителя и направление его движения. У исполнителя существует две команды: <b>Вперёд <i>n</i></b> (где <i>n</i>&#8239;&#8239;— целое число), вызывающая передвижение Черепахи на <i>n</i> единиц в том направлении, куда указывает её голова, и <b>Направо <i>m</i></b> (где <i>m</i>&#8239;&#8239;— целое число), вызывающая изменение направления движения на <i>m</i> градусов по часовой стрелке. Запись <p class=\"left_margin\"><b>Повтори k [Команда1 Команда2 … Команда<i>S</i>]</b> <p>означает, что последовательность из <i>S</i> команд повторится k раз. Черепахе был дан для исполнения следующий алгоритм:<p class=\"left_margin\"><b>Повтори 4 [Вперёд 14 Направо 120]</b><p class=\"left_margin\">Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией, заданной данным алгоритмом. Точки на линии учитывать не следует.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ncount = 0\nfor x in range(1, 14):\n    for y in range(1, 14):\n        if -x / 3 ** 0.5 + 14 > y > x / 3 ** 0.5:\n            count += 1\nprint(count)\n</code>', 6, 0, 0, 0, 0, 1670866851739, 'PYTHON', '', '78', 'Антон Сибгатулин'),
(320, '<div id=\"ember3325\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача&nbsp;№3</strong></p>\n\n<p>Напишите программу, которая печатает сообщение \"Hello, World!\". Текст должен быть напечатан без кавычек. Обратите внимание на то, чтобы фраза на 100% соответствовала заданию. Все пробелы и все знаки препинания должны быть на месте.<br>\n<br>\nПробел для человека - просто пустое место, а для компьютера - это реальный&nbsp;двоичный символ! То есть один лишний пробел или отсутствие пробела меняет двоичный код фразы и тестирующая система воспримет вашу фразу, как другую, не соответствующую заданию. Пока привыкайте. Об этом более подробно будем говорить в разделе <em>Строки</em>.</p></span></div>\n\n\n<a href=\"/theory?id=9\" target=\"_blank\">Подсказка</a>', 'Решим задание с помощью языка программирования Python методом print():<code>print(\"Hello, World!\")</code>', 1, 0, 0, 0, 0, 1671035950408, 'PYTHON', '', 'Hello, World!\n', 'Антон Сибгатулин'),
(321, '<div id=\"ember3383\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача&nbsp;№4</strong></p>\n\n<p>Напишите программу, которая выводит сумму чисел от 1 до 8, то есть 1+2+3+...+8.</p>\n\n<p>Вычислять самим ничего не нужно. Напишите арифметическое выражение в операторе вывода.</p></span></div>\n\n<a href=\"/theory?id=9\" target=\"_blank\">Подсказка</a>', 'Решим задание с помощью языка программирования Python методом print():<code>print(1+2+3+4+5+6+7+8)</code>', 1, 0, 0, 0, 0, 1671035938814, 'PYTHON', '', '36\n', 'Антон Сибгатулин'),
(322, '<div id=\"ember3403\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача&nbsp;№5</strong></p>\n\n<p>Напишите программу, которая вычисляет факториал числа 10.&nbsp;</p>\n\n<p>Факториал натурального числа n - это произведение всех натуральных чисел от 1 до n включительно.<br>\nТо есть n! = 1*2*3*...*n, а факториал числа 6! = 1*2*3*4*5*6.</p></span></div>\n\n<a href=\"/theory?id=9\" target=\"_blank\">Подсказка</a>', 'Решим задание с помощью языка программирования Python методом :<code>print(1*2*3*4*5*6*7*8*9*10)</code>', 1, 0, 0, 0, 0, 1671036078461, 'PYTHON', '', '3628800\n', 'Антон Сибгатулин'),
(323, '<div id=\"ember3423\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача&nbsp;№6</strong></p>\n\n<p>Напишите программу, которая выводит сумму дробных чисел 1/2 + 1/3 + 1/4 + 1/5 + 1/6.</p>\n\n<p>Вычислять самим ничего не нужно. Напишите арифметическое выражение в операторе вывода.</p>\n\n<p style=\"text-align: center;\">&nbsp;</p></span></div>\n\n<a href=\"/theory?id=9\" target=\"_blank\">Подсказка</a>', 'Решим задание с помощью языка программирования Python методом print():<code>print(1/2 + 1/3 + 1/4 + 1/5 + 1/6)</code>', 1, 0, 0, 0, 0, 1671036222383, 'PYTHON', '', '1.45\n', 'Антон Сибгатулин'),
(324, '<div id=\"ember3443\" class=\"quiz-layout-head ember-view\"><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n    <div id=\"ember3444\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача&nbsp;№7</strong></p>\n\n<p>Напишите программу, которая выводит на экран три строки по три числа через пробел в таком виде:</p>\n\n<p>1 2 3<br>\n4 5 6<br>\n7 8 9</p>\n\n<p>Замечание:<br>\nИспользуйте оператор&nbsp;<strong>print()</strong>,<strong>&nbsp;</strong>в котором через запятую укажите список вывода.</p></span></div>\n\n<!---->  </div>\n</div>\n\n<strong class=\"quiz-layout-head__print-notify print-only\">\n  Чтобы решить это задание откройте <a href=\"https://stepik.org/lesson/361676/step/9\">https://stepik.org/lesson/361676/step/9</a>\n</strong>\n</div>\n\n<a href=\"/theory?id=9\" target=\"_blank\">Подсказка</a>', 'Решим задание с помощью языка программирования Python методом print():<code>print (1, 2, 3)\nprint (4, 5, 6)\nprint (7,8,9)</code>', 1, 0, 0, 0, 0, 1671036316878, 'PYTHON', '', '1 2 3\n4 5 6\n7 8 9\n', 'Антон Сибгатулин'),
(325, '<div id=\"ember3702\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача №10</strong></p>\n\n<p>Напишите программу, которая печатает строку \"Python\" 20 раз подряд без пробелов и без кавычек.&nbsp;</p>\n\n<p><strong>Выходные данные:</strong><br>\nОдна строка, состоящая из строк Python, повторяющихся 20 раз.&nbsp;<br>\nНачало строки выглядит так: PythonPythonPythonPythonPythonPython... .</p></span></div>\n\n<a href=\"/theory?id=10\" target=\"_blank\">Подсказка</a>', 'Решим задание с помощью языка программирования Python:<code>sum = \"Python\"\nsum = sum * 20\nprint(sum)</code>', 1, 0, 0, 0, 0, 1671036592016, 'PYTHON', '', 'PythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPython\n', 'Антон Сибгатулин'),
(326, '<div id=\"ember3968\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача №3</strong></p>\n\n<p>Напишите программу, которая считывает два действительных числа и выводит сумму, разность и произведение этих чисел.</p></span></div>\n\n<div class=\"step-text-wrapper\">\n          <p class=\"step-text__limit-title\">\n            <strong>Sample Input 1:</strong>\n          </p>\n          <pre class=\"step-text__limit-value\">12\n10</pre>\n      \n          \n          \n          \n          \n\n<!---->      </div>\n\n<a href=\"/theory?id=10\" target=\"_blank\">Подсказка</a>', 'Решим задание с помощью языка программирования Python :<code>x1 = 12\nx2 = 10\nprint  ((x1+x2))\nprint  ( (x1-x2))\nprint  ( (x1*x2)) </code>', 2, 0, 0, 0, 0, 1671037421194, 'PYTHON', '', '22\n2\n120\n', 'Антон Сибгатулин'),
(327, '<div id=\"ember4334\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача №4</strong></p>\n\n<p>Напишите программу, которая запрашивает четыре строки&nbsp;и выводит их в обратном порядке по одному в строке.</p></span></div>\n\n<p class=\"step-text__limit-title\">\n            <strong>Sample Output 2:</strong>\n          </p>\n\n<pre class=\"step-text__limit-value\">456\n123\ndef\nabc\n</pre>\n\n', 'Решим задание с помощью языка программирования Python:<code>string1 = \"123\"\nstring2 = \"def\"\nstring3 = \"def\"\nstring4 = \"abc\"\n\nprint(string4)\nprint(string3)\nprint(string2)\nprint(string1)</code>', 2, 0, 0, 0, 0, 1671037382645, 'PYTHON', '', 'abc\ndef\ndef\n123\n', 'Антон Сибгатулин'),
(328, '<div id=\"ember4542\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача №5</strong></p>\n\n<p>Напишите программу, которая запрашивает два целых числа, и выводит их в обратном порядке через пробел.&nbsp;<br>\nЧисла вводятся одной строкой через пробел.</p></span></div>\n\n <p class=\"step-text__limit-title\">\n            <strong>Sample Input 1:</strong>\n          </p>\n          <pre class=\"step-text__limit-value\">1 2\n</pre>\n          <p class=\"step-text__limit-title\">\n            <strong>Sample Input 2:</strong>\n          </p>\n          <pre class=\"step-text__limit-value\">3 -3</pre>', 'Решим задание с помощью языка программирования Python :<code>x1,x2 = map(int,str(\"1 2\").split())\nprint(x2,x1)\n\nx1,x2 = map(int,str(\"3 -3\").split())\nprint(x2,x1)</code>', 2, 0, 0, 0, 0, 1671037371759, 'PYTHON', '', '2 1\n-3 3\n', 'Антон Сибгатулин'),
(329, '<div id=\"ember4562\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача №6</strong></p>\n\n<p>Напишите программу, которая запрашивает три цифры (от 1&nbsp;до 9) и выводит число, получающееся из этих цифр в том же порядке, что и при вводе. Цифры подаются в одной строке через пробел.</p></span></div>\n\n<p class=\"step-text__limit-title\">\n            <strong>Sample Input<!---->:</strong>\n          </p>\n<pre class=\"step-text__limit-value\">1 2 3\n</pre>', 'Решим задание с помощью языка программирования Python :<code>print(str(\"1 2 3\").replace(\" \",\"\"))</code>', 2, 0, 0, 0, 0, 1671037622219, 'PYTHON', '', '123\n', 'Антон Сибгатулин'),
(330, '<div id=\"ember4582\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача №7</strong></p>\n\n<p>На вход программе подаётся четыре целых числа, между которыми стоят знаки \"*\". Программа должна вычислить значение этого выражения.</p></span></div>\n\n<p class=\"step-text__limit-title\">\n            <strong>Sample Input<!---->:</strong>\n          </p>\n<pre class=\"step-text__limit-value\">1*2*3*4\n</pre>', 'Решим задание с помощью языка программирования Python :<code>map = str(\"1*2*3*4\").split(\"*\")\n\nprint(int(map[0])*int(map[1])*int(map[2])*int(map[3]))</code>', 2, 0, 0, 0, 0, 1671037772806, 'PYTHON', '', '24\n', 'Антон Сибгатулин'),
(331, '<div id=\"ember4997\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задача №8</strong></p>\n\n<p>Вводятся два натуральных числа в одной строке через пробел. Догадайтесь по двум открытым тестам, какую надо написать программу, чтобы она прошла все оставшиеся закрытые наборы исходных данных.</p></span></div>\n\n<div class=\"step-text-wrapper\">\n          <p class=\"step-text__limit-title\">\n            <strong>Sample Input 1:</strong>\n          </p>\n          <pre class=\"step-text__limit-value\">2 3\n</pre>\n         \n          <p class=\"step-text__limit-title\">\n            <strong>Sample Input 2:</strong>\n          </p>\n          <pre class=\"step-text__limit-value\">10 9</pre>\n         \n\n<!---->      </div>', 'Решим задание с помощью языка программирования Python :<code>x,y = map(int,str(\"2 3\").split())\nx = int(x)*2+y\nprint(x)\n\n\nx,y = map(int,str(\"10 9\").split())\nx = int(x)*2+y\nprint(x)\n</code>', 2, 0, 0, 0, 0, 1671037924765, 'PYTHON', '', '7\n29\n', 'Антон Сибгатулин'),
(332, '<p>Миша заполнял таблицу истинности логической функции F</p>\n<center>(w → z) ∧ ((y → x) ≡ (z → y)),</center>\n<p>но успел заполнить лишь фрагмент из трёх различных её строк, даже\nне указав, какому столбцу таблицы соответствует каждая из переменных\nw, x, y, z.</p>\n<center><img src=\"https://code-enjoy.ru/posts/280/ege_po_informatike_2022_zadanie_2_klassicheskaya.jpg?8\" title=\"ЕГЭ по информатике 2022 - задание 2 (классическая задача)\" alt=\"ЕГЭ по информатике 2022 - задание 2 (классическая задача)\" width=\"600\" height=\"130\" style=\"border:1px solid #b1b1b1\"></center>\n<p>Определите, какому столбцу таблицы соответствует каждая из переменных\nw, x, y, z.</p>\n<p>В ответе напишите буквы w, x, y, z в том порядке, в котором идут\nсоответствующие им столбцы (сначала буква, соответствующая первому\nстолбцу; затем буква, соответствующая второму столбцу, и т.д.). Буквы\nв ответе пишите подряд, никаких разделителей между буквами ставить\nне нужно.</p>\n\n<a href=\"/theory?id=42\" target=\"_blank\">Теория</a>', 'Решим задание с помощью языка программирования Python:<code>print(\'x y z w\')\nfor x in range(0, 2):\n    for y in range(0, 2):\n        for w in range(0, 2):\n            for z in range(0, 2):\n                if (not(w) or z) and ((not(y) or x) == (not(z) or y)):\n                    print(x, y, z, w)</code>', 3, 0, 0, 0, 0, 1671041777231, 'PYTHON', '', 'xwzy', 'Антон Сибгатулин'),
(333, '<p>Миша заполнял таблицу истинности функции (x ≡ ¬y) → ((x ∧ w) ≡ z), но успел заполнить лишь фрагмент из трёх различных её строк,  даже не указав, какому столбцу таблицы соответствует каждая из переменных w, x, y, z.</p>\n<center><img src=\"https://code-enjoy.ru/posts/280/ege_po_informatike_2022_zadanie_2_klassicheskaya_2.jpg?8\" title=\"ЕГЭ по информатике 2022 - задание 2 (классическая задача 2)\" alt=\"ЕГЭ по информатике 2022 - задание 2 (классическая задача 2)\" width=\"600\" height=\"130\" style=\"border:1px solid #b1b1b1\"></center>\n<p>Определите, какому столбцу таблицы соответствует каждая из переменных\nw, x, y, z.</p>\n<p>В ответе напишите буквы w, x, y, z в том порядке, в котором идут\nсоответствующие им столбцы (сначала буква, соответствующая первому\nстолбцу; затем буква, соответствующая второму столбцу, и т.д.). Буквы\nв ответе пишите подряд, никаких разделителей между буквами ставить\nне нужно.</p>', 'Решим задание с помощью языка программирования Python :<code>print(\'x y z w\')\nfor x in range(0, 2):\n    for y in range(0, 2):\n        for w in range(0, 2):\n            for z in range(0, 2):\n                if not( not(( x == (not(y)) )) or ((x and w) == z) ):\n                    print(x, y, z, w)</code>', 3, 0, 0, 0, 0, 1671041483458, 'PYTHON', '', 'yzxw', 'Антон Сибгатулин'),
(334, ' Дан частично заполненный фрагмент, содержащий <b>неповторяющиеся</b> строки таблицы истинности функции F.\nОпределите, какому столбцу таблицы истинности соответствует каждая из переменных x, y, z, w.\n<center><img src=\"https://code-enjoy.ru/posts/168/ege_po_informatike_zadanie_2_moshneyshiy_metod.jpg?2\" title=\"ЕГЭ по информатике - задание 2 мощнейший метод\" alt=\"ЕГЭ по информатике - задание 2 мощнейший метод\" width=\"600\" height=\"144\"></center>\n\n\nВ ответе напишите буквы x, y, z, w в том порядке, в котором идут соответствующие им столбцы (сначала — буква, соответствующая первому столбцу; затем — буква, соответствующая второму столбцу, и т. д.). Буквы в ответе пишите подряд, никаких разделителей между буквами ставить не нужно.\n\n', 'Решим задание с помощью языка программирования Python :<code>print(\'x y z w\')\nfor x in range(0, 2):\n    for y in range(0, 2):\n        for w in range(0, 2):\n            for z in range(0, 2):\n                if not( ((not(x) or y) and (not(y) or w)) or (z == (x or y)) ):\n                    print(x, y, z, w)</code>', 3, 0, 0, 0, 0, 1671041730485, 'PYTHON', '', 'ywzx', 'Антон Сибгатулин'),
(335, '<p>(№ 1608) Логическая функция F задаётся выражением (¬x ∧ z) ∨ (¬x ∧ ¬y ∧ ¬z)</p>\n<img src=\"https://code-enjoy.ru/posts/280/ege_po_informatike_2022_zadanie_2_tri_peremennih.jpg?9\" title=\"ЕГЭ по информатике 2022 - задание 2 (три переменных)\" alt=\"ЕГЭ по информатике 2022 - задание 2 (три переменных)\" width=\"263\" height=\"88\">\n<p>На рисунке приведён фрагмент таблицы истинности функции F, содержащий все наборы аргументов, при которых функция F истинна. Определите, какому столбцу таблицы истинности функции F соответствует каждая из переменных x, y, z.</p>', 'Решим задание с помощью языка программирования Python :<code>print(\'x y z\')\nfor x in range(0, 2):\n    for y in range(0, 2):\n        for z in range(0, 2):\n               if (not(x) and z) or (not(x) and not(y) and not(z)):\n                    print(x, y, z)</code>', 3, 0, 0, 0, 0, 1671042618101, 'PYTHON', '', 'yxz', 'К. Ю. Полякова: https://kpolyakov.spb.ru/'),
(336, '<p>Логическая функция F задаётся выражением (¬a ∨ b ∨ ¬c) ∧ (b ∨ ¬c). Определите, какому столбцу таблицы истинности функции F соответствует каждая из переменных a, b, c.</p>\n\n<center><img src=\"https://code-enjoy.ru/posts/280/ege_po_informatike_2022_zadanie_2_raznie_znacheniya_funkcii.jpg?8\" title=\"ЕГЭ по информатике 2022 - задание 2 (разные значения функции)\" alt=\"ЕГЭ по информатике 2022 - задание 2 (разные значения функции)\" width=\"260\" height=\"184\"></center>\n\n<p>В ответе напишите буквы a, b, c в том порядке, в котором идут соответствующие им столбцы (без разделителей).</p>', 'Решим задание с помощью языка программирования Python методом :<code>print(\'a b c\')\nfor a in range(0, 2):\n    for b in range(0, 2):\n        for c in range(0, 2):\n               if (not(a) or b or not(c)) and (b or not(c)):\n                    print(a, b, c)</code>', 3, 0, 0, 0, 0, 1671043006427, 'PYTHON', '', 'bac', 'Сибгатулин Антон'),
(337, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 28.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 28 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 27. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 28:\n        return 1\n    elif h == 3 and x < 28:\n        return 0\n    elif x >= 28 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 28):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287717983, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(338, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45&#8239;камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 39 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 38.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 39:\n        return 1\n    elif h == 3 and x < 39:\n        return 0\n    elif x >= 39 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 39):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287718279, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(339, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или возвести количество камней в квадрат. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 49 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится 100 или более. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 100 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 < S < 99.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока - значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 100:\n        return 1\n    elif h == 3 and x < 100:\n        return 0\n    elif x >= 100 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x ** 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x ** 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 100):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287718453, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(340, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤46. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287718626, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(341, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может: добавить в кучу один камень (действие А) или утроить количество камней в куче, а затем добавить ещё один камень (действие Б). Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 31 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится более 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 32 или больше камней. В начальный момент в куче было&#8239;S камней, 1 ≤ S ≤ 31.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 32:\n        return 1\n    elif h == 3 and x < 32:\n        return 0\n    elif x >= 32 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 + 1, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3 + 1, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 32):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287718883, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(342, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который этот же игрок делал на предыдущем ходу. Повторять чужие ходы и свои более старые ходы разрешается.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил два камня), то следующим ходом Ваня может получить 6, 7 или 10 камней. Если Ваня добавил один камень и получил 6 камней, то вторым ходом Петя может получить 7 или 12 камней. Получить 8 камней Петя не может, так как для этого нужно добавить 2 камня, а Петя делал это на предыдущем ходу.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 21. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 21 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Укажите наименьшее значение <i>S</i>, при котором Петя не может выиграть за один ход, но у Пети есть выигрышная стратегия, позволяющая ему выиграть вторым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h, m):\n    if h == 4 and x >= 21:\n        return 1\n    elif h == 4 and x < 21:\n        return 0\n    elif x >= 21 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            if h == 1:\n                return f(x + 1, h + 1, 1) or f(x + 2, h + 1, 2) or f(x * 2, h + 1, 3)  # стратегия победителя\n            elif h == 3:\n                if m == 1:\n                    return f(x + 2, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 2:\n                    return f(x + 1, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 3:\n                    return f(x + 1, h + 1, m) or f(x + 2, h + 1, m)\n        else:\n            return f(x + 1, h + 1, m) and f(x + 2, h + 1, m) and f(x * 2, h + 1, m)  \nfor x in range(1, 21):\n    if f(x, 1, 0) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287719046, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(343, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 62. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 62 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 51.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 62:\n        return 1\n    elif h == 3 and x + y < 62:\n        return 0\n    elif x + y >= 62 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 52):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287719216, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(344, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 129. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу из 129 или больше камней. <p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1&#8239;≤&#8239;<i>S</i>&#8239;≤ 128.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. <p class=\"left_margin\">Укажите такое значение <i>S</i>, при котором Петя не может выиграть за один ход, но при любом ходе Пети Ваня может выиграть своим первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 129:\n        return 1\n    elif h == 3 and x < 129:\n        return 0\n    elif x >= 129 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 129):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287719486, 'PYTHON', '', '64', 'Антон Сибгатулин'),
(345, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 36. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 36 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 35.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 36:\n        return 1\n    elif h == 3 and x < 36:\n        return 0\n    elif x >= 36 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 36):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287719736, 'PYTHON', '', '9', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(346, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 45. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287719861, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(347, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 36. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 36 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 35.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 36:\n        return 1\n    elif h == 3 and x < 36:\n        return 0\n    elif x >= 36 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 36):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287720042, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(348, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 41 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 32.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 41:\n        return 1\n    elif h == 3 and x + y < 41:\n        return 0\n    elif x + y >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 33):\n    if f(x, 8, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287720171, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(349, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 61. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 61 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 3 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;57.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 61:\n        return 1\n    elif h == 3 and x + y < 61:\n        return 0\n    elif x + y >= 61 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 58):\n    if f(x, 3, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287721045, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(350, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>добавить столько камней, сколько их в данный момент в другой куче</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (14,&thinsp;9), (5,&thinsp;10), (5,&thinsp;14). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 75. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 75 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 7 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 75:\n        return 1\n    elif h == 3 and x + y < 75:\n        return 0\n    elif x + y >= 75 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 68):\n    if f(x, 7, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287721752, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(351, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 33. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 33 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 32.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 33:\n        return 1\n    elif h == 3 and x < 33:\n        return 0\n    elif x >= 33 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 33):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287722163, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(352, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) <b>один</b> камень или увеличить количество камней в куче в <b>три раза</b>. Например, пусть в одной куче 10 камней, а в другой 7 камней; такую позицию в игре будем обозначать (10, 7). Тогда за один ход можно получить любую из четырёх позиций: (11,&#8239;7), (30, 7), (10, 8), (10, 21). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 68. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 68 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было шесть камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1 ≤ <i>S</i> ≤ 61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 68:\n        return 1\n    elif h == 3 and x + y < 68:\n        return 0\n    elif x + y >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 62):\n    if f(x, 6, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287722535, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(353, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>добавить столько камней, сколько их в данный момент в другой куче</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (14,&thinsp;9), (5,&thinsp;10), (5,&thinsp;14). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 67. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 67 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 9 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;57.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 67:\n        return 1\n    elif h == 3 and x + y < 67:\n        return 0\n    elif x + y >= 67 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 58):\n    if f(x, 9, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287722805, 'PYTHON', '', '17', 'Антон Сибгатулин'),
(354, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 36.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 47:\n        return 1\n    elif h == 3 and x + y < 47:\n        return 0\n    elif x + y >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 37):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287723007, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(355, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один или четыре</b> камня либо увеличить количество камней в куче <b>в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 63. <p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 63 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 62.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 63: \n        return 1\n    elif h == 3 and x < 63:\n        return 0\n    elif x >= 63 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n             return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия проигравшего(неудачный ход)\nfor x in range(1, 63):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287723156, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(356, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 93. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 93 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;80.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 93:\n        return 1\n    elif h == 3 and x + y < 93:\n        return 0\n    elif x + y >= 93 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 81):\n    if f(x, 12, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287723309, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(357, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу 1 камень или 10 камней. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 30.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 31:\n        return 1\n    elif h == 3 and x < 31:\n        return 0\n    elif x >= 31 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 31):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287723482, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(358, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в четыре раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (28,&thinsp;9), (7,&thinsp;10), (7,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 151. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 151 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 9 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;141.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 151:\n        return 1\n    elif h == 3 and x + y < 151:\n        return 0\n    elif x + y >= 151 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 142):\n    if f(x, 9, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287723745, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(359, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 82. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 82 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;77.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 82:\n        return 1\n    elif h == 3 and x + y < 82:\n        return 0\n    elif x + y >= 82 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 78):\n    if f(x, 4, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287723925, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(360, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу 1 камень или 10 камней. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 41:\n        return 1\n    elif h == 3 and x < 41:\n        return 0\n    elif x >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 41):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287724059, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(361, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 69 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤68. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 69:\n        return 1\n    elif h == 3 and x < 69:\n        return 0\n    elif x >= 69 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 69):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287724202, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(362, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 102. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 102 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней; 1 ≤ S ≤ 101.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 102:\n        return 1\n    elif h == 3 and x < 102:\n        return 0\n    elif x >= 102 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 102):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287724333, 'PYTHON', '', '26', 'Антон Сибгатулин'),
(363, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 43. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 43 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 42.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 43:\n        return 1\n    elif h == 3 and x < 43:\n        return 0\n    elif x >= 43 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 43):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287724468, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(364, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в пять раз. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 50 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 100. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 101 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 100.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 101:\n        return 1\n    elif h == 3 and x < 101:\n        return 0\n    elif x >= 101 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 5, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 5, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 101):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287724671, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(365, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре будем обозначать (10,&thinsp;5). Тогда за один ход можно получить любую из четырёх позиций: (11,&thinsp;5), (20,&thinsp;5), (10,&thinsp;6), (10,&thinsp;10). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было семь камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;69.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 77:\n        return 1\n    elif h == 3 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 70):\n    if f(x, 7, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287724853, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(366, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень либо увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 26.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 26 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 25.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может<p>выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 26:\n        return 1\n    elif h == 3 and x < 26:\n        return 0\n    elif x >= 26 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 26):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287725127, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(367, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 49. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 49 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;43.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 49:\n        return 1\n    elif h == 3 and x + y < 49:\n        return 0\n    elif x + y >= 49 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 44):\n    if f(x, 5, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287725278, 'PYTHON', '', '4', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(368, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в четыре раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 40 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 80. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 81 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 80.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 81:\n        return 1\n    elif h == 3 and x < 81:\n        return 0\n    elif x >= 81 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 81):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287725402, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(369, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень, или добавить в кучу три камня, или увеличить количество камней в куче в два раза.<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 13 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.  Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53. Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 54:\n        return 1\n    elif h == 3 and x < 54:\n        return 0\n    elif x >= 54 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287725559, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(370, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в шесть раз</b>. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 60 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 361. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 362 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 360.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 361:\n        return 1\n    elif h == 3 and x < 361:\n        return 0\n    elif x >= 361 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 361):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287725671, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(371, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 22. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 22 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 21.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 22:\n        return 1\n    elif h == 3 and x < 22:\n        return 0\n    elif x >= 22 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 22):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287725796, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(372, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 56. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 56 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 55.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 56:\n        return 1\n    elif h == 3 and x < 56:\n        return 0\n    elif x >= 56 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 56):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287725968, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(373, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 44. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 44 или больше камней. В начальный момент в куче было S камней, 1 &le; S &le; 43.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 44:\n        return 1\n    elif h == 3 and x < 44:\n        return 0\n    elif x >= 44 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 44):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287726088, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(374, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 46. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;45.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Укажите такое значение <i>S</i>, при котором Петя не может выиграть за один ход, но при любом ходе Пети Ваня может выиграть своим первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287726518, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(375, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 77 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;68.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 77:\n        return 1\n    elif h == 3 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 69):\n    if f(x, 8, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287726800, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(376, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в 3 раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 30. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 30 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 29.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 30:\n        return 1\n    elif h == 3 and x < 30:\n        return 0\n    elif x >= 30 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 30):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287726926, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(377, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287727051, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(378, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать<p>ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 69 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 58.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 69:\n        return 1\n    elif h == 3 and x + y < 69:\n        return 0\n    elif x + y >= 69 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 59):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287727206, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(379, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 40 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 20 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение <i>S</i>, когда такая ситуация возможна.<p><!--Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y <= 40:\n        return 1\n    elif h == 3 and x + y > 40:\n        return 0\n    elif x + y <= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(100, 20, -1):\n    if f(x, 20, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287727328, 'PYTHON', '', '80', 'Антон Сибгатулин'),
(380, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 24. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 24 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 23.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 24:\n        return 1\n    elif h == 3 and x < 24:\n        return 0\n    elif x >= 24 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 24):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287727650, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(381, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 106. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 106 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 105.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 106:\n        return 1\n    elif h == 3 and x < 106:\n        return 0\n    elif x >= 106 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 106):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287727785, 'PYTHON', '', '27', 'Антон Сибгатулин'),
(382, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 74. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 74 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 74:\n        return 1\n    elif h == 3 and x + y < 74:\n        return 0\n    elif x + y >= 74 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 62):\n    if f(x, 12, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287727937, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(383, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень меньше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 4).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение <i>S</i>, когда такая ситуация возможна.<p><!--Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y <= 20:\n        return 1\n    elif h == 3 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2, y, h + 1) or f(x, y // 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2, y, h + 1) or f(x, y // 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(100, 10, -1):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287728093, 'PYTHON', '', '43', 'Антон Сибгатулин'),
(384, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было <i>S</i> камней 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;64.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287728301, 'PYTHON', '', '17', 'Антон Сибгатулин'),
(385, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<b> добавить в кучу 1 камень</b> или <b>добавить в кучу 10 камней.</b> Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 52. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 52 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 51. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;—&#8239;значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 52:\n        return 1\n    elif h == 3 and x < 52:\n        return 0\n    elif x >= 52 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 52):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287728426, 'PYTHON', '', '32', 'Антон Сибгатулин'),
(386, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 54. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 55 или больше камней. В начальный момент в куче было S камней, 1 ≤ <i>S</i> ≤ 54.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 55:\n        return 1\n    elif h == 3 and x < 55:\n        return 0\n    elif x >= 55 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 55):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287728550, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(387, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который только что сделал второй игрок.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил 2 камня), то следующим ходом Ваня может получить 6 или 10 камней. Получить 7 камней Ваня не может, так как для этого нужно добавить 2 камня, а такой ход только что сделал Петя.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. Игра завершается, когда количество камней в куче становится не менее 34. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 34 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;33.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Укажите такое значение <i>S</i>, при котором Петя не может выиграть за один ход, но при любом ходе Пети Ваня может выиграть своим первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h, m):\n    if h == 3 and x >= 34:\n        return 1\n    elif h == 3 and x < 34:\n        return 0\n    elif x >= 34 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            if h == 2:\n                if m == 1:\n                    return f(x + 2, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 2:\n                    return f(x + 1, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 3:\n                    return f(x + 1, h + 1, m) or f(x + 2, h + 1, m)\n        else:\n            return f(x + 1, h + 1, 1) and f(x + 2, h + 1, 2) and f(x * 2, h + 1, 3)\nfor x in range(1, 34):\n    if f(x, 1, 0) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287728679, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(388, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень, добавить в кучу четыре камня, или увеличить количество камней в куче в 2 раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 52. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 52 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 51. <p> <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 52:\n        return 1\n    elif h == 3 and x < 52:\n        return 0\n    elif x >= 52 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 52):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287728795, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(389, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>четыре</b> камня или увеличить количество камней в куче<b> в два раза</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 48.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 48 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/69/69a7d118d912871bddf7fddb9dbccf59.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 47.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 48:\n        return 1\n    elif h == 3 and x < 48:\n        return 0\n    elif x >= 48 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 48):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287729002, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(390, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 98. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 98 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 97.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 98:\n        return 1\n    elif h == 3 and x < 98:\n        return 0\n    elif x >= 98 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 98):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287729126, 'PYTHON', '', '25', 'Антон Сибгатулин'),
(391, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Паша и Вася, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Паша. За один ход игрок может добавить в кучу <b>один или четыре камня</b> или увеличить количество камней в куче <b>в пять раз</b>. Игра завершается в тот момент, когда количество камней в куче становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 69 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 68.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Вася выиграл своим первым ходом после неудачного первого хода Паши. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 68:\n        return 1\n    elif h == 3 and x < 68:\n        return 0\n    elif x >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 68):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287729279, 'PYTHON', '', '3', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(392, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><b>добавить в кучу один камень</b>, или<p class=\"left_margin\"><b>добавить в кучу три камня</b>, или<p class=\"left_margin\"><b>увеличить количество камней в куче в два раза.</b><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 13 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 49. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 50 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 49.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 50:\n        return 1\n    elif h == 3 and x < 50:\n        return 0\n    elif x >= 50 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 50):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287729429, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(393, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в четыре раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 40 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 64.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287729558, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(394, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит  куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 35 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 34. Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 35:\n        return 1\n    elif h == 3 and x < 35:\n        return 0\n    elif x >= 35 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287729724, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(395, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать<p>ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 84. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 84 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 16 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 84:\n        return 1\n    elif h == 3 and x + y < 84:\n        return 0\n    elif x + y >= 84 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 68):\n    if f(x, 16, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287729860, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(396, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней.   В начальный момент в куче было S камней, 1&#8239;≤&#8239;S ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 65:\n        return 1\n    elif h == 4 and x < 65:\n        return 0\n    elif x >= 65 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 15, 0, 0, 0, 0, 1671287729997, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(397, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение <i>S</i>, когда такая ситуация возможна.<p><!--Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y <= 20:\n        return 1\n    elif h == 3 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(100, 10, -1):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287730159, 'PYTHON', '', '40', 'Антон Сибгатулин'),
(398, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может: добавить в кучу один камень (действие А) или утроить количество камней в куче, а затем убрать из кучи один камень (действие Б). Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 29 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится более 32. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 33 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 32.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 33:\n        return 1\n    elif h == 3 and x < 33:\n        return 0\n    elif x >= 33 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 - 1, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3 - 1, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 33):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287730343, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(399, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287730483, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(400, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может:<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>добавить в кучу один камень</b> (действие А) или<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>утроить количество камней в куче, а затем убрать из кучи 2 камня</b> (действие Б).<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 28 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 30. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 2 ≤ <i>S</i> ≤ 30.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 31:\n        return 1\n    elif h == 3 and x < 31:\n        return 0\n    elif x >= 31 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(2, 31):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287730601, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(401, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в четыре раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (28,&thinsp;9), (7,&thinsp;10), (7,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 91. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 91 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;85.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 91:\n        return 1\n    elif h == 3 and x + y < 91:\n        return 0\n    elif x + y >= 91 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 86):\n    if f(x, 5, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287730729, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(402, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287730858, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(403, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может:<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>добавить в кучу один камень</b> (действие А) или<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>утроить количество камней в куче, а затем убрать из кучи 2 камня</b> (действие Б).<p class=\"left_margin\">Например, имея кучу из 20 камней, за один ход можно получить кучу из 21 камня или из 58 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 2 ≤ <i>S</i> ≤ 39.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 40:\n        return 1\n    elif h == 3 and x < 40:\n        return 0\n    elif x >= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(2, 40):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287730987, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(404, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>четыре</b> камня или увеличить количество камней в куче<b> в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 70.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 70 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/4d/4dd8a3e37c2bde9ffbd7c46d9167adfe.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 69.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 70:\n        return 1\n    elif h == 3 and x < 70:\n        return 0\n    elif x >= 70 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 70):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287731114, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(405, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>три</b> камня или увеличить количество камней в куче<b> в два раза</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 42.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 42 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/95/95771c792d87fefe8ea16e0cf759e65a.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 41.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 42:\n        return 1\n    elif h == 3 and x < 42:\n        return 0\n    elif x >= 42 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n             return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия проигравшего(неудачный ход)\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287731287, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(406, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в шесть раз</b>. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 60 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 365. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 366 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 365.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 366:\n        return 1\n    elif h == 3 and x < 366:\n        return 0\n    elif x >= 366 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 366):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287731449, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(407, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287731677, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(408, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней.  Игроки ходят по очереди, первый ход делает Петя. За один ход  игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 74. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 74 или больше камней.  В начальный момент в куче было S камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;73. <p> <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 74:\n        return 1\n    elif h == 3 and x < 74:\n        return 0\n    elif x >= 74 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 74):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287731838, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(409, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 35 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤34.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 35:\n        return 1\n    elif h == 3 and x < 35:\n        return 0\n    elif x >= 35 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287732023, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(410, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>добавить в кучу два камня </b>или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 42 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, h):\n    if h == 3 and x >= 42:\n        return 1\n    elif h == 3 and x < 42:\n        return 0\n    elif x >= 42 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287732228, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(411, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287732442, 'PYTHON', '', '17', 'Антон Сибгатулин'),
(412, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 107. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 107 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 13 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;93.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 107:\n        return 1\n    elif h == 3 and x + y < 107:\n        return 0\n    elif x + y >= 107 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 94):\n    if f(x, 13, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287732578, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(413, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который только что сделал второй игрок.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил 2 камня), то следующим ходом Ваня может получить 6 или 10 камней. Получить 7 камней Ваня не может, так как для этого нужно добавить 2 камня, а такой ход только что сделал Петя.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. Игра завершается, когда количество камней в куче становится не менее 50. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 50 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;49.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Укажите такое значение <i>S</i>, при котором Петя не может выиграть за один ход, но при любом ходе Пети Ваня может выиграть своим первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h, m):\n    if h == 3 and x >= 50:\n        return 1\n    elif h == 3 and x < 50:\n        return 0\n    elif x >= 50 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            if h == 2:\n                if m == 1:\n                    return f(x + 2, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 2:\n                    return f(x + 1, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 3:\n                    return f(x + 1, h + 1, m) or f(x + 2, h + 1, m)\n        else:\n            return f(x + 1, h + 1, 1) and f(x + 2, h + 1, 2) and f(x * 2, h + 1, 3)\nfor x in range(1, 50):\n    if f(x, 1, 0) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287732708, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(414, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 48. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 48 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 47. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 48:\n        return 1\n    elif h == 3 and x < 48:\n        return 0\n    elif x >= 48 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 48):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287732830, 'PYTHON', '', '12', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(415, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 46. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.  В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287733018, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(416, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 50. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 50 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 50:\n        return 1\n    elif h == 3 and x + y < 50:\n        return 0\n    elif x + y >= 50 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 42):\n    if f(x, 8, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287733222, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(417, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в пять раз. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 50 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 200. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 201 или больше камней. В начальный момент в куче было S камней, 1 &le; S &le; 200.<p class=\"left_margin\">Говорят, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 201:\n        return 1\n    elif h == 3 and x < 201:\n        return 0\n    elif x >= 201 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 5, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 5, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 201):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287733363, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(418, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 94. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 94 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 93.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 94:\n        return 1\n    elif h == 3 and x < 94:\n        return 0\n    elif x >= 94 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 94):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287733544, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(419, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>добавить в кучу два камня</b> или<p><b>увеличить количество камней в куче в два раза.</b></center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 37. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 38 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 37.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 38:\n        return 1\n    elif h == 3 and x < 38:\n        return 0\n    elif x >= 38 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 38):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287733700, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(420, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.  <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 27. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 27 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 26. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 27:\n        return 1\n    elif h == 3 and x < 27:\n        return 0\n    elif x >= 27 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 27):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287733811, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(421, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 88. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 88 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 88:\n        return 1\n    elif h == 3 and x + y < 88:\n        return 0\n    elif x + y >= 88 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 72):\n    if f(x, 6, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287733959, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(422, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или пять камней или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 20 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 42.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 42 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 42:\n        return 1\n    elif h == 3 and x < 42:\n        return 0\n    elif x >= 42 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 5, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 5, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287734118, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(423, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 39.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 40:\n        return 1\n    elif h == 3 and x < 40:\n        return 0\n    elif x >= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 40):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287734254, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(424, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один или четыре</b> камня либо увеличить количество камней в куче <b>в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 68. <p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 68 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h): \n    if h == 3 and x >= 68:\n        return 1\n    elif h == 3 and x < 68:\n        return 0\n    elif x >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n             return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 68):\n    if f(x, 1) == 1: \n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287734388, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(425, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 39.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Петя не может выиграть своим первым ходом, однако после любого хода Пети Ваня может выиграть. При каком значении <i>S</i> это возможно?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 40:\n        return 1\n    elif h == 3 and x < 40:\n        return 0\n    elif x >= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 40):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287734517, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(426, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 29 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 28. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 29:\n        return 1\n    elif h == 3 and x < 29:\n        return 0\n    elif x >= 29 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 29):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287734666, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(427, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 231. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 231 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 17 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;213.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 231:\n        return 1\n    elif h == 3 and x + y < 231:\n        return 0\n    elif x + y >= 231 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 214):\n    if f(x, 17, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287734793, 'PYTHON', '', '54', 'Антон Сибгатулин'),
(428, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 30.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 31:\n        return 1\n    elif h == 3 and x < 31:\n        return 0\n    elif x >= 31 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 31):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287734923, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(429, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>три</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 66. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 66 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 65.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 66:\n        return 1\n    elif h == 3 and x < 66:\n        return 0\n    elif x >= 66 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 66):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287735046, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(430, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 79. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 79 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;72.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 79:\n        return 1\n    elif h == 3 and x + y < 79:\n        return 0\n    elif x + y >= 79 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 73):\n    if f(x, 6, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287735192, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(431, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который этот же игрок делал на предыдущем ходу. Повторять чужие ходы и свои более старые ходы разрешается.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил два камня), то следующим ходом Ваня может получить 6, 7 или 10 камней. Если Ваня добавил один камень и получил 6 камней, то вторым ходом Петя может получить 7 или 12 камней. Получить 8 камней Петя не может, так как для этого нужно добавить 2 камня, а Петя делал это на предыдущем ходу.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 29 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;28.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Укажите наименьшее значение <i>S</i>, при котором Петя не может выиграть за один ход, но у Пети есть выигрышная стратегия, позволяющая ему выиграть вторым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h, m):\n    if h == 4 and x >= 29:\n        return 1\n    elif h == 4 and x < 29:\n        return 0\n    elif x >= 29 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            if h == 1:\n                return f(x + 1, h + 1, 1) or f(x + 2, h + 1, 2) or f(x * 2, h + 1, 3)  # стратегия победителя\n            elif h == 3:\n                if m == 1:\n                    return f(x + 2, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 2:\n                    return f(x + 1, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 3:\n                    return f(x + 1, h + 1, m) or f(x + 2, h + 1, m)\n        else:\n            return f(x + 1, h + 1, m) and f(x + 2, h + 1, m) and f(x * 2, h + 1, m)  \nfor x in range(1, 29):\n    if f(x, 1, 0) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287735329, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(432, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя.  За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 76. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 76 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 75.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 76:\n        return 1\n    elif h == 3 and x < 76:\n        return 0\n    elif x >= 76 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 76):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287735435, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(433, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>три</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 38. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 38 или больше камней. В начальный момент в куче было S камней, 1 ≤ <i>S</i> ≤ 37.<p class=\"left_margin\">Будем говорить, что игрок имеет <b><i>выигрышную стратегию</b></i>, если он может выиграть при любых ходах противника. Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 38:\n        return 1\n    elif h == 3 and x < 38:\n        return 0\n    elif x >= 38 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 38):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287735568, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(434, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 86. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 86 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 14 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 86:\n        return 1\n    elif h == 3 and x + y < 86:\n        return 0\n    elif x + y >= 86 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 72):\n    if f(x, 14, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287735705, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(435, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 41.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 камень или больше.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 41:\n        return 1\n    elif h == 3 and x < 41:\n        return 0\n    elif x >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287735852, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(436, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 64.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287736004, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(437, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 45. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 45 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 45:\n        return 1\n    elif h == 3 and x + y < 45:\n        return 0\n    elif x + y >= 45 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 41):\n    if f(x, 4, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287736141, 'PYTHON', '', '5', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(438, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 64 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;63.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Укажите такое значение <i>S</i>, при котором Петя не может выиграть за один ход, но при любом ходе Пети Ваня может выиграть своим первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 64:\n        return 1\n    elif h == 3 and x < 64:\n        return 0\n    elif x >= 64 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 64):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287736305, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(439, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 64 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 63. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 64:\n        return 1\n    elif h == 3 and x < 64:\n        return 0\n    elif x >= 64 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 64):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287736440, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(440, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 39 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 38.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 39:\n        return 1\n    elif h == 3 and x < 39:\n        return 0\n    elif x >= 39 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 39):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287736578, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(441, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 29 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1&#8239;≤&#8239;<i>S</i>&#8239;≤ 28.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. <p class=\"left_margin\">Укажите такое значение <i>S</i>, при котором Петя не может выиграть за один ход, но при любом ходе Пети Ваня может выиграть своим первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 29:\n        return 1\n    elif h == 3 and x < 29:\n        return 0\n    elif x >= 29 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 29):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287736712, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(442, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или пять камней или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 20 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 41.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 41:\n        return 1\n    elif h == 3 and x < 41:\n        return 0\n    elif x >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 5, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 5, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 41):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287736896, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(443, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 75. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 75 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 74.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 75:\n        return 1\n    elif h == 3 and x < 75:\n        return 0\n    elif x >= 75 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 75):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287737032, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(444, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 51. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 51 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 50. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 51:\n        return 1\n    elif h == 3 and x < 51:\n        return 0\n    elif x >= 51 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 51):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287737479, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(445, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 54:\n        return 1\n    elif h == 3 and x < 54:\n        return 0\n    elif x >= 54 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287737630, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(446, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><b>добавить в кучу один камень</b>, или<p class=\"left_margin\"><b>добавить в кучу два камня</b>, или<p class=\"left_margin\"><b>увеличить количество камней в куче в два раза</b>.<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 33. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 34 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 33.<p class=\"left_margin\">Говорят, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 34:\n        return 1\n    elif h == 3 and x < 34:\n        return 0\n    elif x >= 34 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 34):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287737751, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(447, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 64.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 65:\n        return 1\n    elif h == 4 and x < 65:\n        return 0\n    elif x >= 65 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287777220, 'PYTHON', '', '71920', 'Антон Сибгатулин'),
(448, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 54:\n        return 1\n    elif h == 4 and x < 54:\n        return 0\n    elif x >= 54 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287777588, 'PYTHON', '', '1325', 'Антон Сибгатулин'),
(449, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 79. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 79 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;72.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите все значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 79:\n        return 1\n    elif h == 4 and x + y < 79:\n        return 0\n    elif x + y >= 79 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 73):\n    if f(x, 6, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287777772, 'PYTHON', '', '82023', 'Антон Сибгатулин'),
(450, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 41 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 32.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите максимальное <i>S</i>, при котором у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p><!--Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 41:\n        return 1\n    elif h == 4 and x + y < 41:\n        return 0\n    elif x + y >= 41 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) and f(x + 2, y + 1, h + 1) and f(x * 2,  y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 33):\n    if f(x, 8, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287778003, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(451, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень, добавить в кучу четыре камня, или увеличить количество камней в куче в 2 раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 52. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 52 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 51. <p> <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 52:\n        return 1\n    elif h == 4 and x < 52:\n        return 0\n    elif x >= 52 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 52):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287778282, 'PYTHON', '', '2124', 'Антон Сибгатулин'),
(452, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может: добавить в кучу один камень (действие А) или утроить количество камней в куче, а затем убрать из кучи один камень (действие Б). Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 29 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится более 32. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 33 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 32.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 33:\n        return 1\n    elif h == 4 and x < 33:\n        return 0\n    elif x >= 33 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3 - 1, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3 - 1, h + 1)  # стратегия проигравшего\nfor x in range(1, 33):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287778564, 'PYTHON', '', '410', 'Антон Сибгатулин'),
(453, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 47:\n        return 1\n    elif h == 4 and x < 47:\n        return 0\n    elif x >= 47 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287778891, 'PYTHON', '', '2122', 'Антон Сибгатулин'),
(454, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>три</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 66. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 66 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 65.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 66:\n        return 1\n    elif h == 4 and x < 66:\n        return 0\n    elif x >= 66 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 66):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287779066, 'PYTHON', '', '720', 'Антон Сибгатулин'),
(455, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45&#8239;камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 39 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 38.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 39:\n        return 1\n    elif h == 4 and x < 39:\n        return 0\n    elif x >= 39 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 39):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287779342, 'PYTHON', '', '411', 'Антон Сибгатулин'),
(456, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите пять таких значений <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y <= 20:\n        return 1\n    elif h == 4 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)   # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) and f(x, y - 1, h + 1) and f(x // 2 + x % 2, y, h + 1) and f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(10, 1000):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287779617, 'PYTHON', '', '2223314142', 'Антон Сибгатулин'),
(457, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>три</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 38. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 38 или больше камней. В начальный момент в куче было S камней, 1 ≤ <i>S</i> ≤ 37.<p class=\"left_margin\">Будем говорить, что игрок имеет <b><i>выигрышную стратегию</b></i>, если он может выиграть при любых ходах противника. Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 38:\n        return 1\n    elif h == 4 and x < 38:\n        return 0\n    elif x >= 38 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 38):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287779742, 'PYTHON', '', '411', 'Антон Сибгатулин'),
(458, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<b> добавить в кучу 1 камень</b> или <b>добавить в кучу 10 камней.</b> Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 52. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 52 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 51. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;—&#8239;значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 52:\n        return 1\n    elif h == 4 and x < 52:\n        return 0\n    elif x >= 52 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 10, h + 1)  # стратегия проигравшего\nfor x in range(1, 52):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287779884, 'PYTHON', '', '3140', 'Антон Сибгатулин'),
(459, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или возвести количество камней в квадрат. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 49 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится 100 или более. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 100 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 < S < 99.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока - значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 100:\n        return 1\n    elif h == 4 and x < 100:\n        return 0\n    elif x >= 100 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x ** 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x ** 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 100):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287780009, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(460, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 45. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 46:\n        return 1\n    elif h == 4 and x < 46:\n        return 0\n    elif x >= 46 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287780158, 'PYTHON', '', '1121', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(461, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 56. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 56 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 55.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 56:\n        return 1\n    elif h == 4 and x < 56:\n        return 0\n    elif x >= 56 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 56):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287780301, 'PYTHON', '', '2526', 'Антон Сибгатулин'),
(462, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было <i>S</i> камней 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;64.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 65:\n        return 1\n    elif h == 4 and x < 65:\n        return 0\n    elif x >= 65 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287780433, 'PYTHON', '', '1631', 'Антон Сибгатулин'),
(463, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 50. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 50 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y, h):\n    if h == 4 and x + y >= 50:\n        return 1\n    elif h == 4 and x + y < 50:\n        return 0\n    elif x + y >= 50 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 42):\n    if f(x, 8, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287780579, 'PYTHON', '', '1620', 'Антон Сибгатулин'),
(464, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.  <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 27. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 27 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 26. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.  <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 27:\n        return 1\n    elif h == 4 and x < 27:\n        return 0\n    elif x >= 27 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 27):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287780763, 'PYTHON', '', '1112', 'Антон Сибгатулин'),
(465, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или пять камней или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 20 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 41.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 41:\n        return 1\n    elif h == 4 and x < 41:\n        return 0\n    elif x >= 41 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 5, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 5, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 41):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287781158, 'PYTHON', '', '812', 'Антон Сибгатулин'),
(466, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 29 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 28. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 29:\n        return 1\n    elif h == 4 and x < 29:\n        return 0\n    elif x >= 29 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 29):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287781565, 'PYTHON', '', '713', 'Антон Сибгатулин'),
(467, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 62. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 62 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 51.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 62:\n        return 1\n    elif h == 4 and x + y < 62:\n        return 0\n    elif x + y >= 62 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 52):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287781710, 'PYTHON', '', '2025', 'Антон Сибгатулин'),
(468, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 61. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 61 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 3 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;57.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 61:\n        return 1\n    elif h == 4 and x + y < 61:\n        return 0\n    elif x + y >= 61 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 4, y, h + 1) and f(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 58):\n    if f(x, 3, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287782059, 'PYTHON', '', '1214', 'Антон Сибгатулин'),
(469, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><b>добавить в кучу один камень</b>, или<p class=\"left_margin\"><b>добавить в кучу два камня</b>, или<p class=\"left_margin\"><b>увеличить количество камней в куче в два раза</b>.<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 33. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 34 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 33.<p class=\"left_margin\">Говорят, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 34:\n        return 1\n    elif h == 4 and x < 34:\n        return 0\n    elif x >= 34 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 34):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287782647, 'PYTHON', '', '81415', 'Антон Сибгатулин'),
(470, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре будем обозначать (10,&thinsp;5). Тогда за один ход можно получить любую из четырёх позиций: (11,&thinsp;5), (20,&thinsp;5), (10,&thinsp;6), (10,&thinsp;10). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было семь камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;69.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y, h):\n    if h == 4 and x + y >= 77:\n        return 1\n    elif h == 4 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 70):\n    if f(x, 7, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287783023, 'PYTHON', '', '3134', 'Антон Сибгатулин'),
(471, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 64 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 63. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 64:\n        return 1\n    elif h == 4 and x < 64:\n        return 0\n    elif x >= 64 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 64):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287783402, 'PYTHON', '', '71920', 'Антон Сибгатулин'),
(472, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>три</b> камня или увеличить количество камней в куче<b> в два раза</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 42.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 42 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/95/95771c792d87fefe8ea16e0cf759e65a.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 41.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h): \n    if h == 4 and x >= 42:\n        return 1\n    elif h == 4 and x < 42:\n        return 0\n    elif x >= 42 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # сратегия проигравшего\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287783590, 'PYTHON', '', '101719', 'Антон Сибгатулин'),
(473, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 74. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 74 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 74:\n        return 1\n    elif h == 4 and x + y < 74:\n        return 0\n    elif x + y >= 74 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 62):\n    if f(x, 12, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287783933, 'PYTHON', '', '2430', 'Антон Сибгатулин'),
(474, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 30.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 31:\n        return 1\n    elif h == 4 and x < 31:\n        return 0\n    elif x >= 31 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 31):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287784285, 'PYTHON', '', '1314', 'Антон Сибгатулин'),
(475, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 54. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 55 или больше камней. В начальный момент в куче было S камней, 1 ≤ <i>S</i> ≤ 54.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 55:\n        return 1\n    elif h == 4 and x < 55:\n        return 0\n    elif x >= 55 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 55):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287784421, 'PYTHON', '', '61617', 'Антон Сибгатулин'),
(476, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите все значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 47:\n        return 1\n    elif h == 4 and x < 47:\n        return 0\n    elif x >= 47 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287784547, 'PYTHON', '', '1922', 'Антон Сибгатулин'),
(477, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 94. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 94 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 93.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 94:\n        return 1\n    elif h == 4 and x < 94:\n        return 0\n    elif x >= 94 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 94):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287784713, 'PYTHON', '', '2345', 'Антон Сибгатулин'),
(478, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>добавить в кучу два камня </b>или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 42 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 4 and x >= 42:\n        return 1\n    elif h == 4 and x < 42:\n        return 0\n    elif x >= 42 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287784870, 'PYTHON', '', '101819', 'Антон Сибгатулин'),
(479, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 39.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Петя имеет выигрышную стратегию в два хода, при этом Петя не может выиграть первым ходом. Укажите два значения <i>S</i>, при которых это возможно. Значения укажите в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 40:\n        return 1\n    elif h == 4 and x < 40:\n        return 0\n    elif x >= 40 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 40):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287785113, 'PYTHON', '', '1518', 'Антон Сибгатулин'),
(480, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 46. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.  В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 46:\n        return 1\n    elif h == 4 and x < 46:\n        return 0\n    elif x >= 46 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 34):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287785369, 'PYTHON', '', '51314', 'Антон Сибгатулин'),
(481, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 75. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 75 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 74.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 75:\n        return 1\n    elif h == 4 and x < 75:\n        return 0\n    elif x >= 75 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 75):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287785524, 'PYTHON', '', '82223', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(482, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу 1 камень или 10 камней. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 30.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 31:\n        return 1\n    elif h == 4 and x < 31:\n        return 0\n    elif x >= 31 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 10, h + 1)  # стратегия проигравшего\nfor x in range(1, 31):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287785678, 'PYTHON', '', '1019', 'Антон Сибгатулин'),
(483, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать<p>ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 84. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 84 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 16 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 84:\n        return 1\n    elif h == 4 and x + y < 84:\n        return 0\n    elif x + y >= 84 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x, y * 2, h + 1) and f(x * 3, y, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 68):\n    if f(x, 16, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287785872, 'PYTHON', '', '1722', 'Антон Сибгатулин'),
(484, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) <b>один</b> камень или увеличить количество камней в куче в <b>три раза</b>. Например, пусть в одной куче 10 камней, а в другой 7 камней; такую позицию в игре будем обозначать (10, 7). Тогда за один ход можно получить любую из четырёх позиций: (11,&#8239;7), (30, 7), (10, 8), (10, 21). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 68. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 68 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было шесть камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1 ≤ <i>S</i> ≤ 61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 68:\n        return 1\n    elif h == 4 and x + y < 68:\n        return 0\n    elif x + y >= 68 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 62):\n    if f(x, 6, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287786202, 'PYTHON', '', '1320', 'Антон Сибгатулин'),
(485, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 49. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 49 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;43.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 49:\n        return 1\n    elif h == 4 and x + y < 49:\n        return 0\n    elif x + y >= 49 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 44):\n    if f(x, 5, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287786441, 'PYTHON', '', '314', 'Антон Сибгатулин'),
(486, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 24. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 24 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 23.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 24:\n        return 1\n    elif h == 4 and x < 24:\n        return 0\n    elif x >= 24 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 24):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287786668, 'PYTHON', '', '910', 'Антон Сибгатулин'),
(487, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 28.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 28 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 27. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 28:\n        return 1\n    elif h == 4 and x < 28:\n        return 0\n    elif x >= 28 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 28):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287786984, 'PYTHON', '', '1012', 'Антон Сибгатулин'),
(488, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 107. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 107 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 13 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;93.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 107:\n        return 1\n    elif h == 4 and x + y < 107:\n        return 0\n    elif x + y >= 107 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 94):\n    if f(x, 13, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287787377, 'PYTHON', '', '4046', 'Антон Сибгатулин'),
(489, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 36. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 36 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 35.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 36:\n        return 1\n    elif h == 4 and x < 36:\n        return 0\n    elif x >= 36 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 36):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287787580, 'PYTHON', '', '1516', 'Антон Сибгатулин'),
(490, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу 1 камень или 10 камней. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 41:\n        return 1\n    elif h == 4 and x < 41:\n        return 0\n    elif x >= 41 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 10, h + 1)  # стратегия проигравшего\nfor x in range(1, 41):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287787702, 'PYTHON', '', '2029', 'Антон Сибгатулин'),
(491, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 48. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 48 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 47. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 48:\n        return 1\n    elif h == 4 and x < 48:\n        return 0\n    elif x >= 48 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 48):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287787887, 'PYTHON', '', '2022', 'Антон Сибгатулин'),
(492, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в четыре раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (28,&thinsp;9), (7,&thinsp;10), (7,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 151. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 151 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 9 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;141.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 151:\n        return 1\n    elif h == 4 and x + y < 151:\n        return 0\n    elif x + y >= 151 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 4, y, h + 1) and f(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 142):\n    if f(x, 9, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287788033, 'PYTHON', '', '635', 'Антон Сибгатулин'),
(493, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в пять раз. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 50 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 200. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 201 или больше камней. В начальный момент в куче было S камней, 1 &le; S &le; 200.<p class=\"left_margin\">Говорят, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 201:\n        return 1\n    elif h == 4 and x < 201:\n        return 0\n    elif x >= 201 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\nfor x in range(1, 201):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287788158, 'PYTHON', '', '839', 'Антон Сибгатулин'),
(494, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 231. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 231 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 17 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;213.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Найдите два наименьших значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 231:\n        return 1\n    elif h == 4 and x + y < 231:\n        return 0\n    elif x + y >= 231 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 214):\n    if f(x, 17, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287788412, 'PYTHON', '', '98106', 'Антон Сибгатулин'),
(495, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может:<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>добавить в кучу один камень</b> (действие А) или<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>утроить количество камней в куче, а затем убрать из кучи 2 камня</b> (действие Б).<p class=\"left_margin\">Например, имея кучу из 20 камней, за один ход можно получить кучу из 21 камня или из 58 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 2 ≤ <i>S</i> ≤ 39.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 40:\n        return 1\n    elif h == 4 and x < 40:\n        return 0\n    elif x >= 40 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3 - 2, h + 1)  # стратегия проигравшего\nfor x in range(2, 40):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287788555, 'PYTHON', '', '512', 'Антон Сибгатулин'),
(496, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>добавить столько камней, сколько их в данный момент в другой куче</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (14,&thinsp;9), (5,&thinsp;10), (5,&thinsp;14). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 67. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 67 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 9 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;57.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 67:\n        return 1\n    elif h == 4 and x + y < 67:\n        return 0\n    elif x + y >= 67 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x + y, y, h + 1) and f(x, y + x, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 58):\n    if f(x, 9, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287788701, 'PYTHON', '', '1628', 'Антон Сибгатулин'),
(497, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который этот же игрок делал на предыдущем ходу. Повторять чужие ходы и свои более старые ходы разрешается.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил два камня), то следующим ходом Ваня может получить 6, 7 или 10 камней. Если Ваня добавил один камень и получил 6 камней, то вторым ходом Петя может получить 7 или 12 камней. Получить 8 камней Петя не может, так как для этого нужно добавить 2 камня, а Петя делал это на предыдущем ходу.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 21. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 21 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Укажите два значения <i>S</i>, при которых у Вани есть выигрышная стратегия, позволяющая ему выиграть вторым ходом при любой игре Пети, но у Вани нет стратегии, которая позволяла бы ему гарантированно выиграть первым ходом.<p class=\"left_margin\">В ответе запишите найденные значения в порядке возрастания: сначала меньшее, затем большее.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h, p, v):\n    if (h == 5 or h == 3) and x >= 21:\n        return 1\n    elif h == 5 and x < 21:\n        return 0\n    elif x >= 21 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            if h == 2:\n                return f(x + 1, h + 1, p, 1) or f(x + 2, h + 1, p, 2) or f(x * 2, h + 1, p, 3)   # стратегия победителя\n            elif h == 4:\n                if v == 1:\n                    return f(x + 2, h + 1, p, v) or f(x * 2, h + 1, p, v)\n                elif v == 2:\n                    return f(x + 1, h + 1, p, v) or f(x * 2, h + 1, p, v)\n                elif v == 3:\n                    return f(x + 1, h + 1, p, v) or f(x + 2, h + 1, p, v)\n        else:  # Петин ход\n            if h == 1:\n                return f(x + 1, h + 1, 1, v) and f(x + 2, h + 1, 2, v) and f(x * 2, h + 1, 3, v)  # стратегия победителя\n            elif h == 3:\n                if p == 1:\n                    return f(x + 2, h + 1, p, v) and f(x * 2, h + 1, p, v)\n                elif p == 2:\n                    return f(x + 1, h + 1, p, v) and f(x * 2, h + 1, p, v)\n                elif p == 3:\n                    return f(x + 1, h + 1, p, v) and f(x + 2, h + 1, p, v)\nfor x in range(1, 21):\n    if f(x, 1, 0, 0) == 1:\n        print(\"Задача 20:\", x)\n# Исключаем победу Вани только первым ходом\ndef f(x, h):\n    if h == 3 and x >= 21:\n        return 1\n    elif h == 3 and x < 21:\n        return 0\n    elif x >= 21 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 21):\n    if f(x, 1) == 1:\n        print(\"Победа Вани первым ходом:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287788852, 'PYTHON', '', '67', 'Антон Сибгатулин'),
(498, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 47:\n        return 1\n    elif h == 4 and x < 47:\n        return 0\n    elif x >= 47 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287788967, 'PYTHON', '', '2122', 'Антон Сибгатулин'),
(499, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень, или добавить в кучу три камня, или увеличить количество камней в куче в два раза.<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 13 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.  Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53. Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 54:\n        return 1\n    elif h == 4 and x < 54:\n        return 0\n    elif x >= 54 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287789148, 'PYTHON', '', '132325', 'Антон Сибгатулин'),
(500, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в 3 раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 30. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 30 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 29.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 30:\n        return 1\n    elif h == 4 and x < 30:\n        return 0\n    elif x >= 30 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 30):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287789282, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(501, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в пять раз. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 50 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 100. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 101 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 100.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 101:\n        return 1\n    elif h == 4 and x < 101:\n        return 0\n    elif x >= 101 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\nfor x in range(1, 101):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287789414, 'PYTHON', '', '419', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(502, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 40 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 20 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите три наименьших значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y, h):\n    if h == 4 and x + y <= 40:\n        return 1\n    elif h == 4 and x + y > 40:\n        return 0\n    elif x + y <= 40 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)   # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) and f(x, y - 1, h + 1) and f(x // 2 + x % 2, y, h + 1) and f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(20, 1000):\n    if f(x, 20, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287789558, 'PYTHON', '', '424361', 'Антон Сибгатулин'),
(503, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в <b>два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 29 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1&#8239;≤&#8239;<i>S</i>&#8239;≤ 28.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p> Найденные значения запишите в ответе в порядке возрастания.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 29:\n        return 1\n    elif h == 4 and x < 29:\n        return 0\n    elif x >= 29 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 29):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287789773, 'PYTHON', '', '713', 'Антон Сибгатулин'),
(504, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>четыре</b> камня или увеличить количество камней в куче<b> в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 70.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 70 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/4d/4dd8a3e37c2bde9ffbd7c46d9167adfe.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 69.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 4 and x >= 70:\n        return 1\n    elif h == 4 and x < 70:\n        return 0\n    elif x >= 70 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\nfor x in range(1, 70):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287789945, 'PYTHON', '', '912', 'Антон Сибгатулин'),
(505, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может: добавить в кучу один камень (действие А) или утроить количество камней в куче, а затем добавить ещё один камень (действие Б). Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 31 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится более 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 32 или больше камней. В начальный момент в куче было&#8239;S камней, 1 ≤ S ≤ 31.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 32:\n        return 1\n    elif h == 4 and x < 32:\n        return 0\n    elif x >= 32 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3 + 1, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3 + 1, h + 1)  # стратегия проигравшего\nfor x in range(1, 32):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287790063, 'PYTHON', '', '39', 'Антон Сибгатулин'),
(506, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может:<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>добавить в кучу один камень</b> (действие А) или<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>утроить количество камней в куче, а затем убрать из кучи 2 камня</b> (действие Б).<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 28 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 30. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 2 ≤ <i>S</i> ≤ 30.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 31:\n        return 1\n    elif h == 4 and x < 31:\n        return 0\n    elif x >= 31 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3 - 2, h + 1)  # стратегия проигравшего\nfor x in range(2, 31):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287790234, 'PYTHON', '', '49', 'Антон Сибгатулин'),
(507, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 86. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 86 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 14 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 86:\n        return 1\n    elif h == 4 and x + y < 86:\n        return 0\n    elif x + y >= 86 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 72):\n    if f(x, 14, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287790380, 'PYTHON', '', '2835', 'Антон Сибгатулин'),
(508, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 33. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 33 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 32.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 33:\n        return 1\n    elif h == 4 and x < 33:\n        return 0\n    elif x >= 33 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 33):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287790518, 'PYTHON', '', '81315', 'Антон Сибгатулин'),
(509, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 35 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤34.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 35:\n        return 1\n    elif h == 4 and x < 35:\n        return 0\n    elif x >= 35 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287790666, 'PYTHON', '', '1516', 'Антон Сибгатулин'),
(510, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 36.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите максимальное <i>S</i>, при котором у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p><!--Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 47:\n        return 1\n    elif h == 4 and x + y < 47:\n        return 0\n    elif x + y >= 47 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) and f(x + 2, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 37):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287790861, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(511, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя.  За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 76. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 76 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 75.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 76:\n        return 1\n    elif h == 4 and x < 76:\n        return 0\n    elif x >= 76 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 76):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287791018, 'PYTHON', '', '2324', 'Антон Сибгатулин'),
(512, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в шесть раз</b>. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 60 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 365. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 366 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 365.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 366:\n        return 1\n    elif h == 4 and x < 366:\n        return 0\n    elif x >= 366 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 6, h + 1)  # стратегия проигравшего\nfor x in range(1, 366):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287791290, 'PYTHON', '', '1059', 'Антон Сибгатулин'),
(513, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 93. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 93 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;80.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите все значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 93:\n        return 1\n    elif h == 4 and x + y < 93:\n        return 0\n    elif x + y >= 93 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 81):\n    if f(x, 12, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287791454, 'PYTHON', '', '203439', 'Антон Сибгатулин'),
(514, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 41.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 камень или больше.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 41:\n        return 1\n    elif h == 4 and x < 41:\n        return 0\n    elif x >= 41 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 41):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287791642, 'PYTHON', '', '912', 'Антон Сибгатулин'),
(515, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 39 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 38.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 39:\n        return 1\n    elif h == 4 and x < 39:\n        return 0\n    elif x >= 39 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 19):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287791820, 'PYTHON', '', '1718', 'Антон Сибгатулин'),
(516, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 44. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 44 или больше камней. В начальный момент в куче было S камней, 1 &le; S &le; 43.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 44:\n        return 1\n    elif h == 4 and x < 44:\n        return 0\n    elif x >= 44 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 44):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287791963, 'PYTHON', '', '1920', 'Антон Сибгатулин'),
(517, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>четыре</b> камня или увеличить количество камней в куче<b> в два раза</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 48.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 48 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/69/69a7d118d912871bddf7fddb9dbccf59.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 47.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 4 and x >= 48:\n        return 1\n    elif h == 4 and x < 48:\n        return 0\n    elif x >= 48 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # сратегия проигравшего\nfor x in range(1, 48):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287792135, 'PYTHON', '', '1922', 'Антон Сибгатулин'),
(518, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень либо увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 26.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 26 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 25.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может<p>выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 4 and x >= 26:\n        return 1\n    elif h == 4 and x < 26:\n        return 0\n    elif x >= 26 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 26):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287792258, 'PYTHON', '', '611', 'Антон Сибгатулин'),
(519, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в четыре раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 40 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 64.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 65:\n        return 1\n    elif h == 4 and x < 65:\n        return 0\n    elif x >= 65 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 4, h + 1)  # стратегия проигравшего\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287792383, 'PYTHON', '', '415', 'Антон Сибгатулин'),
(520, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 129. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу из 129 или больше камней. <p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1&#8239;≤&#8239;<i>S</i>&#8239;≤ 128.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. <p class=\"left_margin\">Найдите два наименьших значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 129:\n        return 1\n    elif h == 4 and x < 129:\n        return 0\n    elif x >= 129 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 129):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287792508, 'PYTHON', '', '3263', 'Антон Сибгатулин'),
(521, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 88. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 88 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите все значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 88:\n        return 1\n    elif h == 4 and x + y < 88:\n        return 0\n    elif x + y >= 88 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 72):\n    if f(x, 6, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287792679, 'PYTHON', '', '92326', 'Антон Сибгатулин'),
(522, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 65:\n        return 1\n    elif h == 4 and x < 65:\n        return 0\n    elif x >= 65 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287792820, 'PYTHON', '', '720', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(523, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><b>добавить в кучу один камень</b>, или<p class=\"left_margin\"><b>добавить в кучу три камня</b>, или<p class=\"left_margin\"><b>увеличить количество камней в куче в два раза.</b><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 13 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 49. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 50 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 49.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 50:\n        return 1\n    elif h == 4 and x < 50:\n        return 0\n    elif x >= 50 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 50):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287792961, 'PYTHON', '', '122123', 'Антон Сибгатулин'),
(524, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>добавить столько камней, сколько их в данный момент в другой куче</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (14,&thinsp;9), (5,&thinsp;10), (5,&thinsp;14). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 75. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 75 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 7 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 75:\n        return 1\n    elif h == 4 and x + y < 75:\n        return 0\n    elif x + y >= 75 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x + y, y, h + 1) and f(x, y + x, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 68):\n    if f(x, 7, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287793152, 'PYTHON', '', '2033', 'Антон Сибгатулин'),
(525, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в четыре раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (28,&thinsp;9), (7,&thinsp;10), (7,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 91. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 91 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;85.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 91:\n        return 1\n    elif h == 4 and x + y < 91:\n        return 0\n    elif x + y >= 91 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 4, y, h + 1) and f(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 86):\n    if f(x, 5, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287793388, 'PYTHON', '', '1021', 'Антон Сибгатулин'),
(526, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 36. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 36 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 35.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 36:\n        return 1\n    elif h == 4 and x < 36:\n        return 0\n    elif x >= 36 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 31):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287793519, 'PYTHON', '', '1516', 'Антон Сибгатулин'),
(527, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 43. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 43 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 42.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 43:\n        return 1\n    elif h == 4 and x < 43:\n        return 0\n    elif x >= 43 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 43):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287793661, 'PYTHON', '', '1920', 'Антон Сибгатулин'),
(528, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 45. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 45 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 45:\n        return 1\n    elif h == 4 and x + y < 45:\n        return 0\n    elif x + y >= 45 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 41):\n    if f(x, 4, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287793812, 'PYTHON', '', '813', 'Антон Сибгатулин'),
(529, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Паша и Вася, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Паша. За один ход игрок может добавить в кучу <b>один или четыре камня</b> или увеличить количество камней в куче <b>в пять раз</b>. Игра завершается в тот момент, когда количество камней в куче становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 69 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 68.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Паши есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Паша не может выиграть за один ход;<p class=\"left_margin\">— Паша может выиграть своим вторым ходом независимо от того, как будет ходить Вася.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 4 and x >= 68:\n        return 1\n    elif h == 4 and x < 68:\n        return 0\n    elif x >= 68 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 5, h + 1)  # сратегия проигравшего\nfor x in range(1, 68):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287793944, 'PYTHON', '', '912', 'Антон Сибгатулин'),
(530, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или пять камней или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 20 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 42.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 42 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 42:\n        return 1\n    elif h == 4 and x < 42:\n        return 0\n    elif x >= 42 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 5, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 5, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287794087, 'PYTHON', '', '812', 'Антон Сибгатулин'),
(531, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один или четыре</b> камня либо увеличить количество камней в куче <b>в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 63. <p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 63 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 62.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 4 and x >= 63:\n        return 1\n    elif h == 4 and x < 63:\n        return 0\n    elif x >= 63 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\nfor x in range(1, 63):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287794211, 'PYTHON', '', '811', 'Антон Сибгатулин'),
(532, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 69 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 58.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 69:\n        return 1\n    elif h == 4 and x + y < 69:\n        return 0\n    elif x + y >= 69 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x, y * 2, h + 1) and f(x * 3, y, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 59):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287794370, 'PYTHON', '', '1619', 'Антон Сибгатулин'),
(533, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в шесть раз</b>. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 60 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 361. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 362 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 360.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 361:\n        return 1\n    elif h == 4 and x < 361:\n        return 0\n    elif x >= 361 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 6, h + 1)  # стратегия проигравшего\nfor x in range(1, 361):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287794495, 'PYTHON', '', '1059', 'Антон Сибгатулин'),
(534, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 64 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;63.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём Петя не может выиграть первым ходом, но может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 64:\n        return 1\n    elif h == 4 and x < 64:\n        return 0\n    elif x >= 64 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 64):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287794629, 'PYTHON', '', '720', 'Антон Сибгатулин'),
(535, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в четыре раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 40 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 80. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 81 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 80.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 81:\n        return 1\n    elif h == 4 and x < 81:\n        return 0\n    elif x >= 81 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 4, h + 1)  # стратегия проигравшего\nfor x in range(1, 81):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287794799, 'PYTHON', '', '519', 'Антон Сибгатулин'),
(536, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤46. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 47:\n        return 1\n    elif h == 4 and x < 47:\n        return 0\n    elif x >= 47 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287794945, 'PYTHON', '', '514', 'Антон Сибгатулин'),
(537, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 98. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 98 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 97.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 98:\n        return 1\n    elif h == 4 and x < 98:\n        return 0\n    elif x >= 98 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 98):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287795088, 'PYTHON', '', '2447', 'Антон Сибгатулин'),
(538, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 65:\n        return 1\n    elif h == 4 and x < 65:\n        return 0\n    elif x >= 65 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287795255, 'PYTHON', '', '1631', 'Антон Сибгатулин'),
(539, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 69 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤68. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 69:\n        return 1\n    elif h == 4 and x < 69:\n        return 0\n    elif x >= 69 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 69):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287795377, 'PYTHON', '', '1733', 'Антон Сибгатулин'),
(540, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 22. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 22 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 21.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника. <p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 22:\n        return 1\n    elif h == 4 and x < 22:\n        return 0\n    elif x >= 22 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 22):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287795522, 'PYTHON', '', '59', 'Антон Сибгатулин'),
(541, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 46. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;45.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём Петя не может выиграть первым ходом, но может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 46:\n        return 1\n    elif h == 4 and x < 46:\n        return 0\n    elif x >= 46 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287796076, 'PYTHON', '', '514', 'Антон Сибгатулин'),
(542, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 106. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 106 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 105.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 106:\n        return 1\n    elif h == 4 and x < 106:\n        return 0\n    elif x >= 106 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 106):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287796700, 'PYTHON', '', '2651', 'Антон Сибгатулин'),
(543, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один или четыре</b> камня либо увеличить количество камней в куче <b>в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 68. <p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 68 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 4 and x >= 68: \n        return 1\n    elif h == 4 and x < 68:\n        return 0\n    elif x >= 68 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\nfor x in range(1, 68):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287796932, 'PYTHON', '', '912', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(544, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит  куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 35 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 34. Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 35:\n        return 1\n    elif h == 4 and x < 35:\n        return 0\n    elif x >= 35 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287797086, 'PYTHON', '', '1416', 'Антон Сибгатулин'),
(545, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 39.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 40:\n        return 1\n    elif h == 4 and x < 40:\n        return 0\n    elif x >= 40 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 40):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287797245, 'PYTHON', '', '1718', 'Антон Сибгатулин'),
(546, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>добавить в кучу два камня</b> или<p><b>увеличить количество камней в куче в два раза.</b></center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 37. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 38 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 37.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 38:\n        return 1\n    elif h == 4 and x < 38:\n        return 0\n    elif x >= 38 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 38):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287797474, 'PYTHON', '', '91617', 'Антон Сибгатулин'),
(547, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 82. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 82 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;77.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y >= 82:\n        return 1\n    elif h == 4 and x + y < 82:\n        return 0\n    elif x + y >= 82 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 4, y, h + 1) and f(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 78):\n    if f(x, 4, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287797651, 'PYTHON', '', '1619', 'Антон Сибгатулин'),
(548, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 51. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 51 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 50. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 51:\n        return 1\n    elif h == 4 and x < 51:\n        return 0\n    elif x >= 51 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 51):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287797827, 'PYTHON', '', '1415', 'Антон Сибгатулин'),
(549, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней.   В начальный момент в куче было S камней, 1&#8239;≤&#8239;S ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 65:\n        return 1\n    elif h == 4 and x < 65:\n        return 0\n    elif x >= 65 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287797960, 'PYTHON', '', '71920', 'Антон Сибгатулин'),
(550, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 77 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;68.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите все значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 4 and x + y >= 77:\n        return 1\n    elif h == 4 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 69):\n    if f(x, 8, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287798133, 'PYTHON', '', '173033', 'Антон Сибгатулин'),
(551, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень меньше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 4).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите пять таких значений <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 4 and x + y <= 20:\n        return 1\n    elif h == 4 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2, y, h + 1) or f(x, y // 2, h + 1)   # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) and f(x, y - 1, h + 1) and f(x // 2, y, h + 1) and f(x, y // 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(10, 1000):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 20:\", x)\n</code>', 16, 0, 0, 0, 0, 1671287798295, 'PYTHON', '', '2324324445', 'Антон Сибгатулин'),
(552, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней.  Игроки ходят по очереди, первый ход делает Петя. За один ход  игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 74. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 74 или больше камней.  В начальный момент в куче было S камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;73. <p> <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите три таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 74:\n        return 1\n    elif h == 4 and x < 74:\n        return 0\n    elif x >= 74 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\nfor x in range(1, 74):\n    if f(x, 1) == 1:\n        print(\"Задача 20: \", x)\n</code>', 16, 0, 0, 0, 0, 1671287798503, 'PYTHON', '', '82223', 'Антон Сибгатулин'),
(553, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 102. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 102 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней; 1 ≤ S ≤ 101.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Найдите два таких значения <i>S</i>, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:<p class=\"left_margin\">— Петя не может выиграть за один ход;<p class=\"left_margin\">— Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.<p class=\"left_margin\">Найденные значения запишите в ответе в порядке возрастания без разделительных знаков.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 4 and x >= 102:\n        return 1\n    elif h == 4 and x < 102:\n        return 0\n    elif x >= 102 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\nfor x in range(1, 102):\n    if f(x, 1) == 1:\n        print(x)\n</code>', 16, 0, 0, 0, 0, 1671287798699, 'PYTHON', '', '2549', 'Антон Сибгатулин'),
(554, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который этот же игрок делал на предыдущем ходу. Повторять чужие ходы и свои более старые ходы разрешается.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил два камня), то следующим ходом Ваня может получить 6, 7 или 10 камней. Если Ваня добавил один камень и получил 6 камней, то вторым ходом Петя может получить 7 или 12 камней. Получить 8 камней Петя не может, так как для этого нужно добавить 2 камня, а Петя делал это на предыдущем ходу.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 29 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;28.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Укажите два значения <i>S</i>, при которых у Вани есть выигрышная стратегия, позволяющая ему выиграть вторым ходом при любой игре Пети, но у Вани нет стратегии, которая позволяла бы ему гарантированно выиграть первым ходом.<p class=\"left_margin\">В ответе запишите найденные значения в порядке возрастания: сначала меньшее, затем большее.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h, p, v):\n    if (h == 5 or h == 3) and x >= 29:\n        return 1\n    elif h == 5 and x < 29:\n        return 0\n    elif x >= 29 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            if h == 2:\n                return f(x + 1, h + 1, p, 1) or f(x + 2, h + 1, p, 2) or f(x * 2, h + 1, p, 3)   # стратегия победителя\n            elif h == 4:\n                if v == 1:\n                    return f(x + 2, h + 1, p, v) or f(x * 2, h + 1, p, v)\n                elif v == 2:\n                    return f(x + 1, h + 1, p, v) or f(x * 2, h + 1, p, v)\n                elif v == 3:\n                    return f(x + 1, h + 1, p, v) or f(x + 2, h + 1, p, v)\n        else:  # Петин ход\n            if h == 1:\n                return f(x + 1, h + 1, 1, v) and f(x + 2, h + 1, 2, v) and f(x * 2, h + 1, 3, v)  # стратегия победителя\n            elif h == 3:\n                if p == 1:\n                    return f(x + 2, h + 1, p, v) and f(x * 2, h + 1, p, v)\n                elif p == 2:\n                    return f(x + 1, h + 1, p, v) and f(x * 2, h + 1, p, v)\n                elif p == 3:\n                    return f(x + 1, h + 1, p, v) and f(x + 2, h + 1, p, v)\nfor x in range(1, 29):\n    if f(x, 1, 0, 0) == 1:\n        print(\"Задача 20:\", x)\n# Исключаем победу Вани только первым ходом\ndef f(x, h):\n    if h == 3 and x >= 29:\n        return 1\n    elif h == 3 and x < 29:\n        return 0\n    elif x >= 29 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\n</code>', 16, 0, 0, 0, 0, 1671287798956, 'PYTHON', '', '1011', 'Антон Сибгатулин'),
(555, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать<p>ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 69 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 58.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 69:\n        return 1\n    elif h == 3 and x + y < 69:\n        return 0\n    elif x + y >= 69 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 59):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287799086, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(556, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 94. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 94 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 93.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 94:\n        return 1\n    elif h == 3 and x < 94:\n        return 0\n    elif x >= 94 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 94):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287799895, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(557, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 35 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤34.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 35:\n        return 1\n    elif h == 3 and x < 35:\n        return 0\n    elif x >= 35 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287800058, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(558, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень меньше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 4).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение <i>S</i>, когда такая ситуация возможна.<p><!--Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y <= 20:\n        return 1\n    elif h == 3 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2, y, h + 1) or f(x, y // 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2, y, h + 1) or f(x, y // 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(100, 10, -1):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287800196, 'PYTHON', '', '43', 'Антон Сибгатулин'),
(559, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 54:\n        return 1\n    elif h == 3 and x < 54:\n        return 0\n    elif x >= 54 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287800323, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(560, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 93. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 93 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;80.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 93:\n        return 1\n    elif h == 3 and x + y < 93:\n        return 0\n    elif x + y >= 93 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 81):\n    if f(x, 12, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287800498, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(561, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>добавить столько камней, сколько их в данный момент в другой куче</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (14,&thinsp;9), (5,&thinsp;10), (5,&thinsp;14). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 75. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 75 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 7 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 75:\n        return 1\n    elif h == 3 and x + y < 75:\n        return 0\n    elif x + y >= 75 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 68):\n    if f(x, 7, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287800646, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(562, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень, добавить в кучу четыре камня, или увеличить количество камней в куче в 2 раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 52. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 52 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 51. <p> <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 52:\n        return 1\n    elif h == 3 and x < 52:\n        return 0\n    elif x >= 52 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 52):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287800787, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(563, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 40 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 20 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение <i>S</i>, когда такая ситуация возможна.<p><!--Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y <= 40:\n        return 1\n    elif h == 3 and x + y > 40:\n        return 0\n    elif x + y <= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(100, 20, -1):\n    if f(x, 20, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287800907, 'PYTHON', '', '80', 'Антон Сибгатулин'),
(564, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 33. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 33 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 32.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 33:\n        return 1\n    elif h == 3 and x < 33:\n        return 0\n    elif x >= 33 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 33):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287801025, 'PYTHON', '', '9', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(565, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 74. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 74 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 74:\n        return 1\n    elif h == 3 and x + y < 74:\n        return 0\n    elif x + y >= 74 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 62):\n    if f(x, 12, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287801156, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(566, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень либо увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 26.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 26 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 25.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может<p>выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 26:\n        return 1\n    elif h == 3 and x < 26:\n        return 0\n    elif x >= 26 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 26):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287801302, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(567, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 79. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 79 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;72.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 79:\n        return 1\n    elif h == 3 and x + y < 79:\n        return 0\n    elif x + y >= 79 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 73):\n    if f(x, 6, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287801463, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(568, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один или четыре</b> камня либо увеличить количество камней в куче <b>в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 68. <p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 68 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h): \n    if h == 3 and x >= 68:\n        return 1\n    elif h == 3 and x < 68:\n        return 0\n    elif x >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n             return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 68):\n    if f(x, 1) == 1: \n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287801586, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(569, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 22. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 22 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 21.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 22:\n        return 1\n    elif h == 3 and x < 22:\n        return 0\n    elif x >= 22 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 22):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287801711, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(570, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 88. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 88 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 88:\n        return 1\n    elif h == 3 and x + y < 88:\n        return 0\n    elif x + y >= 88 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 72):\n    if f(x, 6, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287801842, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(571, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который только что сделал второй игрок.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил 2 камня), то следующим ходом Ваня может получить 6 или 10 камней. Получить 7 камней Ваня не может, так как для этого нужно добавить 2 камня, а такой ход только что сделал Петя.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. Игра завершается, когда количество камней в куче становится не менее 50. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 50 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;49.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Укажите такое значение <i>S</i>, при котором Петя не может выиграть за один ход, но при любом ходе Пети Ваня может выиграть своим первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h, m):\n    if h == 3 and x >= 50:\n        return 1\n    elif h == 3 and x < 50:\n        return 0\n    elif x >= 50 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            if h == 2:\n                if m == 1:\n                    return f(x + 2, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 2:\n                    return f(x + 1, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 3:\n                    return f(x + 1, h + 1, m) or f(x + 2, h + 1, m)\n        else:\n            return f(x + 1, h + 1, 1) and f(x + 2, h + 1, 2) and f(x * 2, h + 1, 3)\nfor x in range(1, 50):\n    if f(x, 1, 0) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287801961, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(572, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 62. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 62 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 51.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 62:\n        return 1\n    elif h == 3 and x + y < 62:\n        return 0\n    elif x + y >= 62 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 52):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287802116, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(573, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 46. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.  В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287802271, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(574, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в четыре раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (28,&thinsp;9), (7,&thinsp;10), (7,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 151. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 151 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 9 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;141.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 151:\n        return 1\n    elif h == 3 and x + y < 151:\n        return 0\n    elif x + y >= 151 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 142):\n    if f(x, 9, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287802419, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(575, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может: добавить в кучу один камень (действие А) или утроить количество камней в куче, а затем добавить ещё один камень (действие Б). Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 31 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится более 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 32 или больше камней. В начальный момент в куче было&#8239;S камней, 1 ≤ S ≤ 31.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 32:\n        return 1\n    elif h == 3 and x < 32:\n        return 0\n    elif x >= 32 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 + 1, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3 + 1, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 32):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287802555, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(576, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 50. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 50 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 50:\n        return 1\n    elif h == 3 and x + y < 50:\n        return 0\n    elif x + y >= 50 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 42):\n    if f(x, 8, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287802712, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(577, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 24. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 24 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 23.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 24:\n        return 1\n    elif h == 3 and x < 24:\n        return 0\n    elif x >= 24 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 24):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287802872, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(578, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 41 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 32.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 41:\n        return 1\n    elif h == 3 and x + y < 41:\n        return 0\n    elif x + y >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 33):\n    if f(x, 8, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287803108, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(579, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 75. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 75 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 74.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 75:\n        return 1\n    elif h == 3 and x < 75:\n        return 0\n    elif x >= 75 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 75):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287803339, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(580, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре будем обозначать (10,&thinsp;5). Тогда за один ход можно получить любую из четырёх позиций: (11,&thinsp;5), (20,&thinsp;5), (10,&thinsp;6), (10,&thinsp;10). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было семь камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;69.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 77:\n        return 1\n    elif h == 3 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 70):\n    if f(x, 7, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287803562, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(581, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 36.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 47:\n        return 1\n    elif h == 3 and x + y < 47:\n        return 0\n    elif x + y >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 37):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287803764, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(582, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Паша и Вася, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Паша. За один ход игрок может добавить в кучу <b>один или четыре камня</b> или увеличить количество камней в куче <b>в пять раз</b>. Игра завершается в тот момент, когда количество камней в куче становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 69 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 68.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Вася выиграл своим первым ходом после неудачного первого хода Паши. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 68:\n        return 1\n    elif h == 3 and x < 68:\n        return 0\n    elif x >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 68):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287803908, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(583, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 45. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287804054, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(584, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 82. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 82 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;77.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 82:\n        return 1\n    elif h == 3 and x + y < 82:\n        return 0\n    elif x + y >= 82 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 78):\n    if f(x, 4, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287804342, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(585, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 56. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 56 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 55.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 56:\n        return 1\n    elif h == 3 and x < 56:\n        return 0\n    elif x >= 56 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 56):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287804475, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(586, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 49. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 49 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;43.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 49:\n        return 1\n    elif h == 3 and x + y < 49:\n        return 0\n    elif x + y >= 49 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 44):\n    if f(x, 5, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287804648, 'PYTHON', '', '4', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(587, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может:<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>добавить в кучу один камень</b> (действие А) или<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>утроить количество камней в куче, а затем убрать из кучи 2 камня</b> (действие Б).<p class=\"left_margin\">Например, имея кучу из 20 камней, за один ход можно получить кучу из 21 камня или из 58 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 2 ≤ <i>S</i> ≤ 39.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 40:\n        return 1\n    elif h == 3 and x < 40:\n        return 0\n    elif x >= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(2, 40):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287804784, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(588, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 61. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 61 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 3 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;57.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 61:\n        return 1\n    elif h == 3 and x + y < 61:\n        return 0\n    elif x + y >= 61 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 58):\n    if f(x, 3, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287804931, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(589, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 107. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 107 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 13 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;93.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 107:\n        return 1\n    elif h == 3 and x + y < 107:\n        return 0\n    elif x + y >= 107 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 94):\n    if f(x, 13, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287805076, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(590, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>три</b> камня или увеличить количество камней в куче<b> в два раза</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 42.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 42 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/95/95771c792d87fefe8ea16e0cf759e65a.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 41.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 42:\n        return 1\n    elif h == 3 and x < 42:\n        return 0\n    elif x >= 42 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n             return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия проигравшего(неудачный ход)\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287805213, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(591, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 69 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤68. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 69:\n        return 1\n    elif h == 3 and x < 69:\n        return 0\n    elif x >= 69 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 69):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287805365, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(592, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 45. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 45 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 45:\n        return 1\n    elif h == 3 and x + y < 45:\n        return 0\n    elif x + y >= 45 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 41):\n    if f(x, 4, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287805520, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(593, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>три</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 38. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 38 или больше камней. В начальный момент в куче было S камней, 1 ≤ <i>S</i> ≤ 37.<p class=\"left_margin\">Будем говорить, что игрок имеет <b><i>выигрышную стратегию</b></i>, если он может выиграть при любых ходах противника. Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 38:\n        return 1\n    elif h == 3 and x < 38:\n        return 0\n    elif x >= 38 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 38):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287805662, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(594, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 231. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 231 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 17 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;213.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 231:\n        return 1\n    elif h == 3 and x + y < 231:\n        return 0\n    elif x + y >= 231 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 214):\n    if f(x, 17, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287805779, 'PYTHON', '', '54', 'Антон Сибгатулин'),
(595, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 41.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 камень или больше.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 41:\n        return 1\n    elif h == 5 and x < 41:\n        return 0\n    elif x >= 41 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 41:\n        return 1\n    elif h == 3 and x < 41:\n        return 0\n    elif x >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 41):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 41):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287828515, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(596, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>три</b> камня или увеличить количество камней в куче<b> в два раза</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 42.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 42 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/95/95771c792d87fefe8ea16e0cf759e65a.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 41.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 42:\n        return 1\n    elif h == 5 and x < 42:\n        return 0\n    elif x >= 42 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 42:\n        return 1\n    elif h == 3 and x < 42:\n        return 0\n    elif x >= 42 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 3, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 3, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 42):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287828780, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(597, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который этот же игрок делал на предыдущем ходу. Повторять чужие ходы и свои более старые ходы разрешается.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил два камня), то следующим ходом Ваня может получить 6, 7 или 10 камней. Если Ваня добавил один камень и получил 6 камней, то вторым ходом Петя может получить 7 или 12 камней. Получить 8 камней Петя не может, так как для этого нужно добавить 2 камня, а Петя делал это на предыдущем ходу.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 21. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 21 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Найдите наибольшее значение <i>S</i>, при котором у Пети есть выигрышная стратегия, позволяющая ему выиграть третьим ходом при любой игре Вани, но у Пети нет стратегии, которая позволяла бы ему гарантированно выиграть первым или вторым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \n# Победа Пети первым или вторым, или третьим ходом\ndef f(x, h, p, v):\n    if (h == 2 or h == 4 or h == 6) and x >= 21:\n        return 1\n    elif h == 6 and x < 21:\n        return 0\n    elif x >= 21 and h < 6:\n        return 0\n    else:\n        if h % 2 == 0:\n            if h == 2:\n                return f(x + 1, h + 1, p, 1) and f(x + 2, h + 1, p, 2) and f(x * 2, h + 1, p, 3)   # стратегия проигравшего\n            elif h == 4:\n                if v == 1:\n                    return f(x + 2, h + 1, p, v) and f(x * 2, h + 1, p, v)\n                elif v == 2:\n                    return f(x + 1, h + 1, p, v) and f(x * 2, h + 1, p, v)\n                elif v == 3:\n                    return f(x + 1, h + 1, p, v) and f(x + 2, h + 1, p, v)\n        else:  # Петин ход\n            if h == 1:\n                return f(x + 1, h + 1, 1, v) or f(x + 2, h + 1, 2, v) or f(x * 2, h + 1, 3, v)  # стратегия победителя\n            elif h == 3:\n                if p == 1:\n                    return f(x + 2, h + 1, 2, v) or f(x * 2, h + 1, 3, v)\n                elif p == 2:\n                    return f(x + 1, h + 1, 1, v) or f(x * 2, h + 1, 3, v)\n                elif p == 3:\n                    return f(x + 1, h + 1, 1, v) or f(x + 2, h + 1, 2, v)\n            elif h == 5:\n                if p == 1:\n                    return f(x + 2, h + 1, p, v) or f(x * 2, h + 1, p, v)\n                elif p == 2:\n                    return f(x + 1, h + 1, p, v) or f(x * 2, h + 1, p, v)\n                elif p == 3:\n                    return f(x + 1, h + 1, p, v) or f(x + 2, h + 1, p, v)\nfor x in range(1, 21):\n    if f(x, 1, 0, 0) == 1:\n        print(\"Задача 21:\", x)\n# Исключаем победу Пети только первым ходом\ndef f(x, h):\n    if h == 2 and x >= 21:\n        return 1\n    elif h == 2 and x < 21:\n        return 0\n    elif x >= 21 and h < 2:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 21):\n    if f(x, 1) == 1:\n        print(\"Победа Пети первым ходом:\", x)\n# Победа Пети вторым ходом\ndef f(x, h, m):\n    if h == 4 and x >= 21:\n        return 1\n    elif h == 4 and x < 21:\n        return 0\n    elif x >= 21 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            if h == 1:\n                return f(x + 1, h + 1, 1) or f(x + 2, h + 1, 2) or f(x * 2, h + 1, 3)  # стратегия победителя\n            elif h == 3:\n                if m == 1:\n                    return f(x + 2, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 2:\n                    return f(x + 1, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 3:\n                    return f(x + 1, h + 1, m) or f(x + 2, h + 1, m)\n        else:\n            return f(x + 1, h + 1, m) and f(x + 2, h + 1, m) and f(x * 2, h + 1,  m)\nfor x in range(1, 21):\n    if f(x, 1, 0) == 1:\n        print(\"Победа Пети вторым ходом:\", x)\n</code>', 17, 0, 0, 0, 0, 1671287829120, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(598, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень либо увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 26.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 26 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 25.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может<p>выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 26:\n        return 1\n    elif h == 5 and x < 26:\n        return 0\n    elif x >= 26 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 26:\n        return 1\n    elif h == 3 and x < 26:\n        return 0\n    elif x >= 26 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 26):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 26):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287829282, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(599, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите максимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.<p><!--Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y <= 20:\n        return 1\n    elif h == 5 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) and f(x, y - 1, h + 1) and f(x // 2 + x % 2, y, h + 1) and f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y <= 20:\n        return 1\n    elif h == 3 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x - 1, y, h + 1) or f1(x, y - 1, h + 1) or f1(x // 2 + x % 2, y, h + 1) or f1(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x - 1, y, h + 1) and f1(x, y - 1, h + 1) and f1(x // 2 + x % 2, y, h + 1) and f1(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(10, 100):\n    if f(x, 10, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(10, 100):\n    if f1(x, 10, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287829433, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(600, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 39 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 38.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 39:\n        return 1\n    elif h == 5 and x < 39:\n        return 0\n    elif x >= 39 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 39:\n        return 1\n    elif h == 3 and x < 39:\n        return 0\n    elif x >= 39 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 39):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 39):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287829551, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(601, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 65:\n        return 1\n    elif h == 5 and x < 65:\n        return 0\n    elif x >= 65 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 65):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287829723, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(602, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 50. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 50 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 50:\n        return 1\n    elif h == 5 and x + y < 50:\n        return 0\n    elif x + y >= 50 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 50:\n        return 1\n    elif h == 3 and x + y < 50:\n        return 0\n    elif x + y >= 50 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 42):\n    if f(x, 8, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 42):\n    if f1(x, 8, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287829878, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(603, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в четыре раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 40 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 80. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 81 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 80.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 81:\n        return 1\n    elif h == 5 and x < 81:\n        return 0\n    elif x >= 81 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 4, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 81:\n        return 1\n    elif h == 3 and x < 81:\n        return 0\n    elif x >= 81 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 81):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 81):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287830184, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(604, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней.   В начальный момент в куче было S камней, 1&#8239;≤&#8239;S ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 65:\n        return 1\n    elif h == 5 and x < 65:\n        return 0\n    elif x >= 65 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # сратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 65):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287830765, 'PYTHON', '', '18', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(605, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 93. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 93 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;80.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите максимальное значение <i>S</i>, при котором у Вани есть выигрышная стратегия, позволяющая ему выиграть при любой игре Пети.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 93:\n        return 1\n    elif h == 5 and x + y < 93:\n        return 0\n    elif x + y >= 93 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # сратегия проигравшего(любой ход)\nfor x in range(1, 81):\n    if f(x, 12, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287831105, 'PYTHON', '', '40', 'Антон Сибгатулин'),
(606, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 77 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;68.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите максимальное значение <i>S</i>, при котором у Вани есть выигрышная стратегия, позволяющая ему выиграть при любой игре Пети.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 77:\n        return 1\n    elif h == 5 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # сратегия проигравшего(любой ход)\nfor x in range(1, 69):\n    if f(x, 8, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287831806, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(607, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 39.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня имеет выигрышную стратегию за один или два хода, при этом не имеет выигрышной стратегии в один ход. Найдите минимальное значение <i>S</i>, при котором это возможно.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 40:\n        return 1\n    elif h == 5 and x < 40:\n        return 0\n    elif x >= 40 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 40:\n        return 1\n    elif h == 3 and x < 40:\n        return 0\n    elif x >= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 40):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 40):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287832225, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(608, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.  <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 27. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 27 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 26. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 27:\n        return 1\n    elif h == 5 and x < 27:\n        return 0\n    elif x >= 27 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 27:\n        return 1\n    elif h == 3 and x < 27:\n        return 0\n    elif x >= 27 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 27):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 27):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287832484, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(609, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 79. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 79 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;72.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите максимальное значение <i>S</i>, при котором у Вани есть выигрышная стратегия, позволяющая ему выиграть при любой игре Пети.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 79:\n        return 1\n    elif h == 5 and x + y < 79:\n        return 0\n    elif x + y >= 79 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # сратегия проигравшего(любой ход)\nfor x in range(1, 73):\n    if f(x, 6, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287832673, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(610, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один или четыре</b> камня либо увеличить количество камней в куче <b>в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 68. <p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 68 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 68:\n        return 1\n    elif h == 5 and x < 68:\n        return 0\n    elif x >= 68 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 68:\n        return 1\n    elif h == 3 and x < 68:\n        return 0 \n    elif x >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f1(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f1(x * 5, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 68):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 68):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287832837, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(611, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 29 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 28. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 29:\n        return 1\n    elif h == 5 and x < 29:\n        return 0\n    elif x >= 29 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 29:\n        return 1\n    elif h == 3 and x < 29:\n        return 0\n    elif x >= 29 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 29):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 29):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287832970, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(612, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в четыре раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 40 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 64.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 65:\n        return 1\n    elif h == 5 and x < 65:\n        return 0\n    elif x >= 65 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 4, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 65):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287833177, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(613, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 46. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.  В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 46:\n        return 1\n    elif h == 5 and x < 46:\n        return 0\n    elif x >= 46 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 46):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287833447, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(614, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 49. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 49 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;43.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 49:\n        return 1\n    elif h == 5 and x + y < 49:\n        return 0\n    elif x + y >= 49 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 49:\n        return 1\n    elif h == 3 and x + y < 49:\n        return 0\n    elif x + y >= 49 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 3, y, h + 1) or f1(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 3, y, h + 1) and f1(x, y * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 44):\n    if f(x, 5, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 44):\n    if f1(x, 5, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287833796, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(615, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень, или добавить в кучу три камня, или увеличить количество камней в куче в два раза.<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 13 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.  Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53. Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 54:\n        return 1\n    elif h == 5 and x < 54:\n        return 0\n    elif x >= 54 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 54:\n        return 1\n    elif h == 3 and x < 54:\n        return 0\n    elif x >= 54 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 3, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 3, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 54):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287834156, 'PYTHON', '', '22', 'Антон Сибгатулин'),
(616, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 36. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 36 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 35.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 36:\n        return 1\n    elif h == 5 and x < 36:\n        return 0\n    elif x >= 36 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 36:\n        return 1\n    elif h == 3 and x < 36:\n        return 0\n    elif x >= 36 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 36):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 36):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287834317, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(617, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 98. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 98 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 97.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 98:\n        return 1\n    elif h == 5 and x < 98:\n        return 0\n    elif x >= 98 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 98:\n        return 1\n    elif h == 3 and x < 98:\n        return 0\n    elif x >= 98 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 98):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 98):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287834461, 'PYTHON', '', '46', 'Антон Сибгатулин'),
(618, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в четыре раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (28,&thinsp;9), (7,&thinsp;10), (7,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 91. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 91 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;85.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 91:\n        return 1\n    elif h == 5 and x + y < 91:\n        return 0\n    elif x + y >= 91 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 4, y, h + 1) and f(x, y * 4, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 91:\n        return 1\n    elif h == 3 and x + y < 91:\n        return 0\n    elif x + y >= 91 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 4, y, h + 1) or f1(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 4, y, h + 1) and f1(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 86):\n    if f(x, 5, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 86):\n    if f1(x, 5, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287834645, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(619, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было <i>S</i> камней 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;64.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 65:\n        return 1\n    elif h == 5 and x < 65:\n        return 0\n    elif x >= 65 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 65):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287834988, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(620, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>три</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 66. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 66 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 65.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 66:\n        return 1\n    elif h == 5 and x < 66:\n        return 0\n    elif x >= 66 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 66:\n        return 1\n    elif h == 3 and x < 66:\n        return 0\n    elif x >= 66 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 66):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 66):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287835145, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(621, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 54. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 55 или больше камней. В начальный момент в куче было S камней, 1 ≤ <i>S</i> ≤ 54.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 55:\n        return 1\n    elif h == 5 and x < 55:\n        return 0\n    elif x >= 55 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 55:\n        return 1\n    elif h == 3 and x < 55:\n        return 0\n    elif x >= 55 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 55):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 55):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287835307, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(622, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в шесть раз</b>. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 60 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 361. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 362 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 360.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 361:\n        return 1\n    elif h == 5 and x < 361:\n        return 0\n    elif x >= 361 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 6, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 361:\n        return 1\n    elif h == 3 and x < 361:\n        return 0\n    elif x >= 361 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 6, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 6, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 361):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 361):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287835478, 'PYTHON', '', '58', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(623, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя.  За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 76. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 76 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 75.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 76:\n        return 1\n    elif h == 5 and x < 76:\n        return 0\n    elif x >= 76 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 76:\n        return 1\n    elif h == 3 and x < 76:\n        return 0\n    elif x >= 76 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 76):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 76):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287835751, 'PYTHON', '', '22', 'Антон Сибгатулин'),
(624, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) <b>один</b> камень или увеличить количество камней в куче в <b>три раза</b>. Например, пусть в одной куче 10 камней, а в другой 7 камней; такую позицию в игре будем обозначать (10, 7). Тогда за один ход можно получить любую из четырёх позиций: (11,&#8239;7), (30, 7), (10, 8), (10, 21). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 68. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 68 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было шесть камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1 ≤ <i>S</i> ≤ 61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 68:\n        return 1\n    elif h == 5 and x + y < 68:\n        return 0\n    elif x + y >= 68 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 68:\n        return 1\n    elif h == 3 and x + y < 68:\n        return 0\n    elif x + y >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 3, y, h + 1) or f1(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 3, y, h + 1) and f1(x, y * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 62):\n    if f(x, 6, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 62):\n    if f1(x, 6, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287835885, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(625, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в 3 раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 30. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 30 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 29.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 30:\n        return 1\n    elif h == 5 and x < 30:\n        return 0\n    elif x >= 30 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 30:\n        return 1\n    elif h == 3 and x < 30:\n        return 0\n    elif x >= 30 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 30):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 30):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287836102, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(626, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 69 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤68. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 69:\n        return 1\n    elif h == 5 and x < 69:\n        return 0\n    elif x >= 69 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 69:\n        return 1\n    elif h == 3 and x < 69:\n        return 0\n    elif x >= 69 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 69):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 69):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287836292, 'PYTHON', '', '32', 'Антон Сибгатулин'),
(627, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 86. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 86 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 14 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 86:\n        return 1\n    elif h == 5 and x + y < 86:\n        return 0\n    elif x + y >= 86 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y <= 86:\n        return 1\n    elif h == 3 and x + y > 86:\n        return 0\n    elif x + y <= 86 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 72):\n    if f(x, 14, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 72):\n    if f1(x, 14, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287836433, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(628, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 88. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 88 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите максимальное значение <i>S</i>, при котором у Вани есть выигрышная стратегия, позволяющая ему выиграть при любой игре Пети.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 88:\n        return 1\n    elif h == 5 and x + y < 88:\n        return 0\n    elif x + y >= 88 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # сратегия проигравшего(любой ход)\nfor x in range(1, 72):\n    if f(x, 6, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287836558, 'PYTHON', '', '27', 'Антон Сибгатулин'),
(629, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 65. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 65:\n        return 1\n    elif h == 5 and x < 65:\n        return 0\n    elif x >= 65 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 65):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287836705, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(630, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 107. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 107 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 13 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;93.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия: <p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 107:\n        return 1\n    elif h == 5 and x + y < 107:\n        return 0\n    elif x + y >= 107 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 107:\n        return 1\n    elif h == 3 and x + y < 107:\n        return 0\n    elif x + y >= 107 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 94):\n    if f(x, 13, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 94):\n    if f1(x, 13, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287836861, 'PYTHON', '', '39', 'Антон Сибгатулин'),
(631, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 41 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 32.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 41:\n        return 1\n    elif h == 5 and x + y < 41:\n        return 0\n    elif x + y >= 41 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) and f(x + 2, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 41:\n        return 1\n    elif h == 3 and x + y < 41:\n        return 0\n    elif x + y >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y + 2, h + 1) or f1(x + 2, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y + 2, h + 1) and f1(x + 2, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 33):\n    if f(x, 8, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 33):\n    if f1(x, 8, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287837002, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(632, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 47:\n        return 1\n    elif h == 5 and x < 47:\n        return 0\n    elif x >= 47 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 47):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287837171, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(633, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><b>добавить в кучу один камень</b>, или<p class=\"left_margin\"><b>добавить в кучу три камня</b>, или<p class=\"left_margin\"><b>увеличить количество камней в куче в два раза.</b><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 13 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 49. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 50 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 49.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 50:\n        return 1\n    elif h == 5 and x < 50:\n        return 0\n    elif x >= 50 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 50:\n        return 1\n    elif h == 3 and x < 50:\n        return 0\n    elif x >= 50 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 3, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 3, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 50):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 50):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287837293, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(634, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>добавить столько камней, сколько их в данный момент в другой куче</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (14,&thinsp;9), (5,&thinsp;10), (5,&thinsp;14). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 75. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 75 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 7 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите такое значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 75:\n        return 1\n    elif h == 5 and x + y < 75:\n        return 0\n    elif x + y >= 75 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x + y, y, h + 1) and f(x, y + x, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 75:\n        return 1\n    elif h == 3 and x + y < 75:\n        return 0\n    elif x + y >= 75 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x + y, y, h + 1) or f1(x, y + x, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x + y, y, h + 1) and f1(x, y + x, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 68):\n    if f(x, 7, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 68):\n    if f1(x, 7, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287837523, 'PYTHON', '', '32', 'Антон Сибгатулин'),
(635, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 43. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 43 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 42.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 43:\n        return 1\n    elif h == 5 and x < 43:\n        return 0\n    elif x >= 43 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 43:\n        return 1\n    elif h == 3 and x < 43:\n        return 0\n    elif x >= 43 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 43):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 43):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287837663, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(636, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре будем обозначать (10,&thinsp;5). Тогда за один ход можно получить любую из четырёх позиций: (11,&thinsp;5), (20,&thinsp;5), (10,&thinsp;6), (10,&thinsp;10). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было семь камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;69.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 77:\n        return 1\n    elif h == 5 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 77:\n        return 1\n    elif h == 3 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 70):\n    if f(x, 7, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 70):\n    if f1(x, 7, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287837881, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(637, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45&#8239;камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 39 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 38.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 39:\n        return 1\n    elif h == 5 and x < 39:\n        return 0\n    elif x >= 39 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 39:\n        return 1\n    elif h == 3 and x < 39:\n        return 0\n    elif x >= 39 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 39):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 39):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287838035, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(638, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>четыре</b> камня или увеличить количество камней в куче<b> в два раза</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 48.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 48 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/69/69a7d118d912871bddf7fddb9dbccf59.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 47.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 48:\n        return 1\n    elif h == 5 and x < 48:\n        return 0\n    elif x >= 48 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # сратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 48:\n        return 1\n    elif h == 3 and x < 48:\n        return 0\n    elif x >= 48 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 48):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 48):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287838203, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(639, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может:<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>добавить в кучу один камень</b> (действие А) или<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>утроить количество камней в куче, а затем убрать из кучи 2 камня</b> (действие Б).<p class=\"left_margin\">Например, имея кучу из 20 камней, за один ход можно получить кучу из 21 камня или из 58 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 39. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 2 ≤ <i>S</i> ≤ 39.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 40:\n        return 1\n    elif h == 5 and x < 40:\n        return 0\n    elif x >= 40 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3 - 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 40:\n        return 1\n    elif h == 3 and x < 40:\n        return 0\n    elif x >= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3 - 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(2, 40):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(2, 40):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287838440, 'PYTHON', '', '11', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(640, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>добавить столько камней, сколько их в данный момент в другой куче</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (14,&thinsp;9), (5,&thinsp;10), (5,&thinsp;14). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 67. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 67 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 9 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;57.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите такое значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 67:\n        return 1\n    elif h == 5 and x + y < 67:\n        return 0\n    elif x + y >= 67 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x + y, y, h + 1) or f(x, y + x, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x + y, y, h + 1) and f(x, y + x, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 67:\n        return 1\n    elif h == 3 and x + y < 67:\n        return 0\n    elif x + y >= 67 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x + y, y, h + 1) or f1(x, y + x, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x + y, y, h + 1) and f1(x, y + x, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 58):\n    if f(x, 9, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 58):\n    if f1(x, 9, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287838648, 'PYTHON', '', '27', 'Антон Сибгатулин'),
(641, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может:<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>добавить в кучу один камень</b> (действие А) или<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>утроить количество камней в куче, а затем убрать из кучи 2 камня</b> (действие Б).<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 28 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 30. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 2 ≤ <i>S</i> ≤ 30.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 31:\n        return 1\n    elif h == 5 and x < 31:\n        return 0\n    elif x >= 31 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3 - 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 31:\n        return 1\n    elif h == 3 and x < 31:\n        return 0\n    elif x >= 31 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3 - 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(2, 31):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(2, 31):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287838873, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(642, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу 1 камень или 10 камней. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 41:\n        return 1\n    elif h == 5 and x < 41:\n        return 0\n    elif x >= 41 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 10, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 41:\n        return 1\n    elif h == 3 and x < 41:\n        return 0\n    elif x >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 10, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 41):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 41):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287839019, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(643, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 64.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 65 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 64. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 65:\n        return 1\n    elif h == 5 and x < 65:\n        return 0\n    elif x >= 65 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 65):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287839150, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(644, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 102. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 102 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней; 1 ≤ S ≤ 101.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 102:\n        return 1\n    elif h == 5 and x < 102:\n        return 0\n    elif x >= 102 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 102:\n        return 1\n    elif h == 3 and x < 102:\n        return 0\n    elif x >= 102 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 102):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 102):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287839310, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(645, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 231. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 231 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 17 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;213.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 231:\n        return 1\n    elif h == 5 and x + y < 231:\n        return 0\n    elif x + y >= 231 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 231:\n        return 1\n    elif h == 3 and x + y < 231:\n        return 0\n    elif x + y >= 231 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 214):\n    if f(x, 17, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 214):\n    if f1(x, 17, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287839449, 'PYTHON', '', '97', 'Антон Сибгатулин'),
(646, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 47:\n        return 1\n    elif h == 5 and x < 47:\n        return 0\n    elif x >= 47 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 47):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287839735, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(647, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень меньше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 4).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите максимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.<p><!--Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y <= 20:\n        return 1\n    elif h == 5 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2, y, h + 1) or f(x, y // 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) and f(x, y - 1, h + 1) and f(x // 2, y, h + 1) and f(x, y // 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y <= 20:\n        return 1\n    elif h == 3 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x - 1, y, h + 1) or f1(x, y - 1, h + 1) or f1(x // 2, y, h + 1) or f1(x, y // 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x - 1, y, h + 1) and f1(x, y - 1, h + 1) and f1(x // 2, y, h + 1) and f1(x, y // 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(10, 100):\n    if f(x, 10, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 100):\n    if f1(x, 10, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287839921, 'PYTHON', '', '25', 'Антон Сибгатулин'),
(648, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может: добавить в кучу один камень (действие А) или утроить количество камней в куче, а затем убрать из кучи один камень (действие Б). Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 29 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится более 32. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 33 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 32.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 33:\n        return 1\n    elif h == 5 and x < 33:\n        return 0\n    elif x >= 33 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 - 1, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3 - 1, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 33:\n        return 1\n    elif h == 3 and x < 33:\n        return 0\n    elif x >= 33 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3 - 1, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3 - 1, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 33):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 33):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287840063, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(649, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 74. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 74 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 74:\n        return 1\n    elif h == 5 and x + y < 74:\n        return 0\n    elif x + y >= 74 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y <= 74:\n        return 1\n    elif h == 3 and x + y > 74:\n        return 0\n    elif x + y <= 74 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 62):\n    if f(x, 12, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 62):\n    if f1(x, 12, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287840214, 'PYTHON', '', '29', 'Антон Сибгатулин'),
(650, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤46. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 47:\n        return 1\n    elif h == 5 and x < 47:\n        return 0\n    elif x >= 47 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 47):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287840404, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(651, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 33. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 33 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 32.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 33:\n        return 1\n    elif h == 5 and x < 33:\n        return 0\n    elif x >= 33 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 33:\n        return 1\n    elif h == 3 and x < 33:\n        return 0\n    elif x >= 33 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 3, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 3, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 33):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 33):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287840558, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(652, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 54:\n        return 1\n    elif h == 5 and x < 54:\n        return 0\n    elif x >= 54 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 54:\n        return 1\n    elif h == 3 and x < 54:\n        return 0\n    elif x >= 54 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 54):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287840687, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(653, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в шесть раз</b>. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 60 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 365. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 366 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 365.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 366:\n        return 1\n    elif h == 5 and x < 366:\n        return 0\n    elif x >= 366 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 6, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 366:\n        return 1\n    elif h == 3 and x < 366:\n        return 0\n    elif x >= 366 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 6, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 6, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 366):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 366):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287840812, 'PYTHON', '', '58', 'Антон Сибгатулин'),
(654, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит  куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 35 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 34. Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 35:\n        return 1\n    elif h == 5 and x < 35:\n        return 0\n    elif x >= 35 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 35:\n        return 1\n    elif h == 3 and x < 35:\n        return 0\n    elif x >= 35 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 3, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 3, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 35):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287840957, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(655, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 45. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 46:\n        return 1\n    elif h == 5 and x < 46:\n        return 0\n    elif x >= 46 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 46):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287841098, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(656, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 28.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 28 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 27. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 28:\n        return 1\n    elif h == 5 and x < 28:\n        return 0\n    elif x >= 28 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 28:\n        return 1\n    elif h == 3 and x < 28:\n        return 0\n    elif x >= 28 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 3, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 3, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 28):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 28):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287841234, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(657, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 75. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 75 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 74.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 75:\n        return 1\n    elif h == 5 and x < 75:\n        return 0\n    elif x >= 75 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 75:\n        return 1\n    elif h == 3 and x < 75:\n        return 0\n    elif x >= 75 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 75):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 75):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287841405, 'PYTHON', '', '21', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(658, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 64 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 63. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 64:\n        return 1\n    elif h == 5 and x < 64:\n        return 0\n    elif x >= 64 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 64:\n        return 1\n    elif h == 3 and x < 64:\n        return 0\n    elif x >= 64 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 64):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 64):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287841533, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(659, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 36. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 36 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 35.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 36:\n        return 1\n    elif h == 5 and x < 36:\n        return 0\n    elif x >= 36 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 36:\n        return 1\n    elif h == 3 and x < 36:\n        return 0\n    elif x >= 36 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 36):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 36):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287841677, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(660, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней.  Игроки ходят по очереди, первый ход делает Петя. За один ход  игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 74. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 74 или больше камней.  В начальный момент в куче было S камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;73. <p> <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.  <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 74:\n        return 1\n    elif h == 5 and x < 74:\n        return 0\n    elif x >= 74 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # сратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 74:\n        return 1\n    elif h == 3 and x < 74:\n        return 0\n    elif x >= 74 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 74):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 74):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287841816, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(661, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 129. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу из 129 или больше камней. <p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1&#8239;≤&#8239;<i>S</i>&#8239;≤ 128.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.<p class=\"left_margin\">Если найдено несколько значений <i>S</i>, в ответе запишите минимальное из них.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 29:\n        return 1\n    elif h == 5 and x < 29:\n        return 0\n    elif x >= 29 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 29:\n        return 1\n    elif h == 3 and x < 29:\n        return 0\n    elif x >= 29 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 29):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 29):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287841971, 'PYTHON', '', '62', 'Антон Сибгатулин'),
(662, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень, добавить в кучу четыре камня, или увеличить количество камней в куче в 2 раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 52. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 52 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 51. <p> <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.  <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 52:\n        return 1\n    elif h == 5 and x < 52:\n        return 0\n    elif x >= 52 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 52:\n        return 1\n    elif h == 3 and x < 52:\n        return 0\n    elif x >= 52 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 52):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 52):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287842228, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(663, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 94. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 94 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 93.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 94:\n        return 1\n    elif h == 5 and x < 94:\n        return 0\n    elif x >= 94 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 94:\n        return 1\n    elif h == 3 and x < 94:\n        return 0\n    elif x >= 94 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 94):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 94):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287842424, 'PYTHON', '', '44', 'Антон Сибгатулин'),
(664, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 44. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 44 или больше камней. В начальный момент в куче было S камней, 1 &le; S &le; 43.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 44:\n        return 1\n    elif h == 5 and x < 44:\n        return 0\n    elif x >= 44 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 44:\n        return 1\n    elif h == 3 and x < 44:\n        return 0\n    elif x >= 44 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 44):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 44):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287842871, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(665, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<b> добавить в кучу 1 камень</b> или <b>добавить в кучу 10 камней.</b> Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 52. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 52 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 51. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;—&#8239;значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 52:\n        return 1\n    elif h == 5 and x < 52:\n        return 0\n    elif x >= 52 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 10, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 52:\n        return 1\n    elif h == 3 and x < 52:\n        return 0\n    elif x >= 52 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 10, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 52):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 52):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287843730, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(666, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 35 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤34.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 35:\n        return 1\n    elif h == 5 and x < 35:\n        return 0\n    elif x >= 35 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 35:\n        return 1\n    elif h == 3 and x < 35:\n        return 0\n    elif x >= 35 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 35):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287844395, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(667, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 47:\n        return 1\n    elif h == 5 and x < 47:\n        return 0\n    elif x >= 47 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 47):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287844643, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(668, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в <b>два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 29 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1&#8239;≤&#8239;<i>S</i>&#8239;≤ 28.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. <p class=\"left_margin\">Для игры, описанной в задании 19, найдите значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.<p> Если найдено несколько значений <i>S</i>, в ответе запишите минимальное из них.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 29:\n        return 1\n    elif h == 5 and x < 29:\n        return 0\n    elif x >= 29 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 29:\n        return 1\n    elif h == 3 and x < 29:\n        return 0\n    elif x >= 29 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 29):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 29):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287844830, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(669, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 40 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 39.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 40:\n        return 1\n    elif h == 5 and x < 40:\n        return 0\n    elif x >= 40 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 40:\n        return 1\n    elif h == 3 and x < 40:\n        return 0\n    elif x >= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 40):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 40):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287845080, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(670, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или пять камней или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 20 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 41.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 41:\n        return 1\n    elif h == 5 and x < 41:\n        return 0\n    elif x >= 41 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 5, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 5, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 41:\n        return 1\n    elif h == 3 and x < 41:\n        return 0\n    elif x >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 5, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 5, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 41):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 41):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287845232, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(671, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 22. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 22 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 21.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 22:\n        return 1\n    elif h == 5 and x < 22:\n        return 0\n    elif x >= 22 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 22:\n        return 1\n    elif h == 3 and x < 22:\n        return 0\n    elif x >= 22 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 22):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 22):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287845398, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(672, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу 1 камень или 10 камней. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 17 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 30.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 31:\n        return 1\n    elif h == 5 and x < 31:\n        return 0\n    elif x >= 31 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 10, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 31:\n        return 1\n    elif h == 3 and x < 31:\n        return 0\n    elif x >= 31 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 10, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 10, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 31):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 31):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287845665, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(673, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 48. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 48 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 47. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 48:\n        return 1\n    elif h == 5 and x < 48:\n        return 0\n    elif x >= 48 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 3, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 48:\n        return 1\n    elif h == 3 and x < 48:\n        return 0\n    elif x >= 48 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 3, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 3, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 48):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 48):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287846094, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(674, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 106. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 106 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 105.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 106:\n        return 1\n    elif h == 5 and x < 106:\n        return 0\n    elif x >= 106 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 106:\n        return 1\n    elif h == 3 and x < 106:\n        return 0\n    elif x >= 106 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 106):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 106):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287846249, 'PYTHON', '', '50', 'Антон Сибгатулин'),
(675, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 64 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;63.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите значение <i>S</i>, при котором у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети, но у Вани нет стратегии, которая позволяла бы ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 64:\n        return 1\n    elif h == 5 and x < 64:\n        return 0\n    elif x >= 64 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 64:\n        return 1\n    elif h == 3 and x < 64:\n        return 0\n    elif x >= 64 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 64):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 64):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287846518, 'PYTHON', '', '19', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(676, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 40 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 20 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите максимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.<p><!--Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y <= 40:\n        return 1\n    elif h == 5 and x + y > 40:\n        return 0\n    elif x + y <= 40 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) and f(x, y - 1, h + 1) and f(x // 2 + x % 2, y, h + 1) and f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y <= 40:\n        return 1\n    elif h == 3 and x + y > 40:\n        return 0\n    elif x + y <= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x - 1, y, h + 1) or f1(x, y - 1, h + 1) or f1(x // 2 + x % 2, y, h + 1) or f1(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x - 1, y, h + 1) and f1(x, y - 1, h + 1) and f1(x // 2 + x % 2, y, h + 1) and f1(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(20, 100):\n    if f(x, 20, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(20, 100):\n    if f1(x, 20, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287846675, 'PYTHON', '', '44', 'Антон Сибгатулин'),
(677, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который этот же игрок делал на предыдущем ходу. Повторять чужие ходы и свои более старые ходы разрешается.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил два камня), то следующим ходом Ваня может получить 6, 7 или 10 камней. Если Ваня добавил один камень и получил 6 камней, то вторым ходом Петя может получить 7 или 12 камней. Получить 8 камней Петя не может, так как для этого нужно добавить 2 камня, а Петя делал это на предыдущем ходу.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 29. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 29 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;28.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Найдите наибольшее значение <i>S</i>, при котором у Пети есть выигрышная стратегия, позволяющая ему выиграть третьим ходом при любой игре Вани, но у Пети нет стратегии, которая позволяла бы ему гарантированно выиграть первым или вторым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\n# Победа Пети первым или вторым, или третьим ходом\ndef f(x, h, p, v):\n    if (h == 2 or h == 4 or h == 6) and x >= 29:\n        return 1\n    elif h == 6 and x < 29:\n        return 0\n    elif x >= 29 and h < 6:\n        return 0\n    else:\n        if h % 2 == 0:\n            if h == 2:\n                return f(x + 1, h + 1, p, 1) and f(x + 2, h + 1, p, 2) and f(x * 2, h + 1, p, 3)   # стратегия проигравшего\n            elif h == 4:\n                if v == 1:\n                    return f(x + 2, h + 1, p, v) and f(x * 2, h + 1, p, v)\n                elif v == 2:\n                    return f(x + 1, h + 1, p, v) and f(x * 2, h + 1, p, v)\n                elif v == 3:\n                    return f(x + 1, h + 1, p, v) and f(x + 2, h + 1, p, v)\n        else:  # Петин ход\n            if h == 1:\n                return f(x + 1, h + 1, 1, v) or f(x + 2, h + 1, 2, v) or f(x * 2, h + 1, 3, v)  # стратегия победителя\n            elif h == 3:\n                if p == 1:\n                    return f(x + 2, h + 1, 2, v) or f(x * 2, h + 1, 3, v)\n                elif p == 2:\n                    return f(x + 1, h + 1, 1, v) or f(x * 2, h + 1, 3, v)\n                elif p == 3:\n                    return f(x + 1, h + 1, 1, v) or f(x + 2, h + 1, 2, v)\n            elif h == 5:\n                if p == 1:\n                    return f(x + 2, h + 1, p, v) or f(x * 2, h + 1, p, v)\n                elif p == 2:\n                    return f(x + 1, h + 1, p, v) or f(x * 2, h + 1, p, v)\n                elif p == 3:\n                    return f(x + 1, h + 1, p, v) or f(x + 2, h + 1, p, v)\nfor x in range(1, 29):\n    if f(x, 1, 0, 0) == 1:\n        print(\"Задача 21:\", x)\n# Исключаем победу Пети только первым ходом\ndef f(x, h):\n    if h == 2 and x >= 29:\n        return 1\n    elif h == 2 and x < 29:\n        return 0\n    elif x >= 29 and h < 2:\n        return 0\n    else:\n        if h % 2 != 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 29):\n    if f(x, 1) == 1:\n        print(\"Победа Пети первым ходом:\", x)\n# Победа Пети вторым ходом\ndef f(x, h, m):\n    if h == 4 and x >= 29:\n        return 1\n    elif h == 4 and x < 29:\n        return 0\n    elif x >= 29 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            if h == 1:\n                return f(x + 1, h + 1, 1) or f(x + 2, h + 1, 2) or f(x * 2, h + 1, 3)  # стратегия победителя\n            elif h == 3:\n                if m == 1:\n                    return f(x + 2, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 2:\n                    return f(x + 1, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 3:\n                    return f(x + 1, h + 1, m) or f(x + 2, h + 1, m)\n        else:\n            return f(x + 1, h + 1, m) and f(x + 2, h + 1, m) and f(x * 2, h + 1,  m)\nfor x in range(1, 29):\n    if f(x, 1, 0) == 1:\n        print(\"Победа Пети вторым ходом:\", x)\n</code>', 17, 0, 0, 0, 0, 1671287846854, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(678, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 45. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 45 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 45:\n        return 1\n    elif h == 5 and x + y < 45:\n        return 0\n    elif x + y >= 45 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 3, y, h + 1) and f(x, y * 3, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 45:\n        return 1\n    elif h == 3 and x + y < 45:\n        return 0\n    elif x + y >= 45 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 3, y, h + 1) or f1(x, y * 3, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 3, y, h + 1) and f1(x, y * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 41):\n    if f(x, 4, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 41):\n    if f1(x, 4, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287847010, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(679, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 56. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 56 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 55.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 56:\n        return 1\n    elif h == 5 and x < 56:\n        return 0\n    elif x >= 56 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 56:\n        return 1\n    elif h == 3 and x < 56:\n        return 0\n    elif x >= 56 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 56):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 56):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287847142, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(680, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 36.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 47:\n        return 1\n    elif h == 5 and x + y < 47:\n        return 0\n    elif x + y >= 47 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) and f(x + 2, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 47:\n        return 1\n    elif h == 3 and x + y < 47:\n        return 0\n    elif x + y >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y + 2, h + 1) or f1(x + 2, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y + 2, h + 1) and f1(x + 2, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 37):\n    if f(x, 10, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 37):\n    if f1(x, 10, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287847414, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(681, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Паша и Вася, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Паша. За один ход игрок может добавить в кучу <b>один или четыре камня</b> или увеличить количество камней в куче <b>в пять раз</b>. Игра завершается в тот момент, когда количество камней в куче становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 69 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 68.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Васи есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Паши;<p class=\"left_margin\">— у Васи нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 68:\n        return 1\n    elif h == 5 and x < 68:\n        return 0\n    elif x >= 68 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 5, h + 1)  # сратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 68:\n        return 1\n    elif h == 3 and x < 68:\n        return 0\n    elif x >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f1(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f1(x * 5, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 68):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 68):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287847573, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(682, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать<p>ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 84. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 84 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 16 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 84:\n        return 1\n    elif h == 5 and x + y < 84:\n        return 0\n    elif x + y >= 84 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x, y * 2, h + 1) and f(x * 3, y, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 84:\n        return 1\n    elif h == 3 and x + y < 84:\n        return 0\n    elif x + y >= 84 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x, y * 2, h + 1) or f1(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x, y * 2, h + 1) and f1(x * 3, y, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 68):\n    if f(x, 16, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 68):\n    if f1(x, 16, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287847937, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(683, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в четыре раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (28,&thinsp;9), (7,&thinsp;10), (7,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 151. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 151 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 9 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;141.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 151:\n        return 1\n    elif h == 5 and x + y < 151:\n        return 0\n    elif x + y >= 151 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 4, y, h + 1) and f(x, y * 4, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 151:\n        return 1\n    elif h == 3 and x + y < 151:\n        return 0\n    elif x + y >= 151 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 4, y, h + 1) or f1(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 4, y, h + 1) and f1(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 142):\n    if f(x, 9, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 142):\n    if f1(x, 9, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287848103, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(684, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><b>добавить в кучу один камень</b>, или<p class=\"left_margin\"><b>добавить в кучу два камня</b>, или<p class=\"left_margin\"><b>увеличить количество камней в куче в два раза</b>.<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 33. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 34 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 33.<p class=\"left_margin\">Говорят, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 34:\n        return 1\n    elif h == 5 and x < 34:\n        return 0\n    elif x >= 34 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 34:\n        return 1\n    elif h == 3 and x < 34:\n        return 0\n    elif x >= 34 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 34):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 34):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287848238, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(685, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать<p>ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 69 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 58.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 69:\n        return 1\n    elif h == 5 and x + y < 69:\n        return 0\n    elif x + y >= 69 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x, y * 2, h + 1) and f(x * 3, y, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 69:\n        return 1\n    elif h == 3 and x + y < 69:\n        return 0\n    elif x + y >= 69 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x, y * 2, h + 1) or f1(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x, y * 2, h + 1) and f1(x * 3, y, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 59):\n    if f(x, 10, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 59):\n    if f1(x, 10, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287848385, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(686, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 82. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 82 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;77.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 82:\n        return 1\n    elif h == 5 and x + y < 82:\n        return 0\n    elif x + y >= 82 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 4, y, h + 1) and f(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 82:\n        return 1\n    elif h == 3 and x + y < 82:\n        return 0\n    elif x + y >= 82 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 4, y, h + 1) or f1(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 4, y, h + 1) and f1(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 78):\n    if f(x, 7, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 78):\n    if f1(x, 7, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287848710, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(687, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в пять раз. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 50 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 100. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 101 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 100.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 101:\n        return 1\n    elif h == 5 and x < 101:\n        return 0\n    elif x >= 101 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 101:\n        return 1\n    elif h == 3 and x < 101:\n        return 0\n    elif x >= 101 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 5, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 101):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 101):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287849112, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(688, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>добавить в кучу два камня </b>или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 41. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 42 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 42:\n        return 1\n    elif h == 5 and x < 42:\n        return 0\n    elif x >= 42and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # сратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 42:\n        return 1\n    elif h == 3 and x < 42:\n        return 0\n    elif x >= 42 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 68):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 68):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287849328, 'PYTHON', '', '17', 'Антон Сибгатулин'),
(689, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> камня или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 30.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 31:\n        return 1\n    elif h == 5 and x < 31:\n        return 0\n    elif x >= 31 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 31:\n        return 1\n    elif h == 3 and x < 31:\n        return 0\n    elif x >= 31 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 31):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 31):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287849463, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(690, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один или четыре</b> камня либо увеличить количество камней в куче <b>в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 63. <p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 63 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 62.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h): \n    if (h == 3 or h == 5) and x >= 63:\n        return 1\n    elif h == 5 and x < 63:\n        return 0\n    elif x >= 63 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 63:\n        return 1\n    elif h == 3 and x < 63:\n        return 0\n    elif x >= 63 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f1(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f1(x * 5, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 63):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 63):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287849627, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(691, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>три</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 38. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 38 или больше камней. В начальный момент в куче было S камней, 1 ≤ <i>S</i> ≤ 37.<p class=\"left_margin\">Будем говорить, что игрок имеет <b><i>выигрышную стратегию</b></i>, если он может выиграть при любых ходах противника. Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 38:\n        return 1\n    elif h == 5 and x < 38:\n        return 0\n    elif x >= 38 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 38:\n        return 1\n    elif h == 3 and x < 38:\n        return 0\n    elif x >= 38 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 38):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 38):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287849782, 'PYTHON', '', '10', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(692, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или возвести количество камней в квадрат. Например, имея кучу из 7 камней, за один ход можно получить кучу из 8 или 49 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится 100 или более. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 100 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 < S < 99.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока - значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 100:\n        return 1\n    elif h == 5 and x < 100:\n        return 0\n    elif x >= 100 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x ** 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x ** 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 100:\n        return 1\n    elif h == 3 and x < 100:\n        return 0\n    elif x >= 100 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x ** 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x ** 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 100):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 100):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287849920, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(693, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в пять раз. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 50 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 200. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 201 или больше камней. В начальный момент в куче было S камней, 1 &le; S &le; 200.<p class=\"left_margin\">Говорят, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 201:\n        return 1\n    elif h == 5 and x < 201:\n        return 0\n    elif x >= 201 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 5, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 201:\n        return 1\n    elif h == 3 and x < 201:\n        return 0\n    elif x >= 201 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 5, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 201):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 201):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287850070, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(694, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>добавить в кучу два камня</b> или<p><b>увеличить количество камней в куче в два раза.</b></center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 37. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 38 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 37.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 38:\n        return 1\n    elif h == 5 and x < 38:\n        return 0\n    elif x >= 38 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 38:\n        return 1\n    elif h == 3 and x < 38:\n        return 0\n    elif x >= 38 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 38):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 38):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287850216, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(695, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 46. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;45.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите значение <i>S</i>, при котором у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети, но у Вани нет стратегии, которая позволяла бы ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 46:\n        return 1\n    elif h == 5 and x < 46:\n        return 0\n    elif x >= 46 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 46):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287850418, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(696, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или пять камней или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 20 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 42.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 42 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 42:\n        return 1\n    elif h == 5 and x < 42:\n        return 0\n    elif x >= 42 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 5, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 5, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 42:\n        return 1\n    elif h == 3 and x < 42:\n        return 0\n    elif x >= 42 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 5, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 5, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 42):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 42):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287850551, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(697, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может: добавить в кучу один камень (действие А) или утроить количество камней в куче, а затем добавить ещё один камень (действие Б). Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 31 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится более 31. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 32 или больше камней. В начальный момент в куче было&#8239;S камней, 1 ≤ S ≤ 31.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 32:\n        return 1\n    elif h == 5 and x < 32:\n        return 0\n    elif x >= 32 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 + 1, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x * 3 + 1, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 32:\n        return 1\n    elif h == 3 and x < 32:\n        return 0\n    elif x >= 32 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x * 3 + 1, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x * 3 + 1, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 32):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 32):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287850711, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(698, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 61. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 61 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 3 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;57.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 61:\n        return 1\n    elif h == 5 and x + y < 61:\n        return 0\n    elif x + y >= 61 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 4, y, h + 1) and f(x, y * 4, h + 1)  # сратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y >= 61:\n        return 1\n    elif h == 3 and x + y < 61:\n        return 0\n    elif x + y >= 61 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 4, y, h + 1) or f1(x, y * 4, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 4, y, h + 1) and f1(x, y * 4, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 58):\n    if f(x, 3, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 58):\n    if f1(x, 3, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287850859, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(699, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 62. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 62 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 51.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if (h == 3 or h == 5) and x + y >= 62:\n        return 1\n    elif h == 5 and x + y < 62:\n        return 0\n    elif x + y >= 62 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) and f(x, y + 1, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\ndef f1(x, y, h):\n    if h == 3 and x + y <= 62:\n        return 1\n    elif h == 3 and x + y > 62:\n        return 0\n    elif x + y <= 62 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, y, h + 1) or f1(x, y + 1, h + 1) or f1(x * 2, y, h + 1) or f1(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f1(x + 1, y, h + 1) and f1(x, y + 1, h + 1) and f1(x * 2, y, h + 1) and f1(x, y * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 52):\n    if f(x, 10, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 52):\n    if f1(x, 10, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287851033, 'PYTHON', '', '24', 'Антон Сибгатулин'),
(700, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 51. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 51 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 50. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 51:\n        return 1\n    elif h == 5 and x < 51:\n        return 0\n    elif x >= 51 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 3, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 51:\n        return 1\n    elif h == 3 and x < 51:\n        return 0\n    elif x >= 51 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 3, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 51):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 51):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287851174, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(701, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 24. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 24 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 23.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code> <p class=\"left_margin\">Исключим стратегию Вани, которая позволит ему гарантированно выиграть первым ходом:\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 24:\n        return 1\n    elif h == 5 and x < 24:\n        return 0\n    elif x >= 24 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 2, h + 1) and f(x * 2, h + 1)  # стратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 24:\n        return 1\n    elif h == 3 and x < 24:\n        return 0\n    elif x >= 24 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 2, h + 1) or f1(x * 2, h + 1)    # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 2, h + 1) and f1(x * 2, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 24):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 24):\n    if f1(x, 1) == 1:\n        print(x)  # Исключим эти значения из списка выше\n</code>', 17, 0, 0, 0, 0, 1671287851314, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(702, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>четыре</b> камня или увеличить количество камней в куче<b> в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 70.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 70 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; <img src=\"https://ege.sdamgia.ru/formula/svg/4d/4dd8a3e37c2bde9ffbd7c46d9167adfe.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"1 меньше или равно S меньше или равно 69.\" /><p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Найдите минимальное значение <i>S</i>, при котором одновременно выполняются два условия:<p class=\"left_margin\">— у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;<p class=\"left_margin\">— у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if (h == 3 or h == 5) and x >= 70:\n        return 1\n    elif h == 5 and x < 70:\n        return 0\n    elif x >= 70 and h < 5:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) and f(x + 4, h + 1) and f(x * 5, h + 1)  # сратегия проигравшего\ndef f1(x, h):\n    if h == 3 and x >= 70:\n        return 1\n    elif h == 3 and x < 70:\n        return 0\n    elif x >= 70 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f1(x + 1, h + 1) or f1(x + 4, h + 1) or f1(x * 5, h + 1)   # стратегия победителя\n        else:\n            return f1(x + 1, h + 1) and f1(x + 4, h + 1) and f1(x * 5, h + 1)  # стратегия проигравшего(любой ход)\nfor x in range(1, 70):\n    if f(x, 1) == 1:\n        print(x)\nprint(\"====\")\nfor x in range(1, 70):\n    if f1(x, 1) == 1:\n        print(x)\n</code>', 17, 0, 0, 0, 0, 1671287851462, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(703, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> камень или увеличить количество камней в куче в <b>три</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 38. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 38 или больше камней. В начальный момент в куче было S камней, 1 ≤ <i>S</i> ≤ 37.<p class=\"left_margin\">Будем говорить, что игрок имеет <b><i>выигрышную стратегию</b></i>, если он может выиграть при любых ходах противника. Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 38:\n        return 1\n    elif h == 3 and x < 38:\n        return 0\n    elif x >= 38 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 38):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287851614, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(704, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 49. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 49 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;43.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 49:\n        return 1\n    elif h == 3 and x + y < 49:\n        return 0\n    elif x + y >= 49 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 44):\n    if f(x, 5, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287851769, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(705, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 30 камней. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 106. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 106 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 105.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может<p>встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 106:\n        return 1\n    elif h == 3 and x < 106:\n        return 0\n    elif x >= 106 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 106):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287851930, 'PYTHON', '', '27', 'Антон Сибгатулин'),
(706, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить один камень в одну из куч и два камня в другую</b> или же <b>увеличить количество камней в любой куче</b> в два раза. Например, пусть в одной куче 6 камней, а в другой 8 камней; такую позицию мы будем обозначать (6,&thinsp;8). За один ход из позиции (6,&thinsp;8) можно получить любую из четырёх позиций: (7,&thinsp;10), (8,&thinsp;9), (12,&thinsp;8), (6,&thinsp;16). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 36.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 47:\n        return 1\n    elif h == 3 and x + y < 47:\n        return 0\n    elif x + y >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y + 2, h + 1) or f(x + 2, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 37):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287852163, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(707, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 50. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 50 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 41.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 50:\n        return 1\n    elif h == 3 and x + y < 50:\n        return 0\n    elif x + y >= 50 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 42):\n    if f(x, 8, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287852354, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(708, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 44. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 44 или больше камней. В начальный момент в куче было S камней, 1 &le; S &le; 43.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 44:\n        return 1\n    elif h == 3 and x < 44:\n        return 0\n    elif x >= 44 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 44):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287852587, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(709, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит  куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или три камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 18 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 35 или больше камней. В начальный момент в куче было S камней; 1 ≤ S ≤ 34. Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 35:\n        return 1\n    elif h == 3 and x < 35:\n        return 0\n    elif x >= 35 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287852779, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(710, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень меньше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 4).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение <i>S</i>, когда такая ситуация возможна.<p><!--Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y <= 20:\n        return 1\n    elif h == 3 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2, y, h + 1) or f(x, y // 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2, y, h + 1) or f(x, y // 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(100, 10, -1):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287852935, 'PYTHON', '', '43', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(711, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 54:\n        return 1\n    elif h == 3 and x < 54:\n        return 0\n    elif x >= 54 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287853172, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(712, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 40. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 40 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 20 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение <i>S</i>, когда такая ситуация возможна.<p><!--Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y <= 40:\n        return 1\n    elif h == 3 and x + y > 40:\n        return 0\n    elif x + y <= 40 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(100, 20, -1):\n    if f(x, 20, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287853305, 'PYTHON', '', '80', 'Антон Сибгатулин'),
(713, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b> или <b>увеличить количество камней в куче в шесть раз</b>. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 60 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 361. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 362 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 360.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 361:\n        return 1\n    elif h == 3 and x < 361:\n        return 0\n    elif x >= 361 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 6, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 361):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287853422, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(714, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч один камень или увеличить количество камней в куче в четыре раза. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6,&thinsp;9). За один ход из позиции (6,&thinsp;9) можно получить любую из четырёх позиций: (7,&thinsp;9), (24,&thinsp;9), (6,&thinsp;10), (6,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 61. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 61 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 3 камня, во второй куче&#8239;&#8239;— <I>S</I> камней, 1&#8239;≤&#8239;<I>S</I>&#8239;≤&#8239;57.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 61:\n        return 1\n    elif h == 3 and x + y < 61:\n        return 0\n    elif x + y >= 61 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 58):\n    if f(x, 3, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287853607, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(715, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один или четыре</b> камня либо увеличить количество камней в куче <b>в пять раз</b>. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 63. <p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший кучу, в которой будет 63 или больше камней. В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 62.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 3 and x >= 63: \n        return 1\n    elif h == 3 and x < 63:\n        return 0\n    elif x >= 63 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия победителя\n        else:\n             return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 5, h + 1)   # стратегия проигравшего(неудачный ход)\nfor x in range(1, 63):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287853729, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(716, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>убрать из одной из куч один камень</b> или <b>уменьшить количество камней в куче в два раза</b> (если количество камней в куче нечётно, остаётся на 1 камень больше, чем убирается). Например, пусть в одной куче 6, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (5, 9), (3, 9), (6, 8), (6, 5).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не более 20. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 20 или меньше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, <i>S</i> > 10.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите максимальное значение <i>S</i>, когда такая ситуация возможна.<p><!--Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y <= 20:\n        return 1\n    elif h == 3 and x + y > 20:\n        return 0\n    elif x + y <= 20 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия победителя\n        else:\n            return f(x - 1, y, h + 1) or f(x, y - 1, h + 1) or f(x // 2 + x % 2, y, h + 1) or f(x, y // 2 + y % 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(100, 10, -1):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287853871, 'PYTHON', '', '40', 'Антон Сибгатулин'),
(717, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может:<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>добавить в кучу один камень</b> (действие А) или<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;<b>утроить количество камней в куче, а затем убрать из кучи 2 камня</b> (действие Б).<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или 28 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится более 30. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 31 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 2 ≤ <i>S</i> ≤ 30.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 31:\n        return 1\n    elif h == 3 and x < 31:\n        return 0\n    elif x >= 31 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3 - 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(2, 31):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287853996, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(718, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (21,&thinsp;9), (7,&thinsp;10), (7,&thinsp;27). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 45. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 45 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 4 камня, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 45:\n        return 1\n    elif h == 3 and x + y < 45:\n        return 0\n    elif x + y >= 45 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 41):\n    if f(x, 4, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287854181, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(719, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень или увеличить количество камней в куче в 3 раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 30. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 30 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 29.<p class=\"left_margin\">Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 30:\n        return 1\n    elif h == 3 and x < 30:\n        return 0\n    elif x >= 30 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 30):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287854323, 'PYTHON', '', '4', 'Антон Сибгатулин'),
(720, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 77 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 8 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;68.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 77:\n        return 1\n    elif h == 3 and x + y < 77:\n        return 0\n    elif x + y >= 77 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 69):\n    if f(x, 8, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287854795, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(721, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 12 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 35. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 35 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤34.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 35:\n        return 1\n    elif h == 3 and x < 35:\n        return 0\n    elif x >= 35 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 35):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287854920, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(722, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 88. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 88 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 88:\n        return 1\n    elif h == 3 and x + y < 88:\n        return 0\n    elif x + y >= 88 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 72):\n    if f(x, 6, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287855045, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(723, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в кучу один камень</b>, <b>добавить два камня</b> или <b>увеличить количество камней в куче в два раза</b>. При этом нельзя повторять ход, который этот же игрок делал на предыдущем ходу. Повторять чужие ходы и свои более старые ходы разрешается.<p class=\"left_margin\">Например, если в начале игры в куче 3 камня, Петя может первым ходом получить кучу из 4, 5 или 6 камней. Если Петя получил кучу из 5 камней (добавил два камня), то следующим ходом Ваня может получить 6, 7 или 10 камней. Если Ваня добавил один камень и получил 6 камней, то вторым ходом Петя может получить 7 или 12 камней. Получить 8 камней Петя не может, так как для этого нужно добавить 2 камня, а Петя делал это на предыдущем ходу.<p class=\"left_margin\">Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается, когда количество камней в куче становится не менее 21. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 21 или больше камней. В начальный момент в куче было <i>S</i> камней, 1&#8239;&leqslant;&#8239;<i>S</i>&#8239;&leqslant;&#8239;20.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Укажите наименьшее значение <i>S</i>, при котором Петя не может выиграть за один ход, но у Пети есть выигрышная стратегия, позволяющая ему выиграть вторым ходом.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h, m):\n    if h == 4 and x >= 21:\n        return 1\n    elif h == 4 and x < 21:\n        return 0\n    elif x >= 21 and h < 4:\n        return 0\n    else:\n        if h % 2 != 0:\n            if h == 1:\n                return f(x + 1, h + 1, 1) or f(x + 2, h + 1, 2) or f(x * 2, h + 1, 3)  # стратегия победителя\n            elif h == 3:\n                if m == 1:\n                    return f(x + 2, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 2:\n                    return f(x + 1, h + 1, m) or f(x * 2, h + 1, m)\n                elif m == 3:\n                    return f(x + 1, h + 1, m) or f(x + 2, h + 1, m)\n        else:\n            return f(x + 1, h + 1, m) and f(x + 2, h + 1, m) and f(x * 2, h + 1, m)  \nfor x in range(1, 21):\n    if f(x, 1, 0) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287855189, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(724, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) <b>один</b> камень или увеличить количество камней в куче в <b>три раза</b>. Например, пусть в одной куче 10 камней, а в другой 7 камней; такую позицию в игре будем обозначать (10, 7). Тогда за один ход можно получить любую из четырёх позиций: (11,&#8239;7), (30, 7), (10, 8), (10, 21). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 68. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 68 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было шесть камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1 ≤ <i>S</i> ≤ 61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока – значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 68:\n        return 1\n    elif h == 3 and x + y < 68:\n        return 0\n    elif x + y >= 68 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 62):\n    if f(x, 6, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287855324, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(725, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 24. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 24 или больше камней. <p class=\"left_margin\">В начальный момент в куче было S камней, 1 &le; S &le; 23.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 24:\n        return 1\n    elif h == 3 and x < 24:\n        return 0\n    elif x >= 24 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 24):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287855443, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(726, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в три раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (15,&thinsp;9), (5,&thinsp;10), (5,&thinsp;27). <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 79. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 79 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 6 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;72.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 79:\n        return 1\n    elif h == 3 and x + y < 79:\n        return 0\n    elif x + y >= 79 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 3, y, h + 1) or f(x, y * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 73):\n    if f(x, 6, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287855579, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(727, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в кучу один камень</b> или<p><b>увеличить количество камней в куче в четыре раза</b>.</center><p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11 или из 40 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче превышает 64. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 65 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 64.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии <b>не следует</b> включать ходы следующего стратегии игрока, которые не являются для него безусловно выигрышными.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 65:\n        return 1\n    elif h == 3 and x < 65:\n        return 0\n    elif x >= 65 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 65):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287855704, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(728, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать<p>ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 84. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 84 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 16 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 67.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 84:\n        return 1\n    elif h == 3 and x + y < 84:\n        return 0\n    elif x + y >= 84 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 68):\n    if f(x, 16, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287856238, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(729, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 43. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 43 или больше камней.<p class=\"left_margin\">В начальный момент в куче было S камней, 1 ≤ S ≤ 42.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 43:\n        return 1\n    elif h == 3 and x < 43:\n        return 0\n    elif x >= 43 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 43):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287856366, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(730, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 62. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 62 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 51.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, то есть не гарантируют выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 62:\n        return 1\n    elif h == 3 and x + y < 62:\n        return 0\n    elif x + y >= 62 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 52):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287856538, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(731, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один камень, или добавить в кучу три камня, или увеличить количество камней в куче в два раза.<p class=\"left_margin\">Например, имея кучу из 10 камней, за один ход можно получить кучу из 11, 13 или 20 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.  Игра завершается в тот момент, когда количество камней в куче превышает 53. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 54 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 53. Говорят, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 54:\n        return 1\n    elif h == 3 and x < 54:\n        return 0\n    elif x >= 54 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 3, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 54):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287856669, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(732, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 86. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 86 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 14 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;71.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 86:\n        return 1\n    elif h == 3 and x + y < 86:\n        return 0\n    elif x + y >= 86 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 72):\n    if f(x, 14, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287856806, 'PYTHON', '', '18', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(733, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней. В начальный момент в куче было S камней, 1 ≤ S ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть  при  любых  ходах  противника.  Описать  стратегию  игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287856958, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(734, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Например, пусть в одной куче 5 камней, а в другой 9 камней; такую позицию мы будем обозначать (5,&thinsp;9). За один ход из позиции (5,&thinsp;9) можно получить любую из четырёх позиций: (6,&thinsp;9), (10,&thinsp;9), (5,&thinsp;10), (5,&thinsp;18).<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 93. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 93 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;80.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 93:\n        return 1\n    elif h == 3 and x + y < 93:\n        return 0\n    elif x + y >= 93 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 81):\n    if f(x, 12, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287857132, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(735, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в два раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 47. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 47 или больше камней.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 46.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 47:\n        return 1\n    elif h == 3 and x < 47:\n        return 0\n    elif x >= 47 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287857291, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(736, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может<p class=\"left_margin\"><center><b>добавить в одну из куч один камень</b> или<p><b>увеличить количество камней в куче в два раза</b>.</center><p class=\"left_margin\">Например, пусть в одной куче 6&#8239;камней, а в другой 9&#8239;камней; такую позицию мы будем обозначать (6,&#8239;9). За один ход из позиции (6,&#8239;9) можно получить любую из четырёх позиций: (7,&#8239;9), (12,&#8239;9), (6,&#8239;10), (6,&#8239;18). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 74. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 74 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 12 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1&#8239;≤&#8239;S&#8239;≤&#8239;61.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.&#8239;е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 74:\n        return 1\n    elif h == 3 and x + y < 74:\n        return 0\n    elif x + y >= 74 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 62):\n    if f(x, 12, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287857410, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(737, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или два камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 46. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 46 или больше камней.  В начальный момент в куче было <i>S</i> камней, 1 ≤ <i>S</i> ≤ 45. <p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. <p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 46:\n        return 1\n    elif h == 3 and x < 46:\n        return 0\n    elif x >= 46 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 46):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287857585, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(738, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч один камень</b>, увеличить <b>количество камней в первой куче в два раза</b> или <b>увеличить количество камней во второй куче в три раза</b>. Например, пусть в одной куче 6 камней, а в другой 9 камней; такую позицию мы будем обозначать (6, 9). За один ход из позиции (6, 9) можно получить любую из четырёх позиций: (7, 9), (12, 9), (6, 10), (6, 27). Чтобы делать<p>ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 69. Победителем считается игрок, сделавший последний ход, то есть первым получивший позицию, в которой в кучах будет 69 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 10 камней, во второй куче&#8239;&#8239;— <i>S</i> камней, 1 ≤ <i>S</i> ≤ 58.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по ней игрока, которые не являются для него безусловно выигрышными, т.е не гарантирующие выигрыш независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, h):\n    if h == 3 and x + y >= 69:\n        return 1\n    elif h == 3 and x + y < 69:\n        return 0\n    elif x + y >= 69 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x, y * 2, h + 1) or f(x * 3, y, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 59):\n    if f(x, 10, 1) == 1:\n        print(\"Задача 19:\", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287857710, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(739, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу <b>один</b> или <b>два</b> или увеличить количество камней в куче в <b>два</b> раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 17 или 30 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 36. Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 36 или больше камней. В начальный момент в куче было <i>S</i> камней, 1 &le; <i>S</i> &le; 35.<p class=\"left_margin\">Будем говорить, что игрок имеет <i>выигрышную стратегию</i>, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 36:\n        return 1\n    elif h == 3 and x < 36:\n        return 0\n    elif x >= 36 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 2, h + 1) or f(x * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 36):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287857835, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(740, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в четыре раза</b>. Например, пусть в одной куче 7 камней, а в другой 9 камней; такую позицию мы будем обозначать (7,&thinsp;9). За один ход из позиции (7,&thinsp;9) можно получить любую из четырёх позиций: (8,&thinsp;9), (28,&thinsp;9), (7,&thinsp;10), (7,&thinsp;36). Чтобы делать ходы, у каждого игрока есть неограниченное количество камней. <p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 91. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший позицию, в которой в кучах будет 91 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 5 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;85.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.&#8239;е. не являющиеся выигрышными независимо от игры противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 91:\n        return 1\n    elif h == 3 and x + y < 91:\n        return 0\n    elif x + y >= 91 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 4, y, h + 1) or f(x, y * 4, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 86):\n    if f(x, 5, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287857990, 'PYTHON', '', '6', 'Антон Сибгатулин'),
(741, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в кучу один или четыре камня или увеличить количество камней в куче в три раза. Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 45 камней. У каждого игрока, чтобы делать ходы, есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда количество камней в куче становится не менее 41.<p class=\"left_margin\">Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 41 камень или больше.<p class=\"left_margin\">В начальный момент в куче было <i>S</i> камней; 1 ≤ <i>S</i> ≤ 40.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. Описать стратегию игрока&#8239;&#8239;— значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, h):\n    if h == 3 and x >= 41:\n        return 1\n    elif h == 3 and x < 41:\n        return 0\n    elif x >= 41 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 3, h + 1)  # стратегия победителя\n        else:\n            return f(x + 1, h + 1) or f(x + 4, h + 1) or f(x * 3, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 47):\n    if f(x, 1) == 1:\n        print(\"Задача 19: \", x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287858367, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(742, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может <b>добавить в одну из куч (по своему выбору) один камень</b> или <b>увеличить количество камней в куче в два раза</b>. Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней.<p class=\"left_margin\">Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 231. Победителем считается игрок, сделавший последний ход, т.&#8239;е. первым получивший такую позицию, при которой в кучах будет 231 или больше камней.<p class=\"left_margin\">В начальный момент в первой куче было 17 камней, во второй куче&#8239;&#8239;— <i>S</i> камней; 1&#8239;≤&#8239;<i>S</i>&#8239;≤&#8239;213.<p class=\"left_margin\">Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника.<p class=\"left_margin\">Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение <i>S</i>, когда такая ситуация возможна.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y, h):\n    if h == 3 and x + y >= 231:\n        return 1\n    elif h == 3 and x + y < 231:\n        return 0\n    elif x + y >= 231 and h < 3:\n        return 0\n    else:\n        if h % 2 == 0:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)   # стратегия победителя\n        else:\n            return f(x + 1, y, h + 1) or f(x, y + 1, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)  # стратегия проигравшего(неудачный ход)\nfor x in range(1, 214):\n    if f(x, 17, 1) == 1:\n        print(x)\n        break\n</code>', 15, 0, 0, 0, 0, 1671287858513, 'PYTHON', '', '54', 'Антон Сибгатулин'),
(743, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваПять преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 5<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 5.<p class=\"left_margin\">Программа для исполнителя РазДваПять&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 16, и при этом траектория вычислений содержит число 8 и не содержит числа 10?<p class=\"left_margin\">Траектория вычислений – это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 4 траектория будет состоять из чисел 9, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x > y or x == 10:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x + 5, y)\nprint(f(1, 8) * f(8, 16))\n</code>', 18, 0, 0, 0, 0, 1671287932204, 'PYTHON', '', '45', 'Антон Сибгатулин'),
(744, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Вычислитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 2, вторая умножает его на 2, третье увеличивает его на 3.<p class=\"left_margin\">Программа для исполнителя Вычислитель&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 22 и при этом траектория вычислений содержит число 11?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 9, 12, 24.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 2, y) + f(x * 2, y) + f(x + 3, y)\nprint(f(2, 11) * f(11, 22))\n</code>', 18, 0, 0, 0, 0, 1671287932603, 'PYTHON', '', '100', 'Антон Сибгатулин'),
(745, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Прибавитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;увеличь старшую цифру числа на 1.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает на 1 старшую (левую) цифру числа, например число 23&#8239;с помощью такой команды превратится в число 33. Если старшая цифра числа равна 9, то вторая команда оставляет это число неизменным. Программа для Прибавителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 10 преобразуют в число 33?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 10, y)\nprint(f(10, 33))\n</code>', 18, 0, 0, 0, 0, 1671287932754, 'PYTHON', '', '25', 'Антон Сибгатулин'),
(746, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 3.<p class=\"left_margin\">Программа для исполнителя РазДваТри&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 3&#8239;в число 16 и при этом траектория вычислений не содержит чисел 6 и 12?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 9, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 6 or x == 12:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x + 3, y)\nprint(f(3, 16))\n</code>', 18, 0, 0, 0, 0, 1671287932883, 'PYTHON', '', '22', 'Антон Сибгатулин'),
(747, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;<b>Прибавь 2</b><p class=\"left_margin\">2.&#8239;&#8239;<b>Умножь на 2</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 2, вторая увеличивает число на экране в два раза.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 52, и при этом траектория вычислений содержит число 18?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 3 траектория будет состоять из чисел 5, 10, 12.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 2, y) + f(x * 2, y)\nprint(f(1, 18) * f(18, 52))\n</code>', 18, 0, 0, 0, 0, 1671287933010, 'PYTHON', '', '96', 'Антон Сибгатулин'),
(748, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;прибавь 4. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  увеличивает его на 4.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 16?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 4, y)\nprint(f(3, 16))\n</code>', 18, 0, 0, 0, 0, 1671287933257, 'PYTHON', '', '36', 'Антон Сибгатулин'),
(749, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель НечетМ преобразует число на экране.  У исполнителя НечетМ две команды, которым присвоены номера:  <p class=\"left_margin\"><b>1. прибавь 1 <p class=\"left_margin\">2. сделай нечётное</b><p class=\"left_margin\">Первая из этих команд увеличивает число x на экране на 1, вторая переводит число x в число 2x+1. Например, вторая команда переводит число 10&#8239;в число 21. Программа для исполнителя НечетМ – это последовательность команд.  Сколько существует таких программ, которые число 1 преобразуют  в число 27, причём траектория вычислений не содержит число 26? Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121  при исходном числе 7 траектория будет состоять из чисел 8, 17, 18.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 26:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2 + 1, y)\nprint(f(1,27))\n</code>', 18, 0, 0, 0, 0, 1671287933442, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(750, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— умножает на 3.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 30, и при этом траектория вычислений содержит число 9 и не содержит чисел 11 и 12?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 213 при исходном числе 4 траектория будет состоять из чисел 6, 7, 21.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 11 or x == 12:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(1, 9) * f(9, 30))\n</code>', 18, 0, 0, 0, 0, 1671287934046, 'PYTHON', '', '212', 'Антон Сибгатулин'),
(751, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 2.<p></b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая удваивает его. Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 2 преобразуют в число 20?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 20))\n</code>', 18, 0, 0, 0, 0, 1671287934801, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(752, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 3. Программа для исполнителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 90, и при этом траектория вычислений содержит число 28?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 12, 13, 39.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(2, 28) * f(28, 90))\n</code>', 18, 0, 0, 0, 0, 1671287935044, 'PYTHON', '', '56', 'Антон Сибгатулин'),
(753, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель НечетМ преобразует число на экране.  У исполнителя НечетМ две команды, которым присвоены номера:  <p class=\"left_margin\">1.&#8239;&#8239;прибавь 1 <p class=\"left_margin\">2.&#8239;&#8239;сделай нечётное <p class=\"left_margin\">Первая из этих команд увеличивает число x на экране на 1, вторая переводит число x в число 2x+1. Например, вторая команда переводит число 10  в число 21. Программа для исполнителя НечетМ&#8239;&#8239;— это последовательность команд.  Сколько существует таких программ, которые число 1 преобразуют  в число 25, причём траектория вычислений не содержит число 24? Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121  при исходном числе 7 траектория будет состоять из чисел 8, 17, 18.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x > y or x == 24:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2 + 1, y)\nprint(f(1,25))\n</code>', 18, 0, 0, 0, 0, 1671287935236, 'PYTHON', '', '10', 'Антон Сибгатулин'),
(754, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Тренер преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2.<p class=\"left_margin\">Программа для исполнителя Тренер – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 11?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(1, 11))\n</code>', 18, 0, 0, 0, 0, 1671287935384, 'PYTHON', '', '89', 'Антон Сибгатулин'),
(755, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 3 результатом является число 14, и при этом траектория вычислений содержит число 9?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 8, 10, 30.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y) + f(x + 2, y)\nprint(f(3, 9) * f(9, 14))\n</code>', 18, 0, 0, 0, 0, 1671287935518, 'PYTHON', '', '112', 'Антон Сибгатулин'),
(756, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Вычислитель преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2.<p class=\"left_margin\">Программа для Вычислителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, для которых при исходном числе 1 результатом является число 22 и при этом траектория вычислений содержит число 10 и не содержит числа 15?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.<p><!--restored from problems table--></div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 15:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 10) * f(10, 22))\n</code>', 18, 0, 0, 0, 0, 1671287935698, 'PYTHON', '', '28', 'Антон Сибгатулин'),
(757, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 3.<p class=\"left_margin\">Программа для исполнителя РазДваТри&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 14 и при этом траектория вычислений не содержит чисел 5 и 10?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 9, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 5 or x == 10:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x + 3, y)\nprint(f(2, 14))\n</code>', 18, 0, 0, 0, 0, 1671287935900, 'PYTHON', '', '26', 'Антон Сибгатулин'),
(758, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— умножает на 3.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 15, и при этом траектория вычислений содержит число 8?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 231 при исходном числе 4 траектория будет состоять из чисел 6, 18, 19.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(1, 8) * f(8, 15))\n</code>', 18, 0, 0, 0, 0, 1671287936073, 'PYTHON', '', '651', 'Антон Сибгатулин'),
(759, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель А22 преобразует целое число, записанное на экране.<p class=\"left_margin\">У исполнителя три команды, каждой команде присвоен номер:<p><b><p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;1. Прибавь 1<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;2. Прибавь 3<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;3. Прибавь предыдущее<p></b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает это число на 3, третья прибавляет к числу на экране число, меньшее на 1 (к числу 3 прибавляется 2, к числу 11 прибавляется 10 и т.&#8239;д.). Программа для исполнителя А22 – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые <b>число 2</b> преобразуют в <b>число 10</b>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 3, y) + f(2 * x - 1, y)\nprint(f(2, 10))\n</code>', 18, 0, 0, 0, 0, 1671287936251, 'PYTHON', '', '39', 'Антон Сибгатулин'),
(760, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Вычислитель преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2.<p class=\"left_margin\">Программа для Вычислителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, для которых при исходном числе 1 результатом является число 21 и при этом траектория вычислений содержит число 10 и не содержит числа 18?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x > y or x == 18:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 10) * f(10, 21))\n</code>', 18, 0, 0, 0, 0, 1671287936707, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(761, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Тренер преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p><b>1. Прибавить 1<p> 2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя Тренер&#8239;&#8239;—&#8239; это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 30 и при этом траектория вычислений содержит числа 10 и 21?<p class=\"left_margin\">Траектория должна содержать оба указанных числа. Траектория вычислений – это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 7 траектория будет состоять из чисел 14, 15, 30.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 10) * f(10, 21) * f(21, 30))\n</code>', 18, 0, 0, 0, 0, 1671287936895, 'PYTHON', '', '28', 'Антон Сибгатулин'),
(762, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май16 преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья – умножает на 3.<p class=\"left_margin\">Программа для исполнителя Май16&#8239;&#8239;— это последовательность команд. Сколько существует программ, для которых при исходном числе 2 результатом является число 28 и при этом траектория вычислений содержит число 12 и не содержит числа 22?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y or x == 22:\n        return 0\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(2, 12) * f(12, 28))\n</code>', 18, 0, 0, 0, 0, 1671287937069, 'PYTHON', '', '45', 'Антон Сибгатулин'),
(763, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья&#8239;&#8239;— умножает на 3.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 39, и при этом траектория вычислений содержит число 13 и не содержит числа 30?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 213 при исходном числе 4 траектория будет состоять из чисел 8, 9, 27.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 30:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(2, 13) * f(13, 39))\n</code>', 18, 0, 0, 0, 0, 1671287937233, 'PYTHON', '', '75', 'Антон Сибгатулин'),
(764, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель А22 преобразует целое число, записанное на экране. У исполнителя три команды, каждой команде присвоен номер:<b><p class=\"left_margin\">1)&#8239;&#8239;Прибавь 1<p class=\"left_margin\">2)&#8239;&#8239;Прибавь 2<p class=\"left_margin\">3)&#8239;&#8239;Прибавь предыдущее</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает это число на 2, третья прибавляет к числу на экране число, меньшее на 1 (к числу 3 прибавляется 2, к числу 11 прибавляется 10 и т.&#8239;д.). Программа для исполнителя А22&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 2 преобразуют в число 9?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x + 2, y) + f(2 * x - 1, y)\nprint(f(2, 9))\n</code>', 18, 0, 0, 0, 0, 1671287937399, 'PYTHON', '', '57', 'Антон Сибгатулин'),
(765, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья умножает его на 3.<p class=\"left_margin\">Программа для исполнителя  РазДваТри&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 44 и при этом траектория вычислений содержит число 13 и не содержит числа 29?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 18, 19, 38.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 29:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(2, 13) * f(13, 44))\n</code>', 18, 0, 0, 0, 0, 1671287937591, 'PYTHON', '', '150', 'Антон Сибгатулин'),
(766, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— умножает на 3.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 15, и при этом траектория вычислений содержит число 10?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 231 при исходном числе 4 траектория будет состоять из чисел 6, 18, 19.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(1, 10) * f(10, 15))\n</code>', 18, 0, 0, 0, 0, 1671287938062, 'PYTHON', '', '672', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(767, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель А17 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая – умножает его на 2, третья – умножает на 3.<p class=\"left_margin\">Программа для исполнителя А17 – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 2 результатом является число 28 и при этом траектория вычислений содержит число 14?<p class=\"left_margin\">Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(2, 14) * f(14, 28))\n</code>', 18, 0, 0, 0, 0, 1671287938260, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(768, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель ТР4 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2.<p class=\"left_margin\">Программа для исполнителя ТР4&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 3&#8239;в число 37 и при этом траектория вычислений содержит число 16 и не содержит числа 33?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 7 траектория будет состоять из чисел 14, 15, 30.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x > y or x == 32:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 16) * f(16, 37))\n</code>', 18, 0, 0, 0, 0, 1671287938745, 'PYTHON', '', '22', 'Антон Сибгатулин'),
(769, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Увеличитель245 преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавь 2<p class=\"left_margin\">2.&#8239;&#8239;Прибавь 4<p class=\"left_margin\">3.&#8239;&#8239;Прибавь 5</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 2, вторая увеличивает это число на 4, а третья&#8239;&#8239;— на 5. Программа для исполнителя Увеличитель245&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 31 преобразуют в число 51?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 2, y) + f(x + 4, y) + f(x + 5, y)\nprint(f(31, 51))\n</code>', 18, 0, 0, 0, 0, 1671287939008, 'PYTHON', '', '201', 'Антон Сибгатулин'),
(770, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Б22 преобразует целое число, записанное на экране. У исполнителя три команды, каждой команде присвоен номер:<b><p class=\"left_margin\">1)&#8239;&#8239;Прибавь 1<p class=\"left_margin\">2)&#8239;&#8239;Прибавь 2<p class=\"left_margin\">3)&#8239;&#8239;Прибавь следующее</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает это число на 2, третья прибавляет к числу на экране число, большее на 1 (к числу 3 прибавляется 4, к числу 9 прибавляется 10 и т.&#8239;д.). Программа для исполнителя Б22&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 2 преобразуют в число&#8239;10?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(2 * x + 1, y)\nprint(f(2, 10))\n</code>', 18, 0, 0, 0, 0, 1671287939182, 'PYTHON', '', '47', 'Антон Сибгатулин'),
(771, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Калькулятор преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Программа для исполнителя Калькулятор – это последовательность команд. Сколько существует программ, для которых при исходном числе 1 результатом является число 21, при этом траектория вычислений содержит число 10 и не содержит число 17?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 17:\n        return 0\n    if x == y:\n        return 1 \n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 10) * f(10, 21))\n</code>', 18, 0, 0, 0, 0, 1671287939324, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(772, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1</b><p class=\"left_margin\"><b>2. Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 3. Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 70, и при этом траектория вычислений содержит число 22?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 12, 13, 39.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(1, 22) * f(22, 70))\n</code>', 18, 0, 0, 0, 0, 1671287939479, 'PYTHON', '', '45', 'Антон Сибгатулин'),
(773, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Вычислитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 3, третья увеличивает его на 2.<p class=\"left_margin\">Программа для исполнителя Вычислитель&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 15 и при этом траектория вычислений содержит числа 10 и 12?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 8, 10, 30.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y) + f(x + 2, y)\nprint(f(1, 10) * f(10, 12) * f(12, 15))\n</code>', 18, 0, 0, 0, 0, 1671287939696, 'PYTHON', '', '504', 'Антон Сибгатулин'),
(774, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— умножает на 2.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 9 и при этом не содержат двух команд умножения подряд?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, Flag):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    elif Flag:\n        return f(x + 1, y, True) + f(x + 2, y, True) + f(x * 2, y, False)\n    else:\n        return f(x + 1, y, True) + f(x + 2, y, True)\nprint(f(1, 9, True))\n</code>', 18, 0, 0, 0, 0, 1671287939823, 'PYTHON', '', '77', 'Антон Сибгатулин'),
(775, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья умножает на 3.<p class=\"left_margin\">Программа для исполнителя РазДваТри&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 40, и при этом траектория вычислений содержит число 12 и не содержит числа 14?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 3 траектория будет состоять из чисел 9, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 14:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(1, 12) * f(12, 40))\n</code>', 18, 0, 0, 0, 0, 1671287940031, 'PYTHON', '', '152', 'Антон Сибгатулин'),
(776, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Вычислитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1.</b><p class=\"left_margin\"><b>2. Умножить на 2.</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2.<p class=\"left_margin\">Программа для Вычислителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном <b>числе 1</b> результатом является <b>число 21</b> и при этом траектория вычислений содержит <b>число 10</b> и не содержит <b>числа 16</b>?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы <b>121</b> при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 16:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 10) * f(10, 21))\n</code>', 18, 0, 0, 0, 0, 1671287940194, 'PYTHON', '', '14', 'Антон Сибгатулин'),
(777, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 20 и при этом траектория вычислений содержит число 10?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 10) * f(10, 20))\n</code>', 18, 0, 0, 0, 0, 1671287940354, 'PYTHON', '', '28', 'Антон Сибгатулин'),
(778, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1<p class=\"left_margin\">2.&#8239;&#8239;сделай чётное<p class=\"left_margin\">3.&#8239;&#8239;сделай нечётное.</b><p class=\"left_margin\">Первая из них увеличивает на 1 исходное число <i>x</i>, вторая умножает это число на 2, третья переводит число&#8239;<i>x</i> в число 2<i>x</i>&#8239;+&#8239;1. Например, вторая команда переводит число 10&#8239;в число 20, а третья переводит число 10&#8239;в число&#8239;21.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые число 1 преобразуют в число 15?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(2 * x + 1, y)\nprint(f(1, 15))\n</code>', 18, 0, 0, 0, 0, 1671287940575, 'PYTHON', '', '83', 'Антон Сибгатулин'),
(779, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя – это последовательность команд. <p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 2 результатом является число 29 и при этом траектория вычислений содержит число 14?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 14) * f(14, 29))\n</code>', 18, 0, 0, 0, 0, 1671287940805, 'PYTHON', '', '26', 'Антон Сибгатулин'),
(780, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Б22 преобразует целое число, записанное на экране.<p class=\"left_margin\">У исполнителя три команды, каждой команде присвоен номер:<p><b><p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;1. Прибавь 1<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;2. Прибавь 2<p>&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;&#8239;3. Прибавь предыдущее<p></b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает это число на 2, третья прибавляет к числу на экране число, меньшее на 1 (к числу 3 прибавляется 2, к числу 11 прибавляется 10 и т.&#8239;д.). Программа для исполнителя Б22 – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые <b>число 3</b> преобразуют в <b>число 10</b>?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(2 * x - 1, y)\nprint(f(3, 10))\n</code>', 18, 0, 0, 0, 0, 1671287940942, 'PYTHON', '', '35', 'Антон Сибгатулин'),
(781, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя РазДва&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 3&#8239;в число 62, и при этом траектория вычислений содержит число 14 и не содержит числа 59?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 8, 9, 18.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 59:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 14) * f(14, 62))\n</code>', 18, 0, 0, 0, 0, 1671287941135, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(782, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Осень16 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1)&#8239;&#8239;<b>Прибавить 1;</b><p class=\"left_margin\">2)&#8239;&#8239;<b>Прибавить 2;</b><p class=\"left_margin\">3)&#8239;&#8239;<b>Прибавить 4.</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— увеличивает на 4.<p class=\"left_margin\">Программа для исполнителя Осень16&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 15 и при этом траектория вычислений содержит число 8?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 10, 11.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x + 4, y)\nprint(f(1, 8) * f(8, 15))\n</code>', 18, 0, 0, 0, 0, 1671287941284, 'PYTHON', '', '961', 'Антон Сибгатулин'),
(783, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— умножает на 2.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 11 и при этом не содержат двух команд умножения подряд?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y, Flag):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    elif Flag:\n        return f(x + 1, y, True) + f(x + 2, y, True) + f(x * 2, y, False)\n    else:\n        return f(x + 1, y, True) + f(x + 2, y, True)\nprint(f(1, 11, True))\n</code>', 18, 0, 0, 0, 0, 1671287941422, 'PYTHON', '', '213', 'Антон Сибгатулин'),
(784, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май17 преобразует число на экране. <p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1 <p class=\"left_margin\">2.&#8239;&#8239;Прибавить 3<p></b><p> <p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 3. Программа для исполнителя Май17&#8239;&#8239;— это последовательность команд. <p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 15 и при этом траектория вычислений содержит число 8? Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121  при исходном числе 7 траектория будет состоять из чисел 8, 11, 12.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 3, y)\nprint(f(1, 8) * f(8, 15))\n</code>', 18, 0, 0, 0, 0, 1671287941584, 'PYTHON', '', '81', 'Антон Сибгатулин'),
(785, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Фибо преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2.<p class=\"left_margin\">Программа для исполнителя Фибо&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 3&#8239;в число 20 и при этом траектория вычислений содержит число 9 и не содержит числа 15?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 7 траектория будет состоять из чисел 9, 10, 12.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x > y or x == 15:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(3, 9) * f(9, 20))\n</code>', 18, 0, 0, 0, 0, 1671287941804, 'PYTHON', '', '520', 'Антон Сибгатулин'),
(786, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Минус преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Вычесть 2</b><p class=\"left_margin\"><b>2. Вычесть 5</b><p class=\"left_margin\">Первая команда уменьшает число на экране на 2, вторая уменьшает это число на 5. Программа для исполнителя Минус&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 23 преобразуют в число 2?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x < y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x - 2, y) + f(x - 5, y)\nprint(f(23, 2))\n</code>', 18, 0, 0, 0, 0, 1671287941927, 'PYTHON', '', '29', 'Антон Сибгатулин'),
(787, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья&#8239;&#8239;— умножает на 3.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 36, и при этом траектория вычислений содержит число 12 и не содержит числа 30?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 213 при исходном числе 4 траектория будет состоять из чисел 8, 9, 27.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 30:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(2, 12) * f(12, 36))\n</code>', 18, 0, 0, 0, 0, 1671287942074, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(788, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 3.<p class=\"left_margin\">Программа для исполнителя РазДваТри&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 3&#8239;в число 16 и при этом траектория вычислений содержит число 12?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 9, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y: \n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x + 3, y)\nprint(f(3, 12) * f(12, 16))\n</code>', 18, 0, 0, 0, 0, 1671287942205, 'PYTHON', '', '96', 'Антон Сибгатулин'),
(789, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя четыре команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1<p class=\"left_margin\">2.&#8239;&#8239;сделай чётное<p class=\"left_margin\">3.&#8239;&#8239;сделай нечетное<p class=\"left_margin\">4.&#8239;&#8239;умножь на 10</b><p class=\"left_margin\">Первая из них увеличивает на 1 исходное число <i>x</i>, вторая умножает это число на 2, третья переводит число&#8239;<i>x</i> в число 2<i>x</i>+1, четвертая умножает его на 10. Например, вторая команда переводит число 10&#8239;в число 20, а третья переводит число 10&#8239;в число 21.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые число 1 преобразуют в число 14?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(2 * x + 1, y) + f(x * 10, y)\nprint(f(1, 14))\n</code>', 18, 0, 0, 0, 0, 1671287942353, 'PYTHON', '', '71', 'Антон Сибгатулин'),
(790, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— умножает на 3.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 15, и при этом траектория вычислений содержит число 10 и не содержит числа 14?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 213 при исходном числе 4 траектория будет состоять из чисел 6, 7, 21.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 14:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(2, 10) * f(10, 15))\n</code>', 18, 0, 0, 0, 0, 1671287942494, 'PYTHON', '', '120', 'Антон Сибгатулин'),
(791, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май17 преобразует число на экране. <p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1 <p class=\"left_margin\">2.&#8239;&#8239;Прибавить 3<p></b><p> <p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 3. Программа для исполнителя Май17&#8239;&#8239;— это последовательность команд. <p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 17 и при этом траектория вычислений содержит число 9? Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121  при исходном числе 7 траектория будет состоять из чисел 8, 11, 12.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 3, y)\nprint(f(1, 9) * f(9, 17))\n</code>', 18, 0, 0, 0, 0, 1671287942641, 'PYTHON', '', '169', 'Антон Сибгатулин'),
(792, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Увеличитель234 преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:<p>&#8239;&#8239;&#8239;&#8239;<b>1. Прибавь 2</b><p>&#8239;&#8239;&#8239;&#8239;<b>2. Прибавь 3</b><p>&#8239;&#8239;&#8239;&#8239;<b>3. Прибавь 4</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 2, вторая увеличивает это число на 3, а третья – на 4. Программа для исполнителя Увеличитель234 – это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 23 преобразуют в число 38?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 2, y) + f(x + 3, y) + f(x + 4, y)\nprint(f(23, 38))\n</code>', 18, 0, 0, 0, 0, 1671287942810, 'PYTHON', '', '112', 'Антон Сибгатулин'),
(793, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 3. Программа для исполнителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 87, и при этом траектория вычислений содержит число 26?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 12, 13, 39.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(2, 26) * f(26, 87))\n</code>', 18, 0, 0, 0, 0, 1671287942939, 'PYTHON', '', '55', 'Антон Сибгатулин'),
(794, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья умножает на 3.<p class=\"left_margin\">Программа для исполнителя РазДваТри&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 50, и при этом траектория вычислений содержит число 14 и не содержит числа 16?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 3 траектория будет состоять из чисел 9, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x > y or x == 16:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(1, 14) * f(14, 50))\n</code>', 18, 0, 0, 0, 0, 1671287943199, 'PYTHON', '', '192', 'Антон Сибгатулин'),
(795, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 3.</b><p class=\"left_margin\">Первая из них увеличивает на 2 число на экране, вторая утраивает его. Программа для Утроителя - это последовательность команд. Сколько существует программ, которые число 1 преобразуют в число 49?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 2, y) + f(x * 3, y)\nprint(f(1, 49))\n</code>', 18, 0, 0, 0, 0, 1671287943706, 'PYTHON', '', '26', 'Антон Сибгатулин'),
(796, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья умножает на 3.<p class=\"left_margin\">Программа для исполнителя РазДваТри&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 15, и при этом траектория вычислений содержит число 9 и не содержит числа 13?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 4 траектория будет состоять из чисел 12, 13, 15.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 13:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(1, 9) * f(9, 15))\n</code>', 18, 0, 0, 0, 0, 1671287944075, 'PYTHON', '', '159', 'Антон Сибгатулин'),
(797, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 3.<p class=\"left_margin\">Программа для исполнителя РазДваТри&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 14 и при этом траектория вычислений содержит число 10?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 9, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x + 3, y)\nprint(f(2, 10) * f(10, 14))\n</code>', 18, 0, 0, 0, 0, 1671287944338, 'PYTHON', '', '81', 'Антон Сибгатулин'),
(798, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Тренер преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2.<p class=\"left_margin\">Программа для исполнителя Тренер – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 12?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(1, 12))\n</code>', 18, 0, 0, 0, 0, 1671287944687, 'PYTHON', '', '144', 'Антон Сибгатулин'),
(799, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Тренер преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p><b>1. Прибавить 1<p> 2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя Тренер&#8239;&#8239;—&#8239; это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 40 и при этом траектория вычислений содержит числа 12 и 25?<p class=\"left_margin\">Траектория должна содержать оба указанных числа. Траектория вычислений – это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 7 траектория будет состоять из чисел 14, 15, 30.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 12) * f(12, 25) * f(25, 40))\n</code>', 18, 0, 0, 0, 0, 1671287944900, 'PYTHON', '', '40', 'Антон Сибгатулин'),
(800, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Вычитатель преобразует число, которое записано на экране. У исполнителя Вычитатель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Вычти 2<p class=\"left_margin\">2.&#8239;&#8239;Вычти 5</b><p class=\"left_margin\">Первая из них уменьшает число на экране на 2, вторая уменьшает его на 5. Программа для Вычитателя – это последовательность команд. Сколько есть программ, которые число 22 преобразуют в число 2?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x < y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x - 2, y) + f(x - 5, y)\nprint(f(22, 2))\n</code>', 18, 0, 0, 0, 0, 1671287945335, 'PYTHON', '', '23', 'Антон Сибгатулин'),
(801, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель А16 преобразует число, записанное на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает его на 2, третья умножает его на 2.<p class=\"left_margin\">Программа для исполнителя А16 – это последовательность команд.<p class=\"left_margin\">Сколько существует таких программ, которые исходное число 3 преобразуют в число 12 и при этом траектория вычислений программы содержит число 10?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 8, 16, 18.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 2, y)\nprint(f(3, 10) * f(10, 12))\n</code>', 18, 0, 0, 0, 0, 1671287945549, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(802, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваПять преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 5<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья увеличивает на 5.<p class=\"left_margin\">Программа для исполнителя РазДваПять&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 18, и при этом траектория вычислений содержит число 9 и не содержит числа 11?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 4 траектория будет состоять из чисел 9, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x > y or x == 11:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x + 5, y)\nprint(f(1, 9) * f(9, 18))\n</code>', 18, 0, 0, 0, 0, 1671287945694, 'PYTHON', '', '57', 'Антон Сибгатулин'),
(803, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Тритон две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;прибавь 3.<p></b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая увеличивает это число на 3. Программа для Тритона&#8239;&#8239;—&#8239;это последовательность команд. Сколько существует программ, которые число 22 преобразуют в число 35?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 3, y)\nprint(f(22, 35))\n</code>', 18, 0, 0, 0, 0, 1671287945933, 'PYTHON', '', '88', 'Антон Сибгатулин'),
(804, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя РазДва&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 20, и при этом траектория вычислений содержит ровно одно из чисел 9 и 10?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 8, 9, 18.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 10:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\ndef f1(x, y):\n    if x > y or x == 9:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f1(x + 1, y) + f1(x * 2, y)\nprint(f(1, 9) * f(9, 20) + f1(1, 10) * f1(10, 20))\n</code>', 18, 0, 0, 0, 0, 1671287946106, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(805, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1</b><p class=\"left_margin\"><b>2. Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 3. Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 65, и при этом траектория вычислений содержит число 20?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 12, 13, 39.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(1, 20) * f(20, 65))\n</code>', 18, 0, 0, 0, 0, 1671287946264, 'PYTHON', '', '36', 'Антон Сибгатулин'),
(806, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя четыре команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;сделай чётное,<p class=\"left_margin\">3.&#8239;&#8239;сделай нечётное,<p class=\"left_margin\">4.&#8239;&#8239;умножь на 10.</b><p class=\"left_margin\">Первая из них увеличивает на 1 исходное число x, вторая умножает это число на 2, третья переводит число x в число 2x + 1, четвёртая умножает его на 10. Например, вторая команда переводит число 10&#8239;в число 20, а третья переводит число 10&#8239;в число 21. Программа для исполнителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые число 1 преобразуют в число 15?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 2, y) + f(2 * x + 1, y) + f(x * 10, y)\nprint(f(1, 15))\n</code>', 18, 0, 0, 0, 0, 1671287946393, 'PYTHON', '', '84', 'Антон Сибгатулин'),
(807, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Вычислитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 3<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 3, третья умножает его на 3.<p class=\"left_margin\">Программа для исполнителя Вычислитель&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 4&#8239;в число 23 и при этом траектория вычислений содержит числа 10 и 17?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 8, 24, 27.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 3, y) + f(x * 3, y)\nprint(f(4, 10) * f(10, 17) * f(17, 23))\n</code>', 18, 0, 0, 0, 0, 1671287946523, 'PYTHON', '', '324', 'Антон Сибгатулин'),
(808, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Прибавитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;увеличь старшую цифру числа на 1.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает на 1 старшую (левую) цифру числа, например число 23&#8239;с помощью такой команды превратится в число 33. Если старшая цифра числа равна 9, то вторая команда оставляет это число неизменным. Программа для Прибавителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 35 преобразуют в число 57?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x + 10, y)\nprint(f(35, 57))\n</code>', 18, 0, 0, 0, 0, 1671287946746, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(809, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель ДваждыДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 2<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 2, вторая умножает его на 2. Программа для исполнителя ДваждыДва&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют <b>исходное число 1 в число 30</b>, и при этом траектория вычислений <b>содержит число 14</b>?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 8, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 2, y) + f(x * 2, y)\nprint(f(1, 14) * f(14, 30))\n</code>', 18, 0, 0, 0, 0, 1671287946868, 'PYTHON', '', '20', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(810, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя РазДва&#8239;&#8239;— это последовательность команд. Укажите наименьшее натуральное число, которое нельзя получить из исходного числа 1, выполнив программу исполнителя РазДва, содержащую не более пяти команд.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, h):\n    if h == 5:\n        a.add(x)\n    else:\n        f(x + 1, h + 1)\n        f(x * 2, h + 1)\na = set()\nf(1, 0)\nprint(a)\n</code>', 18, 0, 0, 0, 0, 1671287946978, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(811, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель ТренерА преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавь 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавь 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавь 5</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает это число на 2, а третья&#8239;&#8239;— на 5. Программа для исполнителя ТренерА&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 21 преобразуют в число 30?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x + 5, y)\nprint(f(21, 30))\n</code>', 18, 0, 0, 0, 0, 1671287947164, 'PYTHON', '', '75', 'Антон Сибгатулин'),
(812, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель ТР4 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2.<p class=\"left_margin\">Программа для исполнителя ТР4&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 35 и при этом траектория вычислений содержит число 15 и не содержит числа 31?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 7 траектория будет состоять из чисел 14, 15, 30.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 31:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 15) * f(15, 35))\n</code>', 18, 0, 0, 0, 0, 1671287947485, 'PYTHON', '', '26', 'Антон Сибгатулин'),
(813, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель М17 преобразует число, записанное на экране. У исполнителя есть три команды, которым присвоены номера: <p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1 <p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2 <p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3 <p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает его на 2, третья умножает на 3. Программа для исполнителя М17 – это последовательность команд. Сколько существует таких программ, которые преобразуют исходное число 2&#8239;в число 12 и при этом траектория вычислений программы содержит числа 8  и 10? Траектория должна содержать оба указанных числа.  <p class=\"left_margin\">Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 8, 24, 26.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(2, 8) * f(8, 10) * f(10, 12))\n</code>', 18, 0, 0, 0, 0, 1671287947619, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(814, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Плюс преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 5<p class=\"left_margin\">Первая команда увеличивает число на экране на 2, вторая увеличивает это число на 5. Программа для исполнителя Плюс&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые число 1 преобразуют в число 20?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 2, y) + f(x + 5, y)\nprint(f(1, 20))\n</code>', 18, 0, 0, 0, 0, 1671287947790, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(815, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Осень16 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1)&#8239;&#8239;<b>Прибавить 1;</b><p class=\"left_margin\">2)&#8239;&#8239;<b>Прибавить 2;</b><p class=\"left_margin\">3)&#8239;&#8239;<b>Прибавить 3.</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— увеличивает на 3.<p class=\"left_margin\">Программа для исполнителя Осень16&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 15 и при этом траектория вычислений содержит число 8?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 10, 11.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x + 3, y)\nprint(f(1, 8) * f(8, 15))\n</code>', 18, 0, 0, 0, 0, 1671287947926, 'PYTHON', '', '1936', 'Антон Сибгатулин'),
(816, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя РазДва&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют <b>исходное число 3 в число 60</b>, и при этом траектория вычислений <b>содержит числа 13 и 30</b>?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 8, 9, 18.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 13) * f(13, 30) * f(30, 60))\n</code>', 18, 0, 0, 0, 0, 1671287948278, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(817, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель-Утроитель три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1<p class=\"left_margin\">2.&#8239;&#8239;умножь на 2<p class=\"left_margin\">3.&#8239;&#8239;умножь на 3.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая увеличивает это число в 2 раза, третья - в 3 раза.<p class=\"left_margin\">Программа для Удвоителя-Утроителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 1 преобразуют в число 13?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(1, 13))\n</code>', 18, 0, 0, 0, 0, 1671287948399, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(818, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Вычислитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">3.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 3, третье увеличивает его на 2.<p class=\"left_margin\">Программа для исполнителя Вычислитель&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 12 и при этом траектория вычислений содержит числа 9 и 11?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 132 при исходном числе 7 траектория будет состоять из чисел 8, 10, 30.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y) + f(x + 2, y)\nprint(f(2, 9) * f(9, 10) * f(10, 12))\n</code>', 18, 0, 0, 0, 0, 1671287948610, 'PYTHON', '', '50', 'Антон Сибгатулин'),
(819, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Июнь16 преобразует число на экране. У исполнителя есть три команды, которым присвоены номера: <p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1 <p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2 <p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3 <p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 2 результатом является число 26 и при этом траектория вычислений содержит число 12 и не содержит число 22?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 22:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(2, 12) * f(12, 26))\n</code>', 18, 0, 0, 0, 0, 1671287948841, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(820, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Фибо преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2.<p class=\"left_margin\">Программа для исполнителя Фибо&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 18 и при этом траектория вычислений содержит число 9 и не содержит числа 14?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 7 траектория будет состоять из чисел 9, 10, 12.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 14:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(2, 9) * f(9, 18))\n</code>', 18, 0, 0, 0, 0, 1671287949096, 'PYTHON', '', '315', 'Антон Сибгатулин'),
(821, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Прибавитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;увеличь старшую цифру числа на 1. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает на 1 старшую (левую) цифру числа, например число 23&#8239;с помощью такой команды превратится в число 33. Если старшая цифра числа равна 9, то вторая команда оставляет это число неизменным. Программа для Прибавителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 15 преобразуют в число 37?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 10, y)\nprint(f(15, 37))\n</code>', 18, 0, 0, 0, 0, 1671287949247, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(822, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель А17 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья – умножает на 3.<p class=\"left_margin\">Программа для исполнителя А17 – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 2 результатом является число 30 и при этом траектория вычислений содержит число 15?<p class=\"left_margin\">Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(2, 15) * f(15, 30))\n</code>', 18, 0, 0, 0, 0, 1671287949373, 'PYTHON', '', '42', 'Антон Сибгатулин'),
(823, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья умножает его на 3.<p class=\"left_margin\">Программа для исполнителя  РазДваТри&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 3&#8239;в число 50 и при этом траектория вычислений содержит число 15 и не содержит числа 33?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 6 траектория будет состоять из чисел 18, 19, 38.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x > y or x == 32:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(3, 15) * f(15, 50))\n</code>', 18, 0, 0, 0, 0, 1671287949515, 'PYTHON', '', '121', 'Антон Сибгатулин'),
(824, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Увеличитель345 преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:<p>&#8239;&#8239;&#8239;&#8239;<b>1. Прибавь 3</b><p>&#8239;&#8239;&#8239;&#8239;<b>2. Прибавь 4</b><p>&#8239;&#8239;&#8239;&#8239;<b>3. Прибавь 5</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 3, вторая увеличивает это число на 4, а третья – на 5. Программа для исполнителя Увеличитель345 – это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 22 преобразуют в число 42?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 3, y) + f(x + 4, y) + f(x + 5, y)\nprint(f(22, 42))\n</code>', 18, 0, 0, 0, 0, 1671287949661, 'PYTHON', '', '73', 'Антон Сибгатулин'),
(825, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 4 результатом является число 13, и при этом траектория вычислений содержит число 11?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 2, y)\nprint(f(4, 11) * f(11, 13))\n</code>', 18, 0, 0, 0, 0, 1671287949812, 'PYTHON', '', '50', 'Антон Сибгатулин'),
(826, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДва преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя РазДва&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 50, и при этом траектория вычислений содержит число 12 и не содержит числа 47?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 212 при исходном числе 4 траектория будет состоять из чисел 8, 9, 18.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 47:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 12) * f(12, 50))\n</code>', 18, 0, 0, 0, 0, 1671287950004, 'PYTHON', '', '40', 'Антон Сибгатулин'),
(827, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май15 преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя Май15 – это последовательность команд. Сколько существует программ, для которых при исходном числе 2 результатом является число 29 и при этом траектория вычислений содержит число 14 и не содержит числа 25? <p class=\"left_margin\">Траектория вычислений программы – это последовательность результатов<p>выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 25:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 14) * f(14, 29))\n</code>', 18, 0, 0, 0, 0, 1671287950159, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(828, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель ТренерБ преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавь 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавь 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавь 6</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает это число на 2, а третья&#8239;&#8239;— на 6. Программа для исполнителя ТренерБ&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 21 преобразуют в число 30?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x + 6, y)\nprint(f(21, 30))\n</code>', 18, 0, 0, 0, 0, 1671287950297, 'PYTHON', '', '65', 'Антон Сибгатулин'),
(829, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья&#8239;&#8239;— умножает на 3.<p class=\"left_margin\">Программа для исполнителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые преобразуют исходное число 2&#8239;в число 16, и при этом траектория вычислений содержит число 11 и не содержит числа 15?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 213 при исходном числе 4 траектория будет состоять из чисел 6, 7, 21.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 15:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(2, 11) * f(11, 16))\n</code>', 18, 0, 0, 0, 0, 1671287950421, 'PYTHON', '', '195', 'Антон Сибгатулин'),
(830, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДва преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2.<p class=\"left_margin\">Программа для исполнителя РазДва&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 3 результатом является число 37 и при этом траектория вычислений содержит число 18?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 122 при исходном числе 4 траектория будет состоять из чисел 5, 10, 20.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 18) * f(18, 37))\n</code>', 18, 0, 0, 0, 0, 1671287950547, 'PYTHON', '', '28', 'Антон Сибгатулин'),
(831, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель РазДваТри преобразует число на экране.<p class=\"left_margin\">У исполнителя есть три команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавить 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3<p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2, третья умножает на 3.<p class=\"left_margin\">Программа для исполнителя РазДваТри&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые преобразуют исходное число 1&#8239;в число 15, и при этом траектория вычислений содержит число 10 и не содержит числа 13?<p class=\"left_margin\">Траектория вычислений&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 312 при исходном числе 4 траектория будет состоять из чисел 12, 13, 15.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 13:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y) + f(x * 3, y)\nprint(f(1, 10) * f(10, 15))\n</code>', 18, 0, 0, 0, 0, 1671287950667, 'PYTHON', '', '168', 'Антон Сибгатулин'),
(832, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Тритон две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;прибавь 3.<p></b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая увеличивает это число на 3. Программа для Тритона&#8239;&#8239;—&#8239;это последовательность команд. Сколько существует программ, которые число 17 преобразуют в число 30?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 3, y)\nprint(f(17, 30))\n</code>', 18, 0, 0, 0, 0, 1671287950956, 'PYTHON', '', '88', 'Антон Сибгатулин'),
(833, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;сделай чётное,<p class=\"left_margin\">3.&#8239;&#8239;сделай нечётное.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число x на экране, вторая умножает это число на 2, третья переводит число x в число 2x + 1. Например, вторая команда переводит число 10&#8239;в число 20, а третья переводит число 10&#8239;в число 21.<p class=\"left_margin\">Программа для исполнителя – это последовательность команд. Сколько существует программ, которые число 2 преобразуют в число 16?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 2, y) + f(2 * x + 1, y)\nprint(f(2, 16))\n</code>', 18, 0, 0, 0, 0, 1671287951154, 'PYTHON', '', '40', 'Антон Сибгатулин'),
(834, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май16 преобразует число на экране. У исполнителя есть три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2<p class=\"left_margin\">3.&#8239;&#8239;Умножить на 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2, третья – умножает на 3.<p class=\"left_margin\">Программа для исполнителя Май16&#8239;&#8239;— это последовательность команд. Сколько существует программ, для которых при исходном числе 2 результатом является число 26 и при этом траектория вычислений содержит число 12 и не содержит числа 22?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 22:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(2, 12) * f(12, 26))\n</code>', 18, 0, 0, 0, 0, 1671287951476, 'PYTHON', '', '30', 'Антон Сибгатулин'),
(835, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Прибавитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;увеличь старшую цифру числа на 1.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает на 1 старшую (левую) цифру числа, например число 23&#8239;с помощью такой команды превратится в число 33. Если старшая цифра числа равна 9, то вторая команда оставляет это число неизменным. Программа для Прибавителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 25 преобразуют в число 47?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 10, y)\nprint(f(25, 47))\n</code>', 18, 0, 0, 0, 0, 1671287951612, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(836, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Калькулятор две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 3,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 3.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 3, вторая&#8239;&#8239;— увеличивает его в 3 раз.<p class=\"left_margin\">Программа для Утроителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 6 преобразуют в число 72?<p class=\"left_margin\">Ответ обоснуйте.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y: \n        return 1\n    if x > y:\n        return 0\n    return f(x + 3, y) + f(x * 3, y)\nprint(f(6, 72))\n</code>', 18, 0, 0, 0, 0, 1671287951798, 'PYTHON', '', '11', 'Антон Сибгатулин'),
(837, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май16 преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;<b>Прибавить 1</b><p class=\"left_margin\">2.&#8239;&#8239;<b>Прибавить 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2. Программа для исполнителя Май16&#8239;&#8239;— это последовательность команд. Сколько существует программ, для которых при исходном числе 1 результатом является число 12 и при этом траектория вычислений содержит число 7? <p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы.  Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 10, 11.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(1, 7) * f(7, 12))\n</code>', 18, 0, 0, 0, 0, 1671287951941, 'PYTHON', '', '104', 'Антон Сибгатулин'),
(838, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май4 преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавь 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавь 2<p class=\"left_margin\">3.&#8239;&#8239;Прибавь 4</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает это число на 2, а третья&#8239;&#8239;— на 4. Программа для исполнителя Май4&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 21 преобразуют в число 30?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x + 2, y) + f(x + 4, y)\nprint(f(21, 30))\n</code>', 18, 0, 0, 0, 0, 1671287952069, 'PYTHON', '', '96', 'Антон Сибгатулин'),
(839, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Прибавитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;увеличь старшую цифру числа на 1.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает на 1 старшую (левую) цифру числа, например число 23&#8239;с помощью такой команды превратится в число 33. Если старшая цифра числа равна 9, то вторая команда оставляет это число неизменным. Программа для Прибавителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 15 преобразуют в число 38?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 10, y)\nprint(f(15, 38))\n</code>', 18, 0, 0, 0, 0, 1671287952186, 'PYTHON', '', '25', 'Антон Сибгатулин'),
(840, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель-Утроитель три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1<p class=\"left_margin\">2.&#8239;&#8239;умножь на 2<p class=\"left_margin\">3.&#8239;&#8239;умножь на 3.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая увеличивает это число в 2 раза, третья - в 3 раза.<p class=\"left_margin\">Программа для Удвоителя-Утроителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 1 преобразуют в число 14?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x * 2, y) + f(x * 3, y)\nprint(f(1, 14))\n</code>', 18, 0, 0, 0, 0, 1671287952443, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(841, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера:<p class=\"left_margin\"><b>1) прибавь 1, </b><p class=\"left_margin\"><b>2) умножь на 3. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая утраивает его.<p class=\"left_margin\">Программа для Утроителя – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые число 2 преобразуют в число 32?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(2, 32))\n</code>', 18, 0, 0, 0, 0, 1671287952566, 'PYTHON', '', '17', 'Антон Сибгатулин'),
(842, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;прибавь 5. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  увеличивает его на 5.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 2 преобразуют в число 15?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 5, y)\nprint(f(2, 15))\n</code>', 18, 0, 0, 0, 0, 1671287952734, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(843, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Увеличитель145 преобразует число, записанное на экране. У исполнителя три команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавь 1<p class=\"left_margin\">2.&#8239;&#8239;Прибавь 4<p class=\"left_margin\">3.&#8239;&#8239;Прибавь 5</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая увеличивает это число на 4, а третья&#8239;&#8239;— на 5. Программа для исполнителя Увеличитель145&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 30 преобразуют в число 46?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 4, y) + f(x + 5, y)\nprint(f(30, 46))\n</code>', 18, 0, 0, 0, 0, 1671287952868, 'PYTHON', '', '301', 'Антон Сибгатулин'),
(844, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 3.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 2, вторая&#8239;&#8239;— увеличивает его в 3 раза.<p class=\"left_margin\">Программа для Утроителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 1 преобразуют в число 25?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 2, y) + f(x * 3, y)\nprint(f(1, 25))\n</code>', 18, 0, 0, 0, 0, 1671287953093, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(845, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;прибавь 5. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  увеличивает его на 5.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 2 преобразуют в число 16?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y: \n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 5, y)\nprint(f(2, 16))\n</code>', 18, 0, 0, 0, 0, 1671287953255, 'PYTHON', '', '26', 'Антон Сибгатулин'),
(846, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 2.<p></b><p class=\"left_margin\">Первая из них увеличивает на 2 число на экране, вторая удваивает его. Программа для Удвоителя - это последовательность команд. Сколько есть программ, которые число 2 преобразуют в число 42?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 2, y) + f(x * 2, y)\nprint(f(2, 42))\n</code>', 18, 0, 0, 0, 0, 1671287953397, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(847, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;прибавь 4. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  увеличивает его на 4.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 15?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 4, y)\nprint(f(3, 15))\n</code>', 18, 0, 0, 0, 0, 1671287953559, 'PYTHON', '', '26', 'Антон Сибгатулин'),
(848, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера:  <p class=\"left_margin\"><b>1) прибавь 1, </b><p class=\"left_margin\"><b>2) умножь на 3. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  утраивает его. <p class=\"left_margin\">Программа для Утроителя – это последовательность команд.  <p class=\"left_margin\">Сколько существует программ, которые число 3 преобразуют в число 37?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(3, 37))\n</code>', 18, 0, 0, 0, 0, 1671287953696, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(849, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;прибавь 4. </b><p class=\"left_margin\">Первая из них увеличивает на 2 число на экране, вторая увеличивает это число на 4.<p class=\"left_margin\">Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 4 преобразуют в число 22?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 2, y) + f(x + 4, y)\nprint(f(4, 22))\n</code>', 18, 0, 0, 0, 0, 1671287953830, 'PYTHON', '', '55', 'Антон Сибгатулин'),
(850, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Удвоитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1</b><p class=\"left_margin\"><b>2. Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя Удвоитель&#8239;&#8239;— это последовательность команд. <p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 3 результатом является число 25 и при этом траектория вычислений содержит число 11 и не содержит числа 20?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 112 при исходном числе 5 траектория будет состоять из чисел 6, 7, 14.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 20:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 11) * f(11, 25))\n</code>', 18, 0, 0, 0, 0, 1671287953969, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(851, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май16 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;<b>Прибавить 1</b><p class=\"left_margin\">2.&#8239;&#8239;<b>Прибавить 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2. Программа для исполнителя Май16&#8239;&#8239;— это последовательность команд. Сколько существует программ, для которых при исходном числе 1 результатом является число 13 и при этом траектория вычислений содержит число 7? Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 10, 11.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(1, 7) * f(7, 13))\n</code>', 18, 0, 0, 0, 0, 1671287954139, 'PYTHON', '', '169', 'Антон Сибгатулин'),
(852, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Калькулятор две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 5.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 2, вторая&#8239;&#8239;— увеличивает его в 5 раз.<p class=\"left_margin\">Программа для Калькулятора&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 2 преобразуют в число 50?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y: \n        return 1\n    if x > y: \n        return 0\n    return f(x + 2, y)+f(x * 5, y)\nprint(f(2, 50))\n</code>', 18, 0, 0, 0, 0, 1671287954326, 'PYTHON', '', '7', 'Антон Сибгатулин'),
(853, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Полтор две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь один,</b><p><b><p class=\"left_margin\">2.&#8239;&#8239;умножь на полтора.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая увеличивает это число в 1,5 раза, если число чётное. К нечётным числам вторая команда неприменима. Программа для Полтора&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 1 преобразуют в число 20?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        if x % 2 == 0:\n            return f(x + 1, y) + f(x * 1.5, y)\n        else:\n            return f(x + 1, y) \nprint(f(1, 20))\n</code>', 18, 0, 0, 0, 0, 1671287954470, 'PYTHON', '', '32', 'Антон Сибгатулин'),
(854, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;прибавь 4. </b><p class=\"left_margin\">Первая из них увеличивает на 2 число на экране, вторая увеличивает это число на 4.<p class=\"left_margin\">Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 2 преобразуют в число 22?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 2, y) + f(x + 4, y)\nprint(f(2, 22))\n</code>', 18, 0, 0, 0, 0, 1671287954623, 'PYTHON', '', '89', 'Антон Сибгатулин'),
(855, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 2. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  удваивает.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 2 преобразуют в число 22?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 22))\n</code>', 18, 0, 0, 0, 0, 1671287954737, 'PYTHON', '', '37', 'Антон Сибгатулин'),
(856, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Прибавитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;прибавь 10.</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая прибавляет к числу на экране 10.<p class=\"left_margin\">Программа для Прибавителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 10 преобразуют в число 32?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 10, y)\nprint(f(10, 32))\n</code>', 18, 0, 0, 0, 0, 1671287954903, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(857, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 2.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая удваивает его. <p class=\"left_margin\">Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько существует программ, которые число 3 преобразуют в число 26?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 26))\n</code>', 18, 0, 0, 0, 0, 1671287955041, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(858, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май16 преобразует число на экране. У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\">1.&#8239;&#8239;<b>Прибавить 1</b><p class=\"left_margin\">2.&#8239;&#8239;<b>Прибавить 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2.<p class=\"left_margin\">Программа для исполнителя Май16&#8239;&#8239;— это последовательность команд. Сколько существует программ, для которых при исходном числе 1 результатом является число 13 и при этом траектория вычислений содержит число 7, но не содержит числа 9? Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 10, 11.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 9:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(1, 7) * f(7, 13))\n</code>', 18, 0, 0, 0, 0, 1671287955191, 'PYTHON', '', '39', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(859, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Полтор две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь один,</b><p><b><p class=\"left_margin\">2.&#8239;&#8239;умножь на полтора.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая увеличивает это число в 1,5 раза, если число чётное. К нечётным числам вторая команда неприменима.<p class=\"left_margin\">Программа для Полтора - это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые число 1 преобразуют в число 22?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        if x % 2 == 0:\n            return f(x + 1, y) + f(x * 1.5, y)\n        else:\n            return f(x + 1, y)\nprint(f(1, 22))\n</code>', 18, 0, 0, 0, 0, 1671287955333, 'PYTHON', '', '44', 'Антон Сибгатулин'),
(860, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Прибавитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;прибавь 10.</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая прибавляет к числу на экране 10.<p class=\"left_margin\">Программа для Прибавителя&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 10 преобразуют в число 31?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 10, y)\nprint(f(10, 31))\n</code>', 18, 0, 0, 0, 0, 1671287955546, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(861, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 3. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  утраивает его.  Программа для Утроителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 36?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(3, 36))\n</code>', 18, 0, 0, 0, 0, 1671287955708, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(862, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Арифметик две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,</b><p><b><p class=\"left_margin\">2.&#8239;&#8239;прибавь 3.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая увеличивает это число на 3.<p class=\"left_margin\">Программа для Арифметика&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые число 2 преобразуют в число 15?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x + 3, y)\nprint(f(2, 15))\n</code>', 18, 0, 0, 0, 0, 1671287955944, 'PYTHON', '', '88', 'Антон Сибгатулин'),
(863, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Арифметик две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,</b><p><b><p class=\"left_margin\">2.&#8239;&#8239;прибавь 3.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая увеличивает это число на 3.<p class=\"left_margin\">Программа для Арифметика&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, которые число 7 преобразуют в число 20?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x + 3, y)\nprint(f(7, 20))\n</code>', 18, 0, 0, 0, 0, 1671287956085, 'PYTHON', '', '88', 'Антон Сибгатулин'),
(864, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Увеличитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 3.</b><p class=\"left_margin\">Первая из них увеличивает число на экране на 2, вторая&#8239;&#8239;— умножает его на 3.<p class=\"left_margin\">Программа для Увеличителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 1 преобразуют в число 31?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 2, y) + f(x * 3, y)\nprint(f(1, 31))\n</code>', 18, 0, 0, 0, 0, 1671287956322, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(865, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май16 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1</b><p class=\"left_margin\"><b>2. Прибавить 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2. Программа для исполнителя Май16&#8239;&#8239;— это последовательность команд. Сколько существует программ, для которых при исходном числе 1 результатом является число 14 и при этом траектория вычислений содержит число 7, но не содержит числа 9? Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 10, 11.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 9:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 2, y)\nprint(f(1, 7) * f(7, 14))\n</code>', 18, 0, 0, 0, 0, 1671287956473, 'PYTHON', '', '65', 'Антон Сибгатулин'),
(866, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Увеличитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 4. <p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая&#8239;&#8239;— умножает его на 4. <p class=\"left_margin\">Программа для Увеличителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 1 преобразуют в число 29? <p class=\"left_margin\">Ответ обоснуйте.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 4, y)\nprint(f(1, 29))\n</code>', 18, 0, 0, 0, 0, 1671287956761, 'PYTHON', '', '12', 'Антон Сибгатулин'),
(867, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Увеличитель преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1</b><p class=\"left_margin\"><b>2. Прибавить 3</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая&#8239;&#8239;— на 3.<p class=\"left_margin\">Программа для исполнителя Увеличитель&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 1 результатом является число 15 и при этом траектория вычислений содержит число 10 и не содержит число 12?<p class=\"left_margin\">Траектория вычислений программы&#8239;&#8239;— это последовательность результатов выполнения всех команд программы. Например, для программы 112 при исходном числе 5 траектория будет состоять из чисел 6, 7, 10.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 12:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x + 3, y)\nprint(f(1, 10) * f(10, 15))\n</code>', 18, 0, 0, 0, 0, 1671287956893, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(868, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Апрель15 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p class=\"left_margin\"><b>1. Прибавить 1</b><p class=\"left_margin\"><b>2. Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя Апрель15 – это последовательность команд. Сколько существует программ, для которых при исходном числе 1<p>результатом является число 21 и при этом траектория вычислений содержит число 10?<p class=\"left_margin\">Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 10) * f(10, 21))\n</code>', 18, 0, 0, 0, 0, 1671287957160, 'PYTHON', '', '28', 'Антон Сибгатулин'),
(869, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 2. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая удваивает его.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 2 преобразуют в число 22?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 22))\n</code>', 18, 0, 0, 0, 0, 1671287957333, 'PYTHON', '', '37', 'Антон Сибгатулин'),
(870, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 2.</b><p class=\"left_margin\">Первая из них увеличивает на 1 число на экране, вторая удваивает его.<p class=\"left_margin\">Программа для Удвоителя – это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 3 преобразуют в число 23?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 23))\n</code>', 18, 0, 0, 0, 0, 1671287957560, 'PYTHON', '', '22', 'Антон Сибгатулин'),
(871, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 2. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая удваивает его.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 22?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 22))\n</code>', 18, 0, 0, 0, 0, 1671287957692, 'PYTHON', '', '22', 'Антон Сибгатулин'),
(872, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 3.</b><p class=\"left_margin\">Первая из них увеличивает на 2 число на экране, вторая утраивает его. Программа для Утроителя - это последовательность команд. Сколько существует программ, которые число 1 преобразуют в число 55?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 2, y) + f(x * 2, y)\nprint(f(2, 42))\n</code>', 18, 0, 0, 0, 0, 1671287957800, 'PYTHON', '', '32', 'Антон Сибгатулин'),
(873, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май16 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя Май16 – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 2 результатом является число 31 и при этом траектория вычислений содержит число 15 и не содержит числа 22?<p class=\"left_margin\">Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 22:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 15) * f(15, 31))\n</code>', 18, 0, 0, 0, 0, 1671287957944, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(874, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Увеличитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 4.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая&#8239;&#8239;— умножает его на 4.<p class=\"left_margin\">Программа для Увеличителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 1 преобразуют в число 32? <p class=\"left_margin\">Ответ обоснуйте.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 4, y)\nprint(f(1, 32))\n</code>', 18, 0, 0, 0, 0, 1671287958148, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(875, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Исполнитель Май16 преобразует число на экране.<p class=\"left_margin\">У исполнителя есть две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;Прибавить 1<p class=\"left_margin\">2.&#8239;&#8239;Умножить на 2</b><p class=\"left_margin\">Первая команда увеличивает число на экране на 1, вторая умножает его на 2. Программа для исполнителя Май16 – это последовательность команд.<p class=\"left_margin\">Сколько существует программ, для которых при исходном числе 2 результатом является число 33 и при этом траектория вычислений содержит число 16 и не содержит числа 30?<p class=\"left_margin\">Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 16, 17.</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y or x == 30:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(2, 16) * f(16, 33))\n</code>', 18, 0, 0, 0, 0, 1671287958344, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(876, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 2. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  удваивает.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 1 преобразуют в число 21?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 21))\n</code>', 18, 0, 0, 0, 0, 1671287958513, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(877, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 3. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  утраивает его.  Программа для Утроителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 37?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(3, 37))\n</code>', 18, 0, 0, 0, 0, 1671287958637, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(878, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Увеличитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 2,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 3.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 2, вторая&#8239;&#8239;— умножает его на 3.<p class=\"left_margin\">Программа для Увеличителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 1 преобразуют в число 59?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x == y: \n        return 1\n    if x > y:\n        return 0\n    return f(x + 2, y) + f(x * 3, y)\nprint(f(1, 59))\n</code>', 18, 0, 0, 0, 0, 1671287958968, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(879, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 3.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая&#8239;&#8239;— утраивает его.<p class=\"left_margin\">Программа для Утроителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 4 преобразуют в число 34?<p class=\"left_margin\">Ответ обоснуйте.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 1, y) + f(x * 3, y)\nprint(f(4, 34))\n</code>', 18, 0, 0, 0, 0, 1671287959274, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(880, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Калькулятор две команды, которым присвоены номера:<p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 3,<p class=\"left_margin\">2.&#8239;&#8239;умножь на 3.<p></b><p class=\"left_margin\">Первая из них увеличивает число на экране на 3, вторая&#8239;&#8239;— утраивает его.<p class=\"left_margin\">Программа для Калькулятора&#8239;&#8239;— это последовательность команд.<p class=\"left_margin\">Сколько есть программ, которые число 3 преобразуют в число 93?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y): \n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    return f(x + 3, y) + f(x * 3, y)\nprint(f(3, 93))\n</code>', 18, 0, 0, 0, 0, 1671287959474, 'PYTHON', '', '28', 'Антон Сибгатулин'),
(881, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 3. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая утраивает его.  Программа для Утроителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 2 преобразуют в число 34?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(2, 34))\n</code>', 18, 0, 0, 0, 0, 1671287959778, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(882, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 2. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая удваивает его. Программа для Удвоителя – это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 25?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 25))\n</code>', 18, 0, 0, 0, 0, 1671287960056, 'PYTHON', '', '28', 'Антон Сибгатулин'),
(883, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 3. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая утраивает его.  Программа для Утроителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 38?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(3, 38))\n</code>', 18, 0, 0, 0, 0, 1671287960251, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(884, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 2. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая удваивает его.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 1 преобразуют в число 20?</div>', 'Решим задание с помощью языка программирования Python:\n<code>\ndef f(x, y):\n    if x > y:\n        return 0\n    if x == y:\n        return 1\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(1, 20))\n</code>', 18, 0, 0, 0, 0, 1671287960380, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(885, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Утроитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 3. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  утраивает его.  Программа для Утроителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 33?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x * 3, y)\nprint(f(3, 33))\n</code>', 18, 0, 0, 0, 0, 1671287960521, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(886, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">У исполнителя Удвоитель две команды, которым присвоены номера: <p><b><p class=\"left_margin\">1.&#8239;&#8239;прибавь 1, <p class=\"left_margin\">2.&#8239;&#8239;умножь на 2. </b><p class=\"left_margin\">Первая из них увеличивает число на экране на 1, вторая  удваивает.  Программа для Удвоителя&#8239;&#8239;— это последовательность команд. Сколько есть программ, которые число 3 преобразуют в число 24?</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef f(x, y):\n    if x == y:\n        return 1\n    if x > y:\n        return 0\n    else:\n        return f(x + 1, y) + f(x * 2, y)\nprint(f(3, 24))\n</code>', 18, 0, 0, 0, 0, 1671287960627, 'PYTHON', '', '28', 'Антон Сибгатулин'),
(887, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(1) = 1;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i> − 1)+<i>n</i> если <i>n</i>>1<p class=\"left_margin\">Чему равно значение функции <i>F</i>(40)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return F(n - 1) + n\nprint(F(40))\n</code>', 19, 0, 0, 0, 0, 1671289418071, 'PYTHON', '', '820', 'Антон Сибгатулин'),
(888, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>a</i> mod <i>b</i> остаток от деления натурального числа <i>a</i> на натуральное число <i>b</i>. Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>n</i> + <i>F</i>(<i>n</i> − 3), если <i>n</i>&#8239;mod&#8239;3&#8239;&#8239;=&#8239;&#8239;0, и <i>n</i>&#8239;>&#8239;0;<p class=\"left_margin\"><i>F(n)</i> = <i>n</i> + <i>F</i>(<i>n</i> − (<i>n</i>&#8239;mod&#8239;3)), если <i>n</i>&#8239;mod&#8239;3&#8239;>&#8239;0. <p class=\"left_margin\">Чему равно значение функции F(26)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 3 == 0 and n > 0:\n        return n + F(n - 3)\n    if n % 3 > 0:\n        return n + F(n - (n % 3))\nprint(F(26))\n</code>', 19, 0, 0, 0, 0, 1671289418290, 'PYTHON', '', '134', 'Антон Сибгатулин'),
(889, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 3 <p class=\"left_margin\">F(n) = F(n–1) * (n–1), при n >1 <p class=\"left_margin\">Чему равно значение функции F(6)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 3\n    if n > 1:\n        return F(n-1) * (n - 1)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289418704, 'PYTHON', '', '360', 'Антон Сибгатулин'),
(890, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(n)</i>&#8239;&#8239;=&#8239;&#8239;1 при <i>n</i>&#8239;&#8239;=&#8239;&#8239;1;<p class=\"left_margin\"><i>F(n)</i>&#8239;&#8239;=&#8239;&#8239;<i>n</i>&#8239;·&#8239;<i>F</i>(<i>n</i>&#8239;−&#8239;1), если <i>n</i>&#8239;>&#8239;1.<p class=\"left_margin\">Чему равно значение выражения <i>F</i>(2023) / <i>F</i>(2020)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \na = {1 : 1}\nfor i in range(2, 2024):\n    a[i] = i * a[i - 1]\nprint(a[2023] / a[2020])\n</code>', 19, 0, 0, 0, 0, 1671289418938, 'PYTHON', '', '8266912626', 'Антон Сибгатулин'),
(891, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 2 <p class=\"left_margin\">F(n) = (F(n–1) − F(n–2)) * n, при n >2 <p class=\"left_margin\">Чему равно значение функции F(8)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return (F(n-1) - F(n-2)) * n\nprint(F(8))\n</code>', 19, 0, 0, 0, 0, 1671289419066, 'PYTHON', '', '8', 'Антон Сибгатулин'),
(892, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(n) = 2 * G(n–1) + 5 * n, при n >1<p class=\"left_margin\">G(1) = 1<p class=\"left_margin\">G(n) = F(n–1) + 2 * n, при n >1 <p class=\"left_margin\">Чему равно значение функции F(4) + G(4)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return 2 * G(n-1) + 5 * n\ndef G(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return F(n-1) + 2 * n\nprint(F(4) + G(4))\n</code>', 19, 0, 0, 0, 0, 1671289419186, 'PYTHON', '', '89', 'Антон Сибгатулин'),
(893, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(n)</i>&#8239;&#8239;=&#8239;&#8239;2 при <i>n</i>&#8239;<&#8239;3;<p class=\"left_margin\"><i>F(n)</i>&#8239;&#8239;=&#8239;&#8239;<i>F</i>(<i>n</i>&#8239;−&#8239;2)&#8239;+&#8239;<i>F</i>(<i>n</i>&#8239;−&#8239;1)&#8239;−&#8239;<i>n</i>, если <i>n</i>&#8239;>&#8239;2 и при этом <i>n</i> чётно,<p class=\"left_margin\"><i>F(n)</i>&#8239;=<i>F</i>(<i>n</i>&#8239;−&#8239;1)&#8239;−&#8239;<i>F</i>(<i>n</i>&#8239;−&#8239;2)&#8239;+&#8239;2&#8239;×&#8239;<i>n</i>, если <i>n</i>&#8239;>&#8239;2 и при этом <i>n</i> нечётно.<p> Чему равно значение функции <i>F</i>(32)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n < 3:\n        return 2\n    if n % 2 == 0 and n > 2:\n        return F(n - 2) + F(n - 1) - n\n    if n % 2 != 0 and n > 2:\n        return F(n - 1) - F(n - 2) + 2 * n\nprint(F(32))\n</code>', 19, 0, 0, 0, 0, 1671289419322, 'PYTHON', '', '3194', 'Антон Сибгатулин'),
(894, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— <i>натуральное</i> число,  задан следующими соотношениями: <p><i>F(n)</i> = <i>n</i> при <i>n</i> ≤ 2; <p><i>F(n)</i> = <i>F</i>(<i>n</i> − 1) × <i>F</i>(<i>n</i> − 2) при <i>n</i>> 2. <p class=\"left_margin\">Чему равно значение функции <i>F</i>(7)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return n\n    if n > 2:\n        return F(n - 1) * F(n - 2)\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289419474, 'PYTHON', '', '256', 'Антон Сибгатулин'),
(895, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(1) = 1; F<i></i>(2) = 1; <p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i> – 2) * (<i>n</i> + 1) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(8)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1 or n == 2:\n        return 1\n    if n > 2:\n        return F(n - 2) * (n + 1)\nprint(F(8))\n</code>', 19, 0, 0, 0, 0, 1671289419593, 'PYTHON', '', '315', 'Антон Сибгатулин'),
(896, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими рекуррентными соотношениями:<p class=\"left_margin\">F(<i>n</i>) = 2 при <i>n</i> = 1;<p class=\"left_margin\">F(<i>n</i>) = F(<i>n</i> − 1)&#8239;·&#8239;<i>n</i> при <i>n</i> ≥ 2.<p class=\"left_margin\">Чему равно значение функции F(5)?<p class=\"left_margin\">В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 2\n    if n >= 2:\n        return F(n - 1) * n \nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289419711, 'PYTHON', '', '240', 'Антон Сибгатулин'),
(897, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = 2 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = 2&#8239;·&#8239;<i>F</i>(<i>n</i>&#8239;− 1) + <i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(5)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return 2\n    if n > 2:\n        return 2 * F(n - 1) + F(n - 2)\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289419983, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(898, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 2),  если <i>n</i> > 0 и при этом чётно;<p class=\"left_margin\"><i>F(n)</i> = 1 + <i>F</i>(<i>n</i> − 1), если <i>n</i> нечётно.<p class=\"left_margin\">Сколько существует таких чисел <i>n</i>, что 1 ≤ <i>n</i> ≤ 1000 и <i>F</i>(<i>n</i>)&#8239;&#8239;=&#8239;&#8239;3?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef f(n):\n    if n == 0:\n        return 0\n    if n > 0 and n % 2 == 0:\n        return f(n / 2)\n    if n % 2 != 0:\n        return 1 + f(n - 1)\nk = 0\nfor n in range(1, 1001):\n    if f(n) == 3:\n        k += 1\nprint(k)\n</code>', 19, 0, 0, 0, 0, 1671289420148, 'PYTHON', '', '120', 'Антон Сибгатулин'),
(899, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значений функций <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(1) = 1; <i>F</i>(2) = 2; <i>F</i>(3) = 3;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i> − 3)*<i>n</i> при <i>n</i> >3.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(11)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return F(n - 3) * n\nprint(F(11))\n</code>', 19, 0, 0, 0, 0, 1671289420271, 'PYTHON', '', '880', 'Антон Сибгатулин'),
(900, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— <i>натуральное</i> число,  задан следующими соотношениями: <p><i>F(n)</i> = <i>n</i> при <i>n</i> ≤ 2; <p><i>F(n)</i> = 3 × <i>F</i>(<i>n</i> − 1) − <i>F</i>(<i>n</i> − 2) при <i>n</i>> 2. <p class=\"left_margin\">Чему равно значение функции <i>F</i>(6)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return n\n    if n > 2:\n        return 3 * F(n - 1) - F(n - 2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289420406, 'PYTHON', '', '89', 'Антон Сибгатулин'),
(901, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через mod(<i>a</i>, <i>b</i>) остаток от деления натурального числа <i>a</i> на натуральное число <i>b</i>. Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 3),  если <i>n</i> > 0 и при этом  mod(<i>n</i>, 3)&#8239;&#8239;=&#8239;&#8239;0;<p class=\"left_margin\"><i>F(n)</i> = mod(<i>n</i>, 3) + <i>F</i>(<i>n</i> − mod(<i>n</i>, 3)), если mod(<i>n</i>, 3) > 0.<p class=\"left_margin\">Назовите минимальное значение <i>n</i>, для которого F(<i>n</i>) = 9.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 3 == 0 and n > 0:\n        return F(n // 3)\n    if n % 3 > 0:\n        return n % 3 + F(n - (n % 3))\ni = 0\nwhile F(i) != 9:\n    i += 1\nprint(i)\n</code>', 19, 0, 0, 0, 0, 1671289420506, 'PYTHON', '', '161', 'Антон Сибгатулин'),
(902, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:<p class=\"left_margin\">F(1) = 1; F(2) = 1;<p class=\"left_margin\">F(n) = F(n - 2) * (n - 1), при n > 2.<p class=\"left_margin\">Чему равно значение функции F(7)? <i>В ответе запишите только натуральное число</i>.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return F(n - 2) * (n - 1)\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289420629, 'PYTHON', '', '48', 'Антон Сибгатулин'),
(903, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 2),  если <i>n</i> > 0 и при этом чётно;<p class=\"left_margin\"><i>F(n)</i> = 1 + <i>F</i>(<i>n</i> − 1), если <i>n</i> нечётно.<p class=\"left_margin\">Сколько существует таких чисел <i>n</i>, что 1 ≤ <i>n</i> ≤ 900 и <i>F</i>(<i>n</i>)&#8239;&#8239;=&#8239;&#8239;9?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0 and n > 0:\n        return F(n // 2)\n    if n % 2 != 0:\n        return 1 + F(n - 1)\nk = 0\nfor i in range(1, 901):\n    if F(i) == 9:\n        k += 1\nprint(k)\n</code>', 19, 0, 0, 0, 0, 1671289420760, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(904, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n — натуральное число, задан следующими соотношениями:<p class=\"left_margin\">F(1) = 1; F(2) = 1;<p class=\"left_margin\">F(n) = F(n - 2) * (n - 1), при n > 2.<p class=\"left_margin\">Чему равно значение функции F(8)? <i>В ответе запишите только натуральное число</i>.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return F(n - 2) * (n - 1)\nprint(F(8))\n</code>', 19, 0, 0, 0, 0, 1671289420876, 'PYTHON', '', '105', 'Антон Сибгатулин'),
(905, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 2),  если <i>n</i> > 0 и при этом <i>n</i> чётно;<p class=\"left_margin\"><i>F(n)</i> = 1 + <i>F</i>(<i>n</i> − 1), если <i>n</i> нечётно.<p class=\"left_margin\">Назовите минимальное значение <i>n</i>, для которого F(<i>n</i>) = 11.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0 and n > 0:\n        return F(n // 2)\n    if n % 2 != 0:\n        return 1 + F(n - 1)\ni = 0\nwhile F(i) != 11:\n    i += 1\nprint(i)\n</code>', 19, 0, 0, 0, 0, 1671289421313, 'PYTHON', '', '2047', 'Антон Сибгатулин'),
(906, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими рекуррентными соотношениями:<p class=\"left_margin\">F(<i>n</i>) = 1 при <i>n</i> = 1;<p class=\"left_margin\">F(<i>n</i>) = F(<i>n</i> − 1)&#8239;·&#8239;<i>n</i> при <i>n</i> ≥ 2.<p class=\"left_margin\">Чему равно значение функции F(6)?<p class=\"left_margin\">В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n >= 2:\n        return F(n - 1) * n\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289421461, 'PYTHON', '', '720', 'Антон Сибгатулин'),
(907, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 3<p class=\"left_margin\">F(n) = F(n−1) * F(n−2) + (n−2), при n > 2<p class=\"left_margin\">Чему равно значение функции F(5)?<p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n > 2:\n        return F(n-1) * F(n - 2) + n-2\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289421590, 'PYTHON', '', '59', 'Антон Сибгатулин'),
(908, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i><p class=\"left_margin\">F</i>(1) = 1<p><i><p class=\"left_margin\">F</i>(<i>n</i>) = <i>F</i>(<i>n</i>–1) + 2<sup><i>n</i>–1</sup> , если <i>n</i> > 1.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(12)?<p class=\"left_margin\">В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n >= 2:\n        return F(n - 1) + 2 ** (n - 1)\nprint(F(12))\n</code>', 19, 0, 0, 0, 0, 1671289421701, 'PYTHON', '', '4095', 'Антон Сибгатулин'),
(909, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(1)</i> = 1; <p class=\"left_margin\"><i>F(n)</i> = <i>n</i> + <i>F</i>(<i>n</i> − 1),  если <i>n</i> чётно;<p class=\"left_margin\"><i>F(n)</i> = 2&#8239;·&#8239;<i>F</i>(<i>n</i> − 2), если <i>n</i> > 1 и при этом нечётно.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(24)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + F(n - 1)\n    if n % 2 != 0 and n > 1:\n        return 2 * F(n - 2)\nprint(F(24))\n</code>', 19, 0, 0, 0, 0, 1671289421828, 'PYTHON', '', '2072', 'Антон Сибгатулин'),
(910, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:<p class=\"left_margin\">F(1)= 1;<p class=\"left_margin\">F(n) = 2*F(n-1) +1 при n >1.<p class=\"left_margin\">Чему равно значение функции F(6)?<p class=\"left_margin\">В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return 2*F(n-1) + 1\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289421938, 'PYTHON', '', '63', 'Антон Сибгатулин'),
(911, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 2;<p class=\"left_margin\">F(2)=4;<p class=\"left_margin\">F(n) = 3*F(n&minus;1) &minus; 2*F(n&minus;2) при n >2.<p class=\"left_margin\">Чему равно значение функции F(7)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n > 2:\n        return 3*F(n-1) - 2*F(n-2)\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289422188, 'PYTHON', '', '128', 'Антон Сибгатулин'),
(912, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(1) = 1; F<i></i>(2) = 1; <p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i> – 2) * <i>n</i> при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(7)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1 or n == 2:\n        return 1\n    if n > 2:\n        return F(n - 2) * n\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289422543, 'PYTHON', '', '105', 'Антон Сибгатулин'),
(913, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями:<p class=\"left_margin\">F(1)= 1;<p class=\"left_margin\">F(n) = 2*F(n-1) +1 при n >1.<p class=\"left_margin\">Чему равно значение функции F(5)?<p class=\"left_margin\">В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return 2*F(n-1) +1\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289422831, 'PYTHON', '', '31', 'Антон Сибгатулин'),
(914, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим остаток от деления натурального числа <i>a</i> на натуральное число <i>b</i> как <i>a</i> mod <i>b</i>.<p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> − 1) + 1,  если <i>n</i> > 0 и при этом <i>n</i> mod 3 = 2;<p class=\"left_margin\"><i>F(n)</i> = <i>F</i>((<i>n</i> − <i>n</i> mod 3) / 3), если <i>n</i> > 0 и при этом <i>n</i> mod 3 < 2.<p class=\"left_margin\">Укажите наименьшее возможное <i>n</i>, для которого <i>F</i>(<i>n</i>)&#8239;&#8239;=&#8239;&#8239;5.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 3 == 2 and n > 0:\n        return F(n - 1) + 1\n    if n % 3 < 2:\n        return F((n - n % 3) // 3)\ni = 0\nwhile F(i) != 5:\n    i += 1\nprint(i)\n</code>', 19, 0, 0, 0, 0, 1671289423019, 'PYTHON', '', '242', 'Антон Сибгатулин'),
(915, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— <i>натуральное</i> число,  задан следующими соотношениями: <p><i>F(n)</i> = 2 при <i>n</i> ≤ 2; <p><i>F(n)</i> = 3 × <i>F</i>(<i>n</i> − 1) &minus; <i>F</i>(<i>n</i> − 2) при <i>n</i>> 2. <p class=\"left_margin\">Чему равно значение функции <i>F</i>(6)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return 2\n    if n > 2:\n        return 3 * F(n - 1) - F(n - 2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289423184, 'PYTHON', '', '68', 'Антон Сибгатулин'),
(916, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:<p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(n) = F(n–1) * (n + 2), при n > 1<p class=\"left_margin\">Чему равно значение функции F(5)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n >= 2:\n        return F(n - 1) * (n + 2)\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289423324, 'PYTHON', '', '840', 'Антон Сибгатулин'),
(917, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— <i>натуральное</i> число,  задан следующими соотношениями: <p><i>F(n)</i> = 2 при <i>n</i> ≤ 2; <p><i>F(n)</i> = <i>F</i>(<i>n</i> − 1) × <i>F</i>(<i>n</i> − 2) при <i>n</i>> 2. <p class=\"left_margin\">Чему равно значение функции <i>F</i>(5)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return 2\n    if n > 2:\n        return F(n - 1) * F(n - 2)\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289423496, 'PYTHON', '', '32', 'Антон Сибгатулин'),
(918, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(1) = 1;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i> − 1) + <i>n</i> если <i>n</i>>1<p class=\"left_margin\">Чему равно значение функции <i>F</i>(30)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return F(n - 1) + n\nprint(F(30))\n</code>', 19, 0, 0, 0, 0, 1671289423624, 'PYTHON', '', '465', 'Антон Сибгатулин');
INSERT INTO `informatic_task` (`id`, `texts`, `solution`, `type`, `views`, `likes`, `dislike`, `comments`, `time_of_public`, `lang`, `input_data_json`, `output_data_json`, `author`) VALUES
(919, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(1)</i> = 1; <p class=\"left_margin\"><i>F(n)</i> = <i>n</i> + <i>F</i>(<i>n</i> − 2), если <i>n</i>&#8239;&#8239;— нечётно, и <i>n</i>&#8239;>&#8239;1;<p class=\"left_margin\"><i>F(n)</i> = <i>n</i> × <i>F</i>(<i>n</i> − 1), если <i>n</i>&#8239;&#8239;— чётно. <p class=\"left_margin\">Чему равно значение функции F(40)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 1:\n        return 1\n    if n % 2 != 0 and n > 1:\n        return n + F(n - 2)\n    if n % 2 == 0:\n        return n * F(n - 1)\nprint(F(40))\n</code>', 19, 0, 0, 0, 0, 1671289424219, 'PYTHON', '', '16000', 'Антон Сибгатулин'),
(920, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1 <p class=\"left_margin\">F(n) = F(n–1) * F(n–1) − F(n–1) * n + 2 * n, при n >1 <p class=\"left_margin\">Чему равно значение функции F(4)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return F(n-1) * F(n-1) - F(n-1) * n + 2 * n\nprint(F(4))\n</code>', 19, 0, 0, 0, 0, 1671289424334, 'PYTHON', '', '20', 'Антон Сибгатулин'),
(921, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— <i>натуральное</i> число,  задан следующими соотношениями: <p><i>F(n)</i> = <i>n</i> &minus; 1 при <i>n</i> ≤ 2; <p><i>F(n)</i> = 3 × <i>F</i>(<i>n</i> − 1) &minus; <i>F</i>(<i>n</i> − 2) при <i>n</i>> 2. <p class=\"left_margin\">Чему равно значение функции <i>F</i>(6)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return n - 1\n    if n > 2:\n        return 3 * F(n - 1) - F(n - 2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289424470, 'PYTHON', '', '55', 'Антон Сибгатулин'),
(922, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n) и G(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 0<p class=\"left_margin\">F(n) = F(n–1) + n, при n >1<p class=\"left_margin\">G(1) = 1<p class=\"left_margin\">G(n) = G(n–1) * n, при n >1 <p class=\"left_margin\">Чему равно значение функции F(5) + G(5)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 0\n    if n > 1:\n        return F(n-1) + n\ndef G(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return G(n - 1) * n\nprint(F(5) + G(5))\n</code>', 19, 0, 0, 0, 0, 1671289424585, 'PYTHON', '', '134', 'Антон Сибгатулин'),
(923, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n задан следующими соотношениями:<p class=\"left_margin\">F(1) = 1; <p class=\"left_margin\">F(2)=2;<p class=\"left_margin\">F(n) = 3*F(n&minus;1) &minus; 2*F(n&minus;2), при n >2. <p class=\"left_margin\">Чему равно значение функции F(7)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return 3*F(n-1) - 2*F(n-2)\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289424696, 'PYTHON', '', '64', 'Антон Сибгатулин'),
(924, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n). где n — натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1;<p class=\"left_margin\">F(n) = F(n-1) * (n+1), при n >1.<p class=\"left_margin\">Чему равно значение функции F(5)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return F(n-1) * (n+1)\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289424809, 'PYTHON', '', '360', 'Антон Сибгатулин'),
(925, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим остаток от деления натурального числа <i>a</i> на натуральное число <i>b</i> как <i>a</i> mod <i>b</i>.<p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> − 1) + 1,  если <i>n</i> > 0 и при этом <i>n</i> mod 3 = 2;<p class=\"left_margin\"><i>F(n)</i> = <i>F</i>((<i>n</i> − <i>n</i> mod 3) / 3), если <i>n</i> > 0 и при этом <i>n</i> mod 3 < 2.<p class=\"left_margin\">Укажите наименьшее возможное <i>n</i>, для которого <i>F</i>(<i>n</i>)&#8239;&#8239;=&#8239;&#8239;6.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 3 == 2 and n > 0:\n        return F(n - 1) + 1\n    if n % 3 < 2:\n        return F((n - n % 3) // 3)\ni = 0\nwhile F(i) != 6:\n    i += 1\nprint(i)\n</code>', 19, 0, 0, 0, 0, 1671289424911, 'PYTHON', '', '728', 'Антон Сибгатулин'),
(926, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(n) = 5*F(n–1) + 3*n, при n >1 <p class=\"left_margin\">Чему равно значение функции F(4)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return 5*F(n-1) + 3*n\nprint(F(4))\n</code>', 19, 0, 0, 0, 0, 1671289425190, 'PYTHON', '', '332', 'Антон Сибгатулин'),
(927, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 2),  если <i>n</i> > 0 и при этом чётно;<p class=\"left_margin\"><i>F(n)</i> = 1 + <i>F</i>(<i>n</i> − 1), если <i>n</i> нечётно.<p class=\"left_margin\">Сколько существует таких чисел <i>n</i>, что 1 ≤ <i>n</i> ≤ 500 и <i>F</i>(<i>n</i>)&#8239;&#8239;=&#8239;&#8239;8?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0 and n > 0:\n        return F(n // 2)\n    if n % 2 != 0:\n        return 1 + F(n - 1)\nk = 0\nfor i in range(1, 501):\n    if F(i) == 8:\n        k += 1\nprint(k)\n</code>', 19, 0, 0, 0, 0, 1671289425308, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(928, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i><p class=\"left_margin\">F</i>(1) = 1<p><i><p class=\"left_margin\">F</i>(<i>n</i>) = <i>F</i>(<i>n</i>–1) + 2<sup><i>n</i>–1</sup> , если <i>n</i> > 1.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(10)?<p class=\"left_margin\">В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n >= 2:\n        return F(n - 1) + 2 ** (n - 1)\nprint(F(10))\n</code>', 19, 0, 0, 0, 0, 1671289425423, 'PYTHON', '', '1023', 'Антон Сибгатулин'),
(929, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значений функций <i>F(n)</i> и <i>G(n)</i>, где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F(1) = 1; G(1) = 1;</i><p><i>F(n) = F(n – 1) – G(n – 1), G(n) = F(n–1) + G(n – 1), при n &ge; 2</i><p class=\"left_margin\">Чему равно значение величины<i> F(5)/G(5)</i>? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 1:\n        return 1\n    if n >= 2:\n        return F(n - 1) - G(n - 1)\ndef G(n):\n    if n == 1:\n        return 1\n    if n >= 2:\n        return F(n - 1) + G(n - 1)\nprint(F(5) // G(5))\n</code>', 19, 0, 0, 0, 0, 1671289425543, 'PYTHON', '', '1', 'Антон Сибгатулин'),
(930, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Последовательность чисел Фибоначчи задается рекуррентным соотношением:<p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 1<p class=\"left_margin\">F(n) = F(n–2) + F(n–1), при n >2, где n – натуральное число.<p class=\"left_margin\">Чему равно восьмое число в последовательности Фибоначчи? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return F(n-2) + F(n-1)\nprint(F(8))\n</code>', 19, 0, 0, 0, 0, 1671289425660, 'PYTHON', '', '21', 'Антон Сибгатулин'),
(931, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:<p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(n) = F(n–1) * (2*n + 1), при n > 1<p class=\"left_margin\">Чему равно значение функции F(4)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n >= 2:\n        return F(n - 1) * (2 * n + 1)\nprint(F(4))\n</code>', 19, 0, 0, 0, 0, 1671289425764, 'PYTHON', '', '315', 'Антон Сибгатулин'),
(932, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значений функций <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(1) = 1; <i>F</i>(2) = 2; <i>F</i>(3) = 3;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i> − 3)*<i>n</i> при <i>n</i> >3<p class=\"left_margin\">Чему равно значение функции <i>F</i>(10)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        return F(n - 3) * n\nprint(F(10))\n</code>', 19, 0, 0, 0, 0, 1671289425883, 'PYTHON', '', '280', 'Антон Сибгатулин'),
(933, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1 <p class=\"left_margin\">F(2) = 3 <p class=\"left_margin\">F(n) = F(n–1) * n + F(n–2) * (n – 1) , при n >2 <p class=\"left_margin\">Чему равно значение функции F(5)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n > 2:\n        return F(n-1) * n + F(n-2) * (n-1)\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289425992, 'PYTHON', '', '309', 'Антон Сибгатулин'),
(934, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = n при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + 3×<i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(6)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return n\n    if n > 2:\n        return F(n - 1) + 3 * F(n - 2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289426127, 'PYTHON', '', '59', 'Антон Сибгатулин'),
(935, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n). где n - натуральное число, задан следующими соотношениями:<p class=\"left_margin\">F(1)= 1; F(2)=1;<p class=\"left_margin\">F(n) = F(n-2) * n при n >2.<p class=\"left_margin\">Чему равно значение функции F(7)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return F(n-2) * n\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289426228, 'PYTHON', '', '105', 'Антон Сибгатулин'),
(936, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 2 <p class=\"left_margin\">F(n) = 2 * F(n–1) + (n – 2) * F(n–2), при n >2<p class=\"left_margin\">Чему равно значение функции F(6)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return 2 * F(n-1) + (n-2) * F(n-2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289426493, 'PYTHON', '', '142', 'Антон Сибгатулин'),
(937, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = 2 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + 3&#8239;·&#8239;<i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(5)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return 2\n    if n > 2:\n        return F(n - 1) + 3 * F(n - 2)\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289426612, 'PYTHON', '', '38', 'Антон Сибгатулин'),
(938, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями:<p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(n) = F(n–1) * n, при n >1<p class=\"left_margin\">Чему равно значение функции F(5)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return F(n-1) * n\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289426725, 'PYTHON', '', '120', 'Антон Сибгатулин'),
(939, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n). где n&#8239;&#8239;— натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1;<p class=\"left_margin\">F(n) = F(n-1) * (n+1), при n >1.<p class=\"left_margin\">Чему равно значение функции F(4)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n > 1:\n        return F(n-1) * (n+1)\nprint(F(4))\n</code>', 19, 0, 0, 0, 0, 1671289426837, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(940, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = 1 при <i>n</i> ≤ 2;<p><i>F</i>(<i>n</i>) = 2&#8239;&#8239;·&#8239;&#8239;<i>F</i>(<i>n</i>&#8239;− 1) + <i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(6)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return 1\n    if n > 2:\n        return 2*F(n - 1) + F(n - 2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289426945, 'PYTHON', '', '41', 'Антон Сибгатулин'),
(941, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Последовательность чисел Люка задается рекуррентным соотношением:<p class=\"left_margin\">F(1) = 2<p class=\"left_margin\">F(2) = 1<p class=\"left_margin\">F(n) = F(n–2) + F(n–1), при n >2, где n – натуральное число.<p class=\"left_margin\">Чему равно десятое число в последовательности Люка? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    if n > 2:\n        return F(n-2) + F(n-1)\nprint(F(10))\n</code>', 19, 0, 0, 0, 0, 1671289427051, 'PYTHON', '', '76', 'Антон Сибгатулин'),
(942, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Последовательность чисел Падована задается рекуррентным соотношением:<p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 1<p class=\"left_margin\">F(3) = 1<p class=\"left_margin\">F(n) = F(n–3) + F(n–2), при n >3, где n – натуральное число.<p class=\"left_margin\">Чему равно двенадцатое число в последовательности Падована? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n > 3:\n        return F(n-3) + F(n-2)\nprint(F(12))\n</code>', 19, 0, 0, 0, 0, 1671289427160, 'PYTHON', '', '16', 'Антон Сибгатулин'),
(943, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = n + 4 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + <i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(6)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return n + 4\n    if n > 2:\n        return F(n - 1) + F(n - 2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289427279, 'PYTHON', '', '45', 'Антон Сибгатулин'),
(944, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Последовательность чисел Падована задается рекуррентным соотношением:<p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 1<p class=\"left_margin\">F(3) = 1<p class=\"left_margin\">F(n) = F(n–3) + F(n–2), при n >3, где n – натуральное число.<p class=\"left_margin\">Чему равно десятое число в последовательности Падована? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n > 3:\n        return F(n-3) + F(n-2)\nprint(F(10))\n</code>', 19, 0, 0, 0, 0, 1671289427406, 'PYTHON', '', '9', 'Антон Сибгатулин'),
(945, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = n при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + 2×<i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(6)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return n\n    if n > 2:\n        return F(n - 1) + 2 * F(n - 2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289427534, 'PYTHON', '', '32', 'Антон Сибгатулин'),
(946, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 2),  если <i>n</i> > 0 и при этом <i>n</i> чётно;<p class=\"left_margin\"><i>F(n)</i> = 1 + <i>F</i>(<i>n</i> − 1), если <i>n</i> нечётно.<p class=\"left_margin\">Назовите минимальное значение <i>n</i>, для которого F(<i>n</i>) = 12.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0 and n > 0:\n        return F(n // 2)\n    if n % 2 != 0:\n        return 1 + F(n - 1)\ni = 0\nwhile F(i) != 12:\n    i += 1\nprint(i)\n</code>', 19, 0, 0, 0, 0, 1671289427648, 'PYTHON', '', '4095', 'Антон Сибгатулин'),
(947, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = 1 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = 2&#8239;·&#8239;<i>F</i>(<i>n</i>&#8239;− 1) + <i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(7)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return 1\n    if n > 2:\n        return 2 * F(n - 1) + F(n - 2)\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289427826, 'PYTHON', '', '99', 'Антон Сибгатулин'),
(948, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = <i>n</i> + 1 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + 3&#8239;·&#8239;<i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(4)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return n + 1\n    if n > 2:\n        return F(n - 1) + 3 * F(n - 2)\nprint(F(4))\n</code>', 19, 0, 0, 0, 0, 1671289427947, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(949, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 2),  если <i>n</i> > 0 и при этом чётно;<p class=\"left_margin\"><i>F(n)</i> = 1 + <i>F</i>(<i>n</i> − 1), если <i>n</i> нечётно.<p class=\"left_margin\">Сколько существует таких чисел <i>n</i>, что 1 ≤ <i>n</i> ≤ 500 и <i>F</i>(<i>n</i>)&#8239;&#8239;=&#8239;&#8239;3?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0 and n > 0:\n        return F(n // 2)\n    if n % 2 != 0:\n        return 1 + F(n - 1)\nk = 0\nfor i in range(1, 501):\n    if F(i) == 3:\n        k += 1\nprint(k)\n</code>', 19, 0, 0, 0, 0, 1671289428100, 'PYTHON', '', '84', 'Антон Сибгатулин'),
(950, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Последовательность чисел трибоначчи задается рекуррентным соотношением:<p class=\"left_margin\">F(1) = 0<p class=\"left_margin\">F(2) = 1<p class=\"left_margin\">F(3) = 1<p class=\"left_margin\">F(n) = F(n–3) + F(n–2) + F(n–1), при n >3, где n – натуральное число.<p class=\"left_margin\">Чему равно девятое число в последовательности трибоначчи? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n > 3:\n        return F(n-3) + F(n-2) + F(n-1)\nprint(F(9))\n</code>', 19, 0, 0, 0, 0, 1671289428232, 'PYTHON', '', '44', 'Антон Сибгатулин'),
(951, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— <i>натуральное</i> число,  задан следующими соотношениями: <p><i>F(n)</i> = <i>n</i> при <i>n</i> ≤ 2; <p><i>F(n)</i> = <i>F</i>(<i>n</i> − 1) × <i>F</i>(<i>n</i> − 2) при <i>n</i>> 2. <p class=\"left_margin\">Чему равно значение функции <i>F</i>(6)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return n\n    if n > 2:\n        return F(n - 1) * F(n - 2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289428390, 'PYTHON', '', '32', 'Антон Сибгатулин'),
(952, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 2 <p class=\"left_margin\">F(n) = F(n–1) − F(n–2) + 2 * n, при n >2 <p class=\"left_margin\">Чему равно значение функции F(6)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return F(n-1) - F(n-2) + 2 * n\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289428551, 'PYTHON', '', '15', 'Антон Сибгатулин'),
(953, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = 2 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + 2&#8239;·&#8239;<i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(5)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return 2\n    if n > 2:\n        return  F(n - 1) + 2 * F(n - 2)\nprint(F(5))\n</code>', 19, 0, 0, 0, 0, 1671289428669, 'PYTHON', '', '22', 'Антон Сибгатулин'),
(954, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(1)</i> = 1; <p class=\"left_margin\"><i>F(n)</i> = <i>n</i> + <i>F</i>(<i>n</i> − 2), если <i>n</i>&#8239;&#8239;— нечётно, и <i>n</i>&#8239;>&#8239;1;<p class=\"left_margin\"><i>F(n)</i> = <i>n</i> × <i>F</i>(<i>n</i> − 1), если <i>n</i>&#8239;&#8239;— чётно. <p class=\"left_margin\">Чему равно значение функции F(60)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 1:\n        return 1\n    if n % 2 != 0 and n > 1:\n        return n + F(n - 2)\n    if n % 2 == 0:\n        return n * F(n - 1)\nprint(F(60))\n</code>', 19, 0, 0, 0, 0, 1671289428777, 'PYTHON', '', '54000', 'Антон Сибгатулин'),
(955, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Последовательность чисел трибоначчи задается рекуррентным соотношением:<p class=\"left_margin\">F(1) = 0<p class=\"left_margin\">F(2) = 1<p class=\"left_margin\">F(3) = 1<p class=\"left_margin\">F(n) = F(n–3) + F(n–2) + F(n–1), при n >3, где n – натуральное число.<p class=\"left_margin\">Чему равно одиннадцатое число в последовательности трибоначчи? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n > 3:\n        return F(n-3) + F(n-2) + F(n-1)\nprint(F(11))\n</code>', 19, 0, 0, 0, 0, 1671289428902, 'PYTHON', '', '149', 'Антон Сибгатулин'),
(956, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = <i>n</i> + 1 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + 2&#8239;·&#8239;<i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(4)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return n + 1\n    if n > 2:\n        return F(n - 1) + 2 * F(n - 2)\nprint(F(4))\n</code>', 19, 0, 0, 0, 0, 1671289429026, 'PYTHON', '', '13', 'Антон Сибгатулин'),
(957, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 5;F(2) = 5;<p class=\"left_margin\">F(n) = 5*F(n &minus; 1) &minus; 4*F(n &minus; 2) при n >2. <p class=\"left_margin\">Чему равно значение функции F(13)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 5\n    if n == 2:\n        return 5\n    if n > 2:\n        return 5*F(n-1) - 4*F(n-2)\nprint(F(13))\n</code>', 19, 0, 0, 0, 0, 1671289429148, 'PYTHON', '', '5', 'Антон Сибгатулин'),
(958, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> − 1) + 1,  если <i>n</i> нечётно;<p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 2), если <i>n</i> > 0 и при этом <i>n</i> чётно.<p class=\"left_margin\">Укажите количество таких значений <i>n</i>&#8239;&lt;&#8239;1&#8239;000&#8239;000&#8239;000, для которых <i>F</i>(<i>n</i>)&#8239;&#8239;=&#8239;&#8239;2.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \nk = 0\nfor i in range(2, 31):\n    k = k + i - 1\nprint(k)\n</code>', 19, 0, 0, 0, 0, 1671289429332, 'PYTHON', '', '435', 'Антон Сибгатулин'),
(959, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n – натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 1 <p class=\"left_margin\">F(n) = F(n–1) * n − 2 * F(n–2), при n >2 <p class=\"left_margin\">Чему равно значение функции F(6)? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return  F(n-1) * n - 2 * F(n-2)\nprint(F(6))\n</code>', 19, 0, 0, 0, 0, 1671289429442, 'PYTHON', '', '44', 'Антон Сибгатулин'),
(960, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(n)</i> = 1 при <i>n</i> = 1; <p class=\"left_margin\"><i>F(n)</i> = <i>n</i> + <i>F</i>(<i>n</i> − 1), если <i>n</i>&#8239;&#8239;— чётно;<p class=\"left_margin\"><i>F(n)</i> = 2 × <i>F</i>(<i>n</i> − 2), если <i>n</i>> 1 и при этом <i>n</i>&#8239;&#8239;— нечётно. <p class=\"left_margin\">Чему равно значение функции F(26)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + F(n - 1)\n    if n % 2 != 0 and n > 1:\n        return 2 * F(n - 2)\nprint(F(26))\n</code>', 19, 0, 0, 0, 0, 1671289429567, 'PYTHON', '', '4122', 'Антон Сибгатулин'),
(961, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции F(n), где n - натуральное число, задан следующими соотношениями: <p class=\"left_margin\">F(1) = 3;F(2)=3;<p class=\"left_margin\">F(n) = 5*F(n-1) &minus; 4*F(n&minus;2) при n >2.<p class=\"left_margin\">Чему равно значение функции F(15)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 3\n    if n == 2:\n        return 3\n    if n > 2:\n        return 5*F(n-1) - 4*F(n-2)\nprint(F(15))\n</code>', 19, 0, 0, 0, 0, 1671289430194, 'PYTHON', '', '3', 'Антон Сибгатулин'),
(962, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = 1 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + 2&#8239;·&#8239;<i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(7)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return 1\n    if n > 2:\n        return F(n - 1) + 2 * F(n - 2)\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289430323, 'PYTHON', '', '43', 'Антон Сибгатулин'),
(963, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Последовательность чисел Фибоначчи задается рекуррентным соотношением:<p class=\"left_margin\">F(1) = 1<p class=\"left_margin\">F(2) = 1<p class=\"left_margin\">F(n) = F(n–2) + F(n–1), при n >2, где n – натуральное число.<p class=\"left_margin\">Чему равно девятое число в последовательности Фибоначчи? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n > 2:\n        return F(n-2) + F(n-1)\nprint(F(9))\n</code>', 19, 0, 0, 0, 0, 1671289430502, 'PYTHON', '', '34', 'Антон Сибгатулин'),
(964, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через mod(<i>a</i>, <i>b</i>) остаток от деления натурального числа <i>a</i> на натуральное число <i>b</i>. Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— целое неотрицательное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>F</i>(<i>n</i> / 3),  если <i>n</i> > 0 и при этом  mod(<i>n</i>, 3)&#8239;&#8239;=&#8239;&#8239;0;<p class=\"left_margin\"><i>F(n)</i> = mod(<i>n</i>, 3) + <i>F</i>(<i>n</i> − mod(<i>n</i>, 3)), если mod(<i>n</i>, 3) > 0.<p class=\"left_margin\">Назовите минимальное значение <i>n</i>, для которого F(<i>n</i>) = 11.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 3 == 0 and n > 0:\n        return F(n // 3)\n    if n % 3 > 0:\n        return n % 3 + F(n - (n % 3))\ni = 0\nwhile F(i) != 11:\n    i += 1\nprint(i)\n</code>', 19, 0, 0, 0, 0, 1671289430847, 'PYTHON', '', '485', 'Антон Сибгатулин'),
(965, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Обозначим через <i>a</i> mod <i>b</i> остаток от деления натурального числа <i>a</i> на натуральное число <i>b</i>. Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p class=\"left_margin\"><i>F(0)</i> = 0; <p class=\"left_margin\"><i>F(n)</i> = <i>n</i> + <i>F</i>(<i>n</i> − 3), если <i>n</i>&#8239;mod&#8239;3&#8239;&#8239;=&#8239;&#8239;0, и <i>n</i>&#8239;>&#8239;0;<p class=\"left_margin\"><i>F(n)</i> = <i>n</i> + <i>F</i>(<i>n</i> − (<i>n</i>&#8239;mod&#8239;3)), если <i>n</i>&#8239;mod&#8239;3&#8239;>&#8239;0. <p class=\"left_margin\">Чему равно значение функции F(22)?</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n == 0:\n        return 0\n    if n % 3 == 0 and n > 0:\n        return n + F(n - 3)\n    if n % 3 > 0:\n        return n + F(n - (n % 3))\nprint(F(22))\n</code>', 19, 0, 0, 0, 0, 1671289430982, 'PYTHON', '', '106', 'Антон Сибгатулин'),
(966, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = <i>n</i> + 3 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + <i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(7)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return n + 3\n    if n > 2:\n        return F(n - 1) + F(n - 2)\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289431143, 'PYTHON', '', '60', 'Антон Сибгатулин'),
(967, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = <i>n</i> + 1 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = 2&#8239;·&#8239;<i>F</i>(<i>n</i>&#8239;− 1) + <i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(4)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n <= 2:\n        return n + 1\n    if n > 2:\n        return 2*F(n - 1) + F(n - 2)\nprint(F(4))\n</code>', 19, 0, 0, 0, 0, 1671289431305, 'PYTHON', '', '19', 'Антон Сибгатулин'),
(968, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Последовательность чисел Люка задается рекуррентным соотношением:<p class=\"left_margin\">F(1) = 2<p class=\"left_margin\">F(2) = 1<p class=\"left_margin\">F(n) = F(n–2) + F(n–1), при n >2, где n – натуральное число.<p class=\"left_margin\">Чему равно восьмое число в последовательности Люка? <p><i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code> \ndef F(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    if n > 2:\n        return F(n-2) + F(n-1)\nprint(F(8))\n</code>', 19, 0, 0, 0, 0, 1671289431423, 'PYTHON', '', '29', 'Антон Сибгатулин'),
(969, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F(n)</i>, где <i>n</i>&#8239;&#8239;— <i>натуральное</i> число,  задан следующими соотношениями: <p><i>F(n)</i> = <i>n</i> + 1 при <i>n</i> ≤ 2; <p><i>F(n)</i> = <i>F</i>(<i>n</i> − 1) × <i>F</i>(<i>n</i> − 2) при <i>n</i>> 2. <p class=\"left_margin\">Чему равно значение функции <i>F</i>(4)? В ответе запишите только натуральное число.</div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return n + 1\n    if n > 2:\n        return F(n - 1) * F(n - 2)\nprint(F(4))\n</code>', 19, 0, 0, 0, 0, 1671289431553, 'PYTHON', '', '18', 'Антон Сибгатулин'),
(970, '<div  \"100%\" class=\"pbody\"><p class=\"left_margin\">Алгоритм вычисления значения функции <i>F</i>(<i>n</i>), где <i>n</i>&#8239;&#8239;— натуральное число, задан следующими соотношениями:<p><i>F</i>(<i>n</i>) = 1 при <i>n</i> &le; 2;<p><i>F</i>(<i>n</i>) = <i>F</i>(<i>n</i>&#8239;− 1) + 3&#8239;·&#8239;<i>F</i>(<i>n</i> − 2) при <i>n</i> > 2.<p class=\"left_margin\">Чему равно значение функции <i>F</i>(7)? <i>В ответе запишите только натуральное число.</i></div>', 'Решим задание с помощью языка программирования Python:\n<code>  \ndef F(n):\n    if n <= 2:\n        return 1\n    if n > 2:\n        return F(n - 1) + 3 * F(n - 2)\nprint(F(7))\n</code>', 19, 0, 0, 0, 0, 1671289431662, 'PYTHON', '', '97', 'Антон Сибгатулин');

-- --------------------------------------------------------

--
-- Структура таблицы `options`
--

CREATE TABLE `options` (
  `id` int(11) NOT NULL,
  `time` bigint(20) NOT NULL,
  `type` int(11) NOT NULL,
  `task` varchar(50) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `options`
--

INSERT INTO `options` (`id`, `time`, `type`, `task`) VALUES
(1, 1670859398554, 0, 'def'),
(2, 1670859492709, 0, 'def'),
(3, 1670859682127, 0, 'def'),
(4, 1670859731314, 0, 'def'),
(5, 1670871340647, 0, 'def'),
(6, 1670871885416, 0, 'def'),
(7, 1670872718260, 0, 'def'),
(8, 1670875868905, 0, 'def'),
(9, 1670875970698, 0, 'def'),
(10, 1670877326628, 0, 'def'),
(11, 1670878198355, 0, 'def'),
(12, 1670878366005, 0, 'def'),
(13, 1670909869185, 0, 'def'),
(14, 1670914097497, 0, 'def'),
(15, 1670917815023, 0, 'def'),
(16, 1670924231434, 0, 'def'),
(17, 1670934476563, 0, 'def'),
(18, 1670935632535, 0, 'def'),
(19, 1670936173180, 0, 'def'),
(20, 1670945063696, 0, 'def'),
(21, 1670946579449, 0, 'def'),
(22, 1670946770447, 0, 'def'),
(23, 1670949622192, 0, 'def'),
(24, 1670953470491, 0, 'def'),
(25, 1670960036281, 0, 'def'),
(26, 1670993317526, 0, 'def'),
(27, 1671035045058, 0, 'def'),
(28, 1671035115229, 0, 'def'),
(29, 1671043813669, 0, 'def'),
(30, 1671044394969, 0, 'def'),
(31, 1671113119246, 0, 'def'),
(32, 1671114211188, 0, 'def'),
(33, 1671114351879, 0, 'def'),
(34, 1671117836847, 0, 'def'),
(35, 1671293129458, 0, 'def'),
(36, 1671301382568, 0, 'def'),
(37, 1671304717865, 0, 'def'),
(38, 1671354128169, 0, 'def'),
(39, 1671354384546, 0, 'def'),
(40, 1671354467591, 0, 'def'),
(41, 1671361044681, 0, 'def'),
(42, 1674157203745, 0, 'def'),
(43, 1674158354388, 0, 'def'),
(44, 1677139490725, 0, 'def'),
(45, 1680459322516, 0, 'def');

-- --------------------------------------------------------

--
-- Структура таблицы `taskofoption`
--

CREATE TABLE `taskofoption` (
  `id` bigint(20) NOT NULL,
  `id_option` int(11) NOT NULL,
  `id_task` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `taskofoption`
--

INSERT INTO `taskofoption` (`id`, `id_option`, `id_task`) VALUES
(1, 4, 115),
(2, 4, 83),
(3, 4, 195),
(4, 4, 180),
(5, 4, 54),
(6, 4, 134),
(7, 4, 220),
(8, 4, 28),
(9, 4, 24),
(10, 4, 88),
(11, 4, 236),
(12, 4, 104),
(13, 4, 82),
(14, 4, 238),
(15, 4, 53),
(16, 5, 58),
(17, 5, 82),
(18, 5, 210),
(19, 5, 233),
(20, 5, 261),
(21, 5, 225),
(22, 5, 216),
(23, 5, 80),
(24, 5, 31),
(25, 5, 267),
(26, 5, 217),
(27, 5, 137),
(28, 5, 50),
(29, 5, 73),
(30, 5, 11),
(31, 6, 173),
(32, 6, 256),
(33, 6, 261),
(34, 6, 102),
(35, 6, 169),
(36, 6, 211),
(37, 6, 99),
(38, 6, 32),
(39, 6, 269),
(40, 6, 86),
(41, 6, 25),
(42, 6, 273),
(43, 6, 89),
(44, 6, 64),
(45, 6, 240),
(46, 7, 285),
(47, 7, 26),
(48, 7, 234),
(49, 7, 253),
(50, 7, 195),
(51, 7, 144),
(52, 7, 104),
(53, 7, 74),
(54, 7, 129),
(55, 7, 145),
(56, 7, 263),
(57, 7, 75),
(58, 7, 166),
(59, 7, 88),
(60, 7, 164),
(61, 8, 183),
(62, 8, 80),
(63, 8, 310),
(64, 8, 162),
(65, 8, 275),
(66, 8, 301),
(67, 8, 276),
(68, 8, 132),
(69, 8, 309),
(70, 8, 104),
(71, 8, 71),
(72, 8, 4),
(73, 8, 96),
(74, 8, 267),
(75, 8, 260),
(76, 9, 319),
(77, 9, 103),
(78, 9, 177),
(79, 9, 27),
(80, 9, 40),
(81, 9, 313),
(82, 9, 274),
(83, 9, 117),
(84, 9, 23),
(85, 9, 216),
(86, 9, 18),
(87, 9, 230),
(88, 9, 156),
(89, 9, 50),
(90, 9, 29),
(91, 10, 220),
(92, 10, 212),
(93, 10, 100),
(94, 10, 310),
(95, 10, 28),
(96, 10, 316),
(97, 10, 247),
(98, 10, 93),
(99, 10, 244),
(100, 10, 43),
(101, 10, 124),
(102, 10, 138),
(103, 10, 48),
(104, 10, 165),
(105, 10, 25),
(106, 11, 209),
(107, 11, 154),
(108, 11, 26),
(109, 11, 305),
(110, 11, 310),
(111, 11, 27),
(112, 11, 168),
(113, 11, 233),
(114, 11, 105),
(115, 11, 88),
(116, 11, 205),
(117, 11, 69),
(118, 11, 85),
(119, 11, 8),
(120, 11, 169),
(121, 12, 294),
(122, 12, 290),
(123, 12, 150),
(124, 12, 261),
(125, 12, 250),
(126, 12, 108),
(127, 12, 142),
(128, 12, 268),
(129, 12, 183),
(130, 12, 173),
(131, 12, 100),
(132, 12, 56),
(133, 12, 116),
(134, 12, 254),
(135, 12, 68),
(136, 13, 94),
(137, 13, 240),
(138, 13, 74),
(139, 13, 119),
(140, 13, 198),
(141, 13, 144),
(142, 13, 200),
(143, 13, 68),
(144, 13, 300),
(145, 13, 50),
(146, 13, 65),
(147, 13, 63),
(148, 13, 29),
(149, 13, 253),
(150, 13, 186),
(151, 14, 82),
(152, 14, 276),
(153, 14, 230),
(154, 14, 81),
(155, 14, 70),
(156, 14, 226),
(157, 14, 49),
(158, 14, 18),
(159, 14, 288),
(160, 14, 140),
(161, 14, 76),
(162, 14, 87),
(163, 14, 151),
(164, 14, 88),
(165, 14, 207),
(166, 15, 36),
(167, 15, 23),
(168, 15, 14),
(169, 15, 131),
(170, 15, 161),
(171, 15, 263),
(172, 15, 130),
(173, 15, 274),
(174, 15, 264),
(175, 15, 33),
(176, 15, 281),
(177, 15, 154),
(178, 15, 43),
(179, 15, 214),
(180, 15, 230),
(181, 16, 171),
(182, 16, 20),
(183, 16, 240),
(184, 16, 265),
(185, 16, 250),
(186, 16, 107),
(187, 16, 153),
(188, 16, 319),
(189, 16, 9),
(190, 16, 151),
(191, 16, 316),
(192, 16, 33),
(193, 16, 239),
(194, 16, 140),
(195, 16, 90),
(196, 17, 91),
(197, 17, 34),
(198, 17, 319),
(199, 17, 109),
(200, 17, 245),
(201, 17, 48),
(202, 17, 276),
(203, 17, 291),
(204, 17, 214),
(205, 17, 180),
(206, 17, 178),
(207, 17, 41),
(208, 17, 307),
(209, 17, 78),
(210, 17, 284),
(211, 18, 292),
(212, 18, 15),
(213, 18, 124),
(214, 18, 65),
(215, 18, 298),
(216, 18, 266),
(217, 18, 222),
(218, 18, 199),
(219, 18, 98),
(220, 18, 75),
(221, 18, 144),
(222, 18, 138),
(223, 18, 297),
(224, 18, 251),
(225, 18, 208),
(226, 19, 54),
(227, 19, 47),
(228, 19, 304),
(229, 19, 60),
(230, 19, 82),
(231, 19, 126),
(232, 19, 116),
(233, 19, 147),
(234, 19, 182),
(235, 19, 258),
(236, 19, 242),
(237, 19, 190),
(238, 19, 283),
(239, 19, 57),
(240, 19, 268),
(241, 20, 195),
(242, 20, 290),
(243, 20, 278),
(244, 20, 113),
(245, 20, 3),
(246, 20, 274),
(247, 20, 215),
(248, 20, 187),
(249, 20, 70),
(250, 20, 117),
(251, 20, 225),
(252, 20, 122),
(253, 20, 61),
(254, 20, 87),
(255, 20, 179),
(256, 21, 16),
(257, 21, 191),
(258, 21, 117),
(259, 21, 297),
(260, 21, 310),
(261, 21, 89),
(262, 21, 287),
(263, 21, 270),
(264, 21, 219),
(265, 21, 250),
(266, 21, 122),
(267, 21, 239),
(268, 21, 59),
(269, 21, 255),
(270, 21, 224),
(271, 22, 114),
(272, 22, 136),
(273, 22, 180),
(274, 22, 223),
(275, 22, 273),
(276, 22, 279),
(277, 22, 205),
(278, 22, 76),
(279, 22, 99),
(280, 22, 228),
(281, 22, 94),
(282, 22, 106),
(283, 22, 307),
(284, 22, 310),
(285, 22, 61),
(286, 23, 5),
(287, 23, 86),
(288, 23, 37),
(289, 23, 28),
(290, 23, 254),
(291, 23, 242),
(292, 23, 98),
(293, 23, 84),
(294, 23, 307),
(295, 23, 265),
(296, 23, 306),
(297, 23, 80),
(298, 23, 263),
(299, 23, 240),
(300, 23, 148),
(301, 24, 216),
(302, 24, 276),
(303, 24, 125),
(304, 24, 202),
(305, 24, 285),
(306, 24, 172),
(307, 24, 44),
(308, 24, 237),
(309, 24, 272),
(310, 24, 51),
(311, 24, 255),
(312, 24, 15),
(313, 24, 56),
(314, 24, 105),
(315, 24, 13),
(316, 25, 212),
(317, 25, 31),
(318, 25, 26),
(319, 25, 225),
(320, 25, 161),
(321, 25, 283),
(322, 25, 246),
(323, 25, 211),
(324, 25, 46),
(325, 25, 178),
(326, 25, 106),
(327, 25, 295),
(328, 25, 271),
(329, 25, 53),
(330, 25, 44),
(331, 26, 247),
(332, 26, 240),
(333, 26, 38),
(334, 26, 49),
(335, 26, 218),
(336, 26, 311),
(337, 26, 25),
(338, 26, 186),
(339, 26, 172),
(340, 26, 228),
(341, 26, 201),
(342, 26, 216),
(343, 26, 155),
(344, 26, 104),
(345, 26, 61),
(346, 27, 118),
(347, 27, 31),
(348, 27, 141),
(349, 27, 270),
(350, 27, 215),
(351, 27, 74),
(352, 27, 225),
(353, 27, 24),
(354, 27, 204),
(355, 27, 6),
(356, 27, 106),
(357, 27, 71),
(358, 27, 130),
(359, 27, 238),
(360, 27, 254),
(361, 28, 182),
(362, 28, 187),
(363, 28, 7),
(364, 28, 173),
(365, 28, 174),
(366, 28, 164),
(367, 28, 180),
(368, 28, 289),
(369, 28, 42),
(370, 28, 298),
(371, 28, 292),
(372, 28, 21),
(373, 28, 175),
(374, 28, 276),
(375, 28, 131),
(376, 29, 79),
(377, 29, 169),
(378, 29, 322),
(379, 29, 52),
(380, 29, 35),
(381, 29, 70),
(382, 29, 253),
(383, 29, 286),
(384, 29, 68),
(385, 29, 153),
(386, 29, 99),
(387, 29, 96),
(388, 29, 106),
(389, 29, 176),
(390, 29, 123),
(391, 30, 158),
(392, 30, 291),
(393, 30, 43),
(394, 30, 100),
(395, 30, 281),
(396, 30, 76),
(397, 30, 308),
(398, 30, 215),
(399, 30, 121),
(400, 30, 311),
(401, 30, 10),
(402, 30, 161),
(403, 30, 200),
(404, 30, 309),
(405, 30, 289),
(406, 31, 168),
(407, 31, 301),
(408, 31, 261),
(409, 31, 192),
(410, 31, 232),
(411, 31, 240),
(412, 31, 181),
(413, 31, 330),
(414, 31, 230),
(415, 31, 39),
(416, 31, 304),
(417, 31, 114),
(418, 31, 292),
(419, 31, 270),
(420, 31, 320),
(421, 32, 45),
(422, 32, 185),
(423, 32, 307),
(424, 32, 230),
(425, 32, 104),
(426, 32, 208),
(427, 32, 241),
(428, 32, 257),
(429, 32, 177),
(430, 32, 76),
(431, 32, 51),
(432, 32, 115),
(433, 32, 184),
(434, 32, 140),
(435, 32, 211),
(436, 33, 151),
(437, 33, 21),
(438, 33, 89),
(439, 33, 274),
(440, 33, 310),
(441, 33, 204),
(442, 33, 254),
(443, 33, 90),
(444, 33, 41),
(445, 33, 6),
(446, 33, 283),
(447, 33, 177),
(448, 33, 43),
(449, 33, 5),
(450, 33, 239),
(451, 1, 320),
(452, 1, 321),
(453, 1, 322),
(454, 1, 323),
(455, 1, 324),
(456, 1, 325),
(457, 2, 326),
(458, 2, 327),
(459, 2, 328),
(460, 2, 329),
(461, 2, 330),
(462, 2, 331),
(463, 3, 332),
(464, 3, 333),
(465, 3, 334),
(466, 3, 335),
(467, 3, 336),
(468, 34, 25),
(469, 34, 265),
(470, 34, 141),
(471, 34, 250),
(472, 34, 180),
(473, 34, 177),
(474, 34, 242),
(475, 34, 167),
(476, 34, 273),
(477, 34, 305),
(478, 34, 36),
(479, 34, 46),
(480, 34, 70),
(481, 34, 135),
(482, 34, 162),
(483, 35, 709),
(484, 35, 406),
(485, 35, 711),
(486, 35, 405),
(487, 35, 430),
(488, 35, 766),
(489, 35, 678),
(490, 35, 686),
(491, 35, 638),
(492, 35, 595),
(493, 35, 506),
(494, 35, 378),
(495, 35, 745),
(496, 35, 626),
(497, 35, 413),
(498, 36, 604),
(499, 36, 683),
(500, 36, 411),
(501, 36, 575),
(502, 36, 631),
(503, 36, 338),
(504, 36, 396),
(505, 36, 731),
(506, 36, 611),
(507, 36, 453),
(508, 36, 849),
(509, 36, 740),
(510, 36, 621),
(511, 36, 651),
(512, 36, 763),
(513, 36, 787),
(514, 36, 341),
(515, 36, 599),
(516, 36, 409),
(517, 36, 602),
(518, 37, 861),
(519, 37, 711),
(520, 37, 497),
(521, 37, 450),
(522, 37, 430),
(523, 37, 876),
(524, 37, 803),
(525, 37, 472),
(526, 37, 820),
(527, 37, 524),
(528, 37, 390),
(529, 37, 436),
(530, 37, 622),
(531, 37, 372),
(532, 37, 567),
(533, 37, 597),
(534, 37, 796),
(535, 37, 370),
(536, 37, 756),
(537, 37, 721),
(538, 38, 775),
(539, 38, 340),
(540, 38, 445),
(541, 38, 505),
(542, 38, 772),
(543, 38, 348),
(544, 38, 679),
(545, 38, 349),
(546, 38, 347),
(547, 38, 855),
(548, 38, 346),
(549, 38, 689),
(550, 38, 587),
(551, 38, 378),
(552, 38, 859),
(553, 38, 345),
(554, 38, 471),
(555, 38, 645),
(556, 38, 669),
(557, 38, 513),
(558, 39, 415),
(559, 39, 339),
(560, 39, 541),
(561, 39, 490),
(562, 39, 607),
(563, 39, 942),
(564, 39, 546),
(565, 39, 608),
(566, 39, 376),
(567, 39, 662),
(568, 39, 469),
(569, 39, 363),
(570, 39, 493),
(571, 39, 601),
(572, 39, 352),
(573, 39, 514),
(574, 39, 609),
(575, 39, 444),
(576, 39, 439),
(577, 39, 343),
(578, 40, 873),
(579, 40, 404),
(580, 40, 857),
(581, 40, 864),
(582, 40, 568),
(583, 40, 371),
(584, 40, 340),
(585, 40, 560),
(586, 40, 366),
(587, 40, 882),
(588, 40, 732),
(589, 40, 738),
(590, 40, 408),
(591, 40, 416),
(592, 40, 759),
(593, 41, 513),
(594, 41, 684),
(595, 41, 338),
(596, 41, 428),
(597, 41, 585),
(598, 41, 769),
(599, 41, 700),
(600, 41, 829),
(601, 41, 435),
(602, 41, 564),
(603, 41, 415),
(604, 41, 612),
(605, 41, 868),
(606, 41, 357),
(607, 41, 358),
(608, 41, 420),
(609, 41, 766),
(610, 41, 717),
(611, 41, 491),
(612, 41, 572),
(613, 42, 381),
(614, 42, 348),
(615, 42, 569),
(616, 42, 552),
(617, 42, 376),
(618, 42, 559),
(619, 42, 557),
(620, 42, 427),
(621, 42, 683),
(622, 42, 697),
(623, 42, 563),
(624, 42, 513),
(625, 42, 705),
(626, 42, 708),
(627, 42, 475),
(628, 43, 499),
(629, 43, 470),
(630, 43, 408),
(631, 43, 586),
(632, 43, 686),
(633, 43, 363),
(634, 43, 660),
(635, 43, 530),
(636, 43, 738),
(637, 43, 329),
(638, 43, 639),
(639, 43, 637),
(640, 43, 429),
(641, 43, 578),
(642, 43, 635),
(643, 43, 365),
(644, 43, 646),
(645, 43, 451),
(646, 43, 533),
(647, 43, 565),
(648, 43, 405),
(649, 43, 445),
(650, 43, 664),
(651, 43, 574),
(652, 43, 688),
(653, 44, 330),
(654, 44, 332),
(655, 44, 320),
(656, 44, 331),
(657, 44, 334),
(658, 44, 324),
(659, 44, 327),
(660, 44, 322),
(661, 44, 335),
(662, 44, 323),
(663, 44, 321),
(664, 44, 329),
(665, 44, 326),
(666, 44, 325),
(667, 44, 328),
(668, 45, 730),
(669, 45, 416),
(670, 45, 725),
(671, 45, 430),
(672, 45, 517),
(673, 45, 421),
(674, 45, 495),
(675, 45, 483),
(676, 45, 507),
(677, 45, 353),
(678, 45, 528),
(679, 45, 508),
(680, 45, 384),
(681, 45, 542),
(682, 45, 506),
(683, 45, 567),
(684, 45, 525),
(685, 45, 717),
(686, 45, 505),
(687, 45, 741);

-- --------------------------------------------------------

--
-- Структура таблицы `teory`
--

CREATE TABLE `teory` (
  `id` int(11) NOT NULL,
  `name` varchar(300) NOT NULL,
  `description` text NOT NULL,
  `time` bigint(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `teory`
--

INSERT INTO `teory` (`id`, `name`, `description`, `time`) VALUES
(1, 'Справочник по языку Python', 'Настоящее справочное руководство описывает синтаксис и \"ядро\" семантики языка Python. Руководство является кратким, но мы попытались сделать его точным и полным. Семантика несущественных встроенных типов объектов, а также встроенных функций и модулей описана в Стандартной Библиотеке Python. Для неофициального введения в язык, см. Учебник Python 3.1. Для программистов на C или C++, существуют два дополнительных руководства: Расширение и Включение интерпретатора Python представляет высокоуровневое описание того, как создать модуль расширения Python, а Справочное Руководство Python/C API подробно описывает интерфейсы, доступные для программистов на C/C ++.', 1670924613672),
(2, 'О чём справочное руководство?', 'Это справочное руководство описывает язык программирования Python. Оно не является учебником по программированию.\r\n\r\nВ то время как я пытаюсь быть настолько точным насколько возможно, я хотел использовать английские а не формальные спецификации для всего кроме синтаксиса и лексического анализа. Это должно сделать документ более понятным обычным читателям, но оставляет простор для двусмысленностей. Следовательно, если Вы прибыли с Марса и пробуете заново изобрести Python на основе одного только этого документа, Вам, возможно, придется угадывать некторые вещи, и фактически Вы вероятно закончите тем, что создадите совершенно иной язык программирования. С другой стороны, если Вы используете Python и интересуетесь тем, каковы точные правила для какой-либо области языка, Вы определенно должны найти их здесь. Если Вы хотели бы видеть более формальное определение языка, возможно Вы могли бы добровольно потратить свое время — или изобрести машину для клонирования :-).\r\n\r\nОпасно добавлять слишком много подробностей реализации в справочник по языку программирования — реализация может измениться, и другие реализации того же самого языка могут работать иначе. С другой стороны, CPython - одна из реализаций Python, широко используется (хотя дополнительные реализации продолжают поддерживаться), и ее специфические причуды иногда стоят упоминания, особенно тогда, когда реализация налагает дополнительные ограничения. Поэтому Вы найдете короткие “примечания по реализации” разбросанными по всему тексту.\r\n\r\nКаждая реализация Python поставляется со множеством встроенных и стандартных модулей. Они описываются Стандартной Библиотеке Python. Некоторые из этих встроенных модулей упоминаются в том случае, когда они существенно зависимы от определений самого языка.', 0),
(3, 'Альтернативные реализации', 'Несмотря на то, что одна из реализаций Python является самой популярной, существует также несколько других реализаций, которые могут быть интересны различным группам пользователей.\r\n\r\nСреди прочих наиболее известны следующие реализации:\r\n\r\nCPython\r\nЭто оригинальная и наиболее поддерживаемая реализация Python, написанная на C. Новые возможности языка первыми появляются, как правило, именно в ней.\r\n\r\nJython\r\nPython, написанный на Java. Эта реализация может быть использована, как скриптовый язык для Java приложений, или же для создания приложений с применением библиотек классов Java. Jython также часто применяется для написания тестов для библиотек Java. Более подробную информацию можно найти на сайте Jython.\r\n\r\nPython for .NET\r\nДанная реализация в действительности основана на CPython, но является управляемым .NET приложением и предоставляет доступ к библиотекам .NET. Она была создана Брайаном Ллойдом (Brian Lloyd). Более подробную информацию Вы можете найти на сайте Python for .NET.\r\n\r\nIronPython\r\nАльтернативная реализация Python for .NET. В отличие от Python.NET, это целостная реализация Python, генерирующая IL, и компилирующая программы на Python непосредственно в сборки .NET. Она была создана Джимом Хугунин (Jim Hugunin), создателем Jython. Более подробную информацию Вы можете найти на сайте IronPython.\r\n\r\nPyPy\r\nРеализация Python написанная на Python; даже интерпретатор байт-кода написан на Python. Это достигается с помощью CPython и интерпретатора более низкого уровня. Одной из целей этого проекта стало поощрение экспериментов с самим языком путем упрощения изменения интерпретатора (для чего он и был тоже написан на Python). Более подробную информацию Вы можете найти на домашней странице проекта PyPy.\r\n\r\nКаждая из этих реализаций отличается в чем-то от языка, описанного в настоящем руководстве, или требует дополнительной информации за рамками тем, освещенных в стандартной документации по языку Python. Пожалуйста обращайтесь к соответствующей документации этих реализаций, чтобы понять, что Вам еще необходимо изучить о тех специфических версиях, которыми Вы пользуетесь.', 0),
(5, 'Лексический анализ', 'Программа на Python читается парсером. Входным потоком для парсера является поток токенов, генерируемый лексическим анализатором. В данной главе описывается, как лексический анализатор разделяет файл на токены.\r\n\r\n\r\nPython считывает текст программы как символы в формате Unicode; кодировка символов может быть задана декларацией кодировки, по умолчанию она считается UTF-8, более подробно см. PEP 3120. Если файл с исходным кодом не может быть декодирован, генерируется ошибка синтаксиса.', 0),
(6, 'Структура строки', 'Программа на Python состоит из логических строк.\n\nЛогические строки\nКонец логической строки определяется токеном NEWLINE. Декларации не могут выходить за рамки границ логической строки, кроме тех случаев, когда NEWLINE допустима в синтаксисе (напр., между отдельными декларациями в составных декларациях). Логическая строка составляется из одной или большего количества физических строк с учетом явных или неявных правил объединения физических строк.\n\nФизические строки\nФизические строки - это последовательности символов, оканчивающиеся последовательностью конца строки. В исходных файлах могут использоваться стандартные для разных вычислительных платформ последовательности конца строки - в Unix ASCII символ перевода строки LF (linefeed), в Windows - последовательность ASCII символов CR LF (возврат каретки, за которым стоит символ перевода строки), или использовавшийся ранее на Macintosh символ перевода каретки CR (return). Любой из этих вариантов может использоваться равноправно, вне зависимости от текущей вычислительной платформы.\n\nПри отдельном использовании Python, строки исходного кода должны передаваться в Python API с использованием стандартных соглашений языка C для символов перевода строки (символ \\n, представляющий ASCII LF, является признаком конца строки).\n\nКомментарии\nКомментарий начинается с символа \"решетка\" (#), который не является частью строки, и заканчивается концом физической строки. Комментарий является также концом строки, кроме случаев неявного использования правила объединения строк. Комментарии игнорируются синтаксическим анализатором и не являются токенами.\n\nЗадание кодировки\nЕсли комментарий в первой или второй строке скрипта Python соответствует регулярному выражению coding[=:]\\s*([-\\w.]+), то этот комментарий обрабатываться как объявление кодировки; первая группа этого выражения задает кодировку исходного текста. Рекомендуемые формы этого выражения:\n<code>\n# -*- coding: <encoding-name> -*-\n</code>\nкоторая также распознается GNU Emacs, и\n\n# vim:fileencoding=<encoding-name>\nкоторая распознается Bram Moolenaar’s VIM.\n\nЕсли объявление кодировки не было найдено, то по умолчанию используется кодировка UTF-8. Кроме того, если первые байты файла являются UTF-8 byte-order mark (b\'\\xef\\xbb\\xbf\'), то для файла выбирается кодировка UTF-8 (это поддерживается, среди прочего, блокнотом от Microsoft).\n\nЕсли кодировка задана, то название кодировки должно быть распознано Python. Кодировка используется на этапе лексического анализа, в том числе для последовательностей символов (строк), комментарии и идентификаторы. Название кодировки должно содержаться в той же строке, в которой происходит задание кодировки.\n\n2.1.5. Явное объединение строк\nДве или более физических строк могут быть объединены в одну условную строку при помощи символа бэкслэш (\\) следующим образом: когда строка заканчивается бэкслэшем, не являющимся частью текстовых данных или комментария, она объединяется со следующей, составляя единую условную строку, не включающую бэкслэш и следующий за ним символ окончания строки. Например:\n<code>\nif 1900 < year < 2100 and 1 <= month <= 12 \\\n    and 1 <= day <= 31 and 0 <= hour < 24 \\\n    and 0 <= minute < 60 and 0 <= second < 60:   # Похоже ли на дату\n         return 1\n</code>\nСтрока, оканчивающаяся бэкслэшем, не может содержать комментарий. Комментарий или другую лексему кроме текстовых данных, начатые на одной строке, нельзя продолжить с помощью бэкслэша на другой строке. Кроме конца физической строки бэкслэш допустим только внутри текстовых данных.\n\n2.1.6. Неявное объединение строк\nВыражения в скобках - круглых, квадратных либо фигурных - могут быть разделены на несколько физических строк без использования бэкслэша. Например:\n<code>\nmonth_names = [\'Januari\', \'Februari\', \'Maart\',      # Это\n                \'April\',   \'Mei\',      \'Juni\',       # голландские\n                \'Juli\',    \'Augustus\', \'September\',  # названия\n                \'Oktober\', \'November\', \'December\']   # месяцев\n</code>\nНеявно продолженные строки могут содержать комментарии. Отступы не играют роли в продолженных строках. При продолжении разрешены пустые строки. Лексемы NEWLINE не должно быть в неявно продолженных строках. Строки в тройных кавычках (см. ниже) также могут быть неявно продолженными, в этом случае они не могут содержать комментарий.\n\n2.1.7. Пустые строки\nУсловные строки, содержащие только пробелы, знаки табуляции или перевода страницы и комментарии игнорируется (т.е. не создается лексемы NEWLINE). Во время интерактивного ввода операторов обработка пустой последовательности может отличаться в зависимости от реализации цикла чтение-вычисление-вывод. В стандартном интерактивном интерпретаторе полностью пустая условная строка (т.е. не содержащая даже пробел или комментарий) завершает многострочный оператор.\n\n2.1.8. Отступы\nЗнаки пробела и табуляции, начинающие условную строку, используются для вычисления уровня отступа строки, который, в свою очередь, определяет группировку операторов.\n\nЗнаки табуляции заменяются (слева напрво) по одному на восемь пробелов так, что общее число символов после замены кратно восьми (здесь использовано то же правило, что и в Unix). Общее число знаков перед первым непустым символом определяет отступ строки. Отступ не может быть разделен между многими физическими строками с помощью бэкслэша; знаки пробела и табуляции до первого бэкслэша определяют отступ.\n\nОтступы не принимаются из-за противоречивости, если исходный файл смешивает табуляции и пробелы таким образом, что делает смысл зависящим от размера табуляции в пробелах; в таком случае генерируется «TabError» .\n\nЗамечание о кроссплатформенной совместимости: из-за особенностей текстовых редакторов на не-UNIX платформах - не следует использовать смесь пробелов и табуляций для отступов в одном исходном файле. Также следует отметить, что различные платформы могут явно ограничивать максимальный уровень отступов.\n\nСимвол перевода страницы (formfeed) может находится в начале строки, тогда он игнорируется при расчете отступов. В любом другом месте символ перевода страницы между пробелами в начале строки может обрабатываться неопределенным образом (например, может сбрасывать счетчик предыдущих пробелов до нуля).\n\nУровни отступа строк используются для создания лексем INDENT (отступ) и DEDENT (конец отступа) при помощи стека, как описано ниже.\n\nПеред чтением первой строки файла в стек записывается значение «0», это значение никогда не будет извлечено. Числа, заносимые в стек, будут строго возрастать. В начале каждой условной строки уровень отступа сравнивается с максимальным значением на верху стека; если они равны, то ничего не происходит. Если уровень отступа больше, то он заносится в стек, и создается одна лексема «INDENT». Если уровень меньше, то это число уже должно быть в стеке; все числа, которые больше, удаляются, и для каждого удаленного числа создается лексема «DEDENT» . В конце файла лексемы «DEDENT» создаются для всех оставшихся в стеке чисел больше нуля.\n\nЗдесь приведен пример кода на Питоне с правильно (но странновато) расставленными отступами:\n<code>\ndef perm(l):\n         # Расчет списка всех перестановок l\n     if len(l) <= 1:\n                   return [l]\n     r = []\n     for i in range(len(l)):\n              s = l[:i] + l[i+1:]\n              p = perm(s)\n              for x in p:\n               r.append(l[i:i+1] + x)\n     return r\n</code>\nСледующий пример показывает различные ошибки в отступах:\n\n<code>\ndef perm(l):                       # error: first line indented\n for i in range(len(l)):             # error: not indented\n     s = l[:i] + l[i+1:]\n         p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n         for x in p:\n                 r.append(l[i:i+1] + x)\n             return r                # error: inconsistent dedent\n</code>\n(Вообще-то, первые три ошибки найдены парсером, и только последняя - лексическим анализатором: уровень отступа return r не совпадает с уровнем в стеке.)\n\n2.1.9. Пробелы между лексемами\nКроме начала логической строки или в записи текстовых данных символы пробела, табуляции и перевода страницы могут быть взаимозаменяемы при разделении лексем. Эти символы необходимы между двумя лексемами только, если результат их объединения может быть интерпретирован как другая лексема (например : «ab» - это одна лексема, но «a b» - две лексемы) .\n\n\n2.2. Другие лексемы\nКроме «NEWLINE» , «INDENT» и «DEDENT» , существуют следующие категории лексем: идентификаторы, ключевые слова, литералы (непосредственная запись данных) , операторы и разделители. Символы пробелов (кроме знаков конца строки, описанных ранее) не являются лексемами, а служат для их разделения. Если появляется неопределенность, лексема включает самую длинную возможную последовательность, представляющую собой действительную лексему (чтение происходит слева направо) .', 1671026927439),
(7, 'Ключевые слова', 'Следующие идентификаторы являются зарезервированными или ключевыми словами языка и не могут быть использованы как обычные идентификаторы. Они должны быть написаны именно так, как здесь:\r\n\r\nFalse      class      finally    is         return\r\n None       continue   for        lambda     try\r\n True       def        from       nonlocal   while\r\n and        del        global     not        with\r\n as         elif       if         or         yield\r\n assert     else       import     pass       print\r\n break      except     in         raise', 0),
(8, 'Интерактивный интерпретатор', '<div class=\"no-overflow\"><p>Данный курс будет посвящен изучению программирования с использованием языка <strong>Python</strong>. Это — современный язык программирования, работающий на всех распространных операционных системах.   </p><p>В настоящее время существует две версии языка Python: более старая, но пока ещё более распространненая версия 2 и современная версия 3. Они не вполне совместимы друг с другом: программа, написанная для одной версии языка может оказаться невыполнимой для другой версии. Но в основном обе версии очень похожи.  </p><p>Мы будем использовать версию 3 данного языка, некоторые из используемых примеров не будут работать с версией .Использовать Python вы можете скачав с сайта <a href=\"http://www.python.org\" target=\"_blank\">www.python.org</a> или пользуясь разделом редактор или не посредственно в редакторе под задачей.  </p></div>', 1671028302891),
(9, 'Оператор вывода - print()', '<p>Итак, мы будем писать программы. Что же делают программы? И для чего они нужны? В большинстве случаев людям хотелось бы передавать некие исходные данные компьютеру, а в ответ получать решённую задачу. </p>\n\n<p>Например, для какой-то научной работы ученику надо вычислить 50 раз площади треугольников по известной формуле. Исходные данные имеются, нужно только вычислять площади. Можно, конечно, делать это вручную. Но мало кому нравится такая рутинная работа. Изучив язык программирования, можно автоматизировать вычисления.</p>\n\n<p>Чтобы написать программу вычисления площади треугольника, надо иметь возможность:</p>\n\n<ol>\n	<li>Передать исходные данные программе (в нашем примере - это стороны треугольника)</li>\n	<li>Вычислить результат (в формулу подставить стороны и получить ответ)</li>\n	<li>Вывести результат на экран (полученный ответ хранится в памяти, но нам надо напечатать его на экране)</li>\n</ol>\n\n<p>Начнем для простоты с третьего пункта. Для вывода информации на экран в Питоне имеется функция print(). Это функция, которая выводит на экран то, что укажет программист. Что можно вывести?</p>\n\n\n<ol>\n	<li>Текст. Для того, чтобы напечатать текст, его надо будет взять в кавычки или апострофы:\n	<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">print</span> ( <span class=\"hljs-string\">\"Я изучаю Python\"</span> ) <span class=\"hljs-comment\"># будет напечатан текст без кавычек</span>\n<span class=\"hljs-keyword\">print</span> ( <span class=\"hljs-string\">\'Основатель Python - Гвидо ван Россум&nbsp;\'</span>)&nbsp;<span class=\"hljs-comment\"># будет напечатан текст без апострофов</span></codes></pre>\n	</li>\n	<li>Число&nbsp;или арифметическое выражение. Арифметические операции:&nbsp; +,&nbsp; -,&nbsp; *,&nbsp; /.&nbsp; Порядок действий, как в математике. При выводе чисел и арифметических выражений кавычки&nbsp;не нужны:\n	<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">100</span>)&nbsp;&nbsp;<span class=\"hljs-comment\"># будет напечатано число 100</span>\n<span class=\"hljs-keyword\">print</span> ( <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>)&nbsp;&nbsp;<span class=\"hljs-comment\"># будет напечатано число 6, первое действие - умножение!</span>\n<span class=\"hljs-keyword\">print</span> ( (<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">2</span>)&nbsp;&nbsp;<span class=\"hljs-comment\"># будет напечатано число 8, с помощью скобок поменяли порядок действий</span></codes></pre>\n	</li>\n	<li>Можно комбинировать вывод чисел и текстов&nbsp;в любом количестве. В этом случае список вывода пишут через запятую.\n	<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">print</span> ( <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">3</span>)&nbsp;&nbsp;<span class=\"hljs-comment\"># будут&nbsp;напечатаны два числа через пробел: 4 9</span>\n<span class=\"hljs-keyword\">print</span> ( <span class=\"hljs-string\">\"Я знаю, что 5 * 5 =\"</span>, <span class=\"hljs-number\">5</span>&nbsp;* <span class=\"hljs-number\">5</span>)&nbsp;&nbsp;<span class=\"hljs-comment\"># печать фразы: Я знаю, что 5 * 5 = 25</span></codes></pre>\n	</li>\n	<li>Если написать команду print() в таком виде, с пустыми скобками, то будет напечатана пустая строка.\n	<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">print</span> ()&nbsp;&nbsp;<span class=\"hljs-comment\"># печать пустой строки!&nbsp;</span></codes></pre>\n	</li>\n	<li>С помощью команды print(). Будем выводить значения переменных. Но пока мы их не изучили. Об этом позже)!</li>\n</ol>\n', 1671026458630),
(10, 'Оператор присваивания', '<div id=\"ember3410\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span>\n<p>При написании программ&nbsp;возникает&nbsp;необходимость хранить данные в памяти компьютера.&nbsp;Например, нам надо сохранить в памяти компьютера число 125, а потом извлечь из памяти и применить в коде программы. Как же это можно реализовать? Если просто записать в память отдельные числа, то как их потом искать?&nbsp;</p>\n\n<p>Для этой цели используются&nbsp;так называемые <strong>переменные.&nbsp;</strong>Для переменной придумывают <strong>имя</strong>, чтобы к ней потом можно было обратиться. Она ссылается на какую-либо&nbsp;ячейку памяти, где хранится число или строка, то есть <strong>значение</strong> переменной. Значение переменной имеет какой-то <strong>тип.&nbsp;</strong>О типе чуть позже в этом разделе.</p>\n\n<p>Название переменной желательно дать такое, чтобы было понятно, за что она отвечает, например <strong>sum -&nbsp;</strong>для подсчёта суммы. Если переменных будет много, то вы не запутаетесь в них.&nbsp;Название переменной пишется латинскими буквами. В названии можно использовать цифры. Но оно,&nbsp;должно начинаться обязательно с буквы. Можно использовать знак подчёркивания, например <strong>mas_1.</strong></p>\n\n<p>Чтобы записать значение переменной в память, будем использовать оператор присваивания. Он выглядит как знак равно в математике:&nbsp;<strong>a = 125. </strong>Эта запись означает, что в памяти появится переменная по имени&nbsp;<strong>a&nbsp;</strong>и она ссылается на число 125, которое записано в памяти компьютера.</p>\n\n<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-number\">125</span>\na = <span class=\"hljs-number\">250</span></codes></pre>\n\n<p>Две строки, записанные в коде программы работают таким образом. Сначала переменная а ссылается на число 125, но следующий оператор присваивания меняет ситуацию и переменная а после второй команды ссылается на число 250. При этом число 125 безвозвратно потеряется в памяти компьютера! Больше вы его там не найдёте! Делаем вывод, что у переменной в любой момент времени может быть только одно значение. Но на то она и переменная, значение переменной всегда можно поменять.</p>\n\n<pre><codes class=\"language-python hljs\">count = <span class=\"hljs-number\">0</span>\ncount = count +<span class=\"hljs-number\">1</span></codes></pre>\n\n<p>Справа от оператора присваивания часто пишут&nbsp;какое-то выражение. Работает этот код следующим образом. Сначала вычисляется выражение, стоящее справа от оператора присваивания. При этом подставляются значения переменных, которые в данный момент хранятся в памяти. А потом полученное значение хранится переменной, стоящей слева. В рассмотренном примере переменная <strong>count&nbsp;</strong>сначала ссылается на значение 0. Вторая команда извлекает из памяти значение count, прибавляет 1 и результат записывается опять в&nbsp;<strong>count.&nbsp;</strong>В результате значение&nbsp;<strong>count&nbsp;</strong>будет равно 1.</p>\n\n<pre><codes class=\"language-python hljs\">count = count + <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># увеличение переменной count на 1</span>\ncount += <span class=\"hljs-number\">1</span>        <span class=\"hljs-comment\"># увеличение переменной count на 1 (сокращённая запись)</span></codes></pre>\n\n<p>Значение переменной можно выводить в операторе print(), например:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"Сумма чисел =\"</span>, sum) </codes></pre></span></div>', 1671027898005),
(11, 'Типы данных', '<div id=\"ember3415\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Типы данных</strong></p>\n\n<p>В обыденной жизни мы очень чётко понимаем, что существуют числа и текстовая информация. Причём с числами мы можем производить различные вычисления:&nbsp;складывать, умножать, делить и т.д..&nbsp;Числа бывают целые и дробные. Текст мы можем напечатать, скомбинировать разные кусочки текста между собой. При этом нам в голову не приходит слово \"стол\" умножить на слово \"стул\". Теперь всё это понимание надо перенести в мир программирования. Потому как при написании программ у начинающих программистов бывают путаницы с типами данных и в связи с этим возникают определённые ошибки.</p>\n\n<p>Познакомимся с некоторыми типами данных.<br>\n<strong>x = 10&nbsp; #&nbsp;</strong>в переменную <strong>x </strong>записали <strong>целое число</strong> 10. Это тип -&nbsp;<strong>int</strong><br>\n<strong>y = 10.5&nbsp; &nbsp;#&nbsp;</strong>в переменную <strong>y</strong>&nbsp;записали <strong>дробное&nbsp;число</strong> 10.5. Это тип -&nbsp;<strong>float,&nbsp;</strong>дробная часть отделяется точкой!<br>\n<strong>z = \"Python\"&nbsp; # </strong>в переменную <strong>z</strong>&nbsp;записали <strong>строковый тип.&nbsp;</strong>Этот тип -&nbsp;<strong>str</strong>, такие данные&nbsp;пишутся в кавычках или апострофах.&nbsp;</p>\n\n<p>С помощью функции <strong>type() </strong>можно проверить, какой тип данных имеет переменная. Но для этого надо напечатать результат на экране, например, в таком виде&nbsp;<strong>print (type (z)).</strong></p>\n\n<p>Рассмотрим такой фрагмент&nbsp;кода:</p>\n\n<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-number\">25</span>\n<span class=\"hljs-keyword\">print</span> (type (a))\na = <span class=\"hljs-string\">\"abcdefgh\"</span>\n<span class=\"hljs-keyword\">print</span> (type (a))\na = <span class=\"hljs-number\">12.4</span>\n<span class=\"hljs-keyword\">print</span> (type (a))</codes></pre>\n\n<p>Если наберёте и запустите, то увидите такой результат работы:<br>\n<strong>&lt;class \'int\'&gt;<br>\n&lt;class \'str\'&gt;<br>\n&lt;class \'float\'&gt;</strong><br>\nВ переменную <strong>а</strong> сначала записали тип <strong>int</strong>, потом переменная a стала типом <strong>str,</strong>&nbsp;после третьей команды переменная а приняла тип <strong>float. </strong>Делаем вывод, что переменные в языке Python обладают динамической типизацией. То есть в процессе работы программы переменная может по очереди принимать разный тип данных. Так можно поступать не во всех языках программирования! Это особенность языка Python. В языках С++ и&nbsp;Pascal так делать нельзя. В этих языках переменная может быть только одного типа.&nbsp;&nbsp;</p>\n\n<p>Теперь надо разобраться, какие операции допустимы с этими типами данных. Что можно делать с типом <strong>str</strong>?<br>\n<strong>1)</strong> Тип <strong>str</strong> можно просто напечатать, например</p>\n\n<pre><codes class=\"language-python hljs\">s = <span class=\"hljs-string\">\"привет\"</span>\n<span class=\"hljs-keyword\">print</span> (s)</codes></pre>\n\n<p>или в таком виде, пока более привычном для вас:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"привет\"</span>)</codes></pre>\n\n<p><strong>2)</strong> Несколько строк можно \"склеить\" в одну строку. Для этого применяют операцию \"конкатенации\", она выглядит как знак <strong>+. </strong>Смотрим пример&nbsp;кода:</p>\n\n<pre><codes class=\"language-python hljs\">s1 = <span class=\"hljs-string\">\"abc\"</span>\ns2 = <span class=\"hljs-string\">\"def\"</span>\nres1 = s1 + s2\nres2 = s2 + s1\n<span class=\"hljs-keyword\">print</span> (res1)\n<span class=\"hljs-keyword\">print</span> (res2)</codes></pre>\n\n<p>В результате работы этой программы увидим на экране две строки <strong>abcdef </strong>и <strong>defabc</strong>. Делаем вывод, что знак <strong>+&nbsp;</strong>работает не так, как сложение в математике. От перемены мест слагаемых результат меняется!</p>\n\n<p><br>\n<strong>3) </strong>Для строк, как ни странно, определена операция <strong>*. </strong>Но одну строку на другую умножать нельзя!&nbsp;То есть слово \"стол\" на слово \"стул\" умножать не сможем. Но мы можем умножить строку на число. Смотрим код:</p>\n\n<pre><codes class=\"language-python hljs\">string = <span class=\"hljs-string\">\"175\"</span>&nbsp;\nstring = string * <span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">print</span> (string)</codes></pre>\n\n<p>Результат работы - 175175175. То есть строка 175 будет выписана 3 раза подряд без пробелов.</p>\n\n<p><br>\n<strong>4)&nbsp;</strong>Для строк существует много функций. С их помощью можно определить длину строки или количество букв \"а\" в данной строке.&nbsp;Об этом будет урок позже.</p>\n\n<p>Теперь пришло время&nbsp;обсудить типы<strong>&nbsp;int </strong>и <strong>float.&nbsp;</strong>Целые числа<strong> int </strong>в языке Python могут быть ОЧЕНЬ большие. Другие языки программирования, например С++ и Pascal, не могут с такой же точностью обработать очень большие числа, как это делает Python.&nbsp;</p>\n\n<p>С этими&nbsp;типами&nbsp;данных можно производить такие же операции, которые вы делаете на уроках математики. Рассмотрим такой пример:</p>\n\n<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-number\">15</span>\nb = <span class=\"hljs-number\">3</span>\nr1 = a + b\nr2 = a - b\nr3 = a * b\nr4 = a / b\n<span class=\"hljs-keyword\">print</span> (type(r1), type(r2), type(r3), type(r4))</codes></pre>\n\n<p>Обратите внимание на такой факт. При сложении, умножении и вычитании&nbsp;типов <strong>int</strong> в результате получается тип <strong>int.<br>\nНо при делении int на int всегда получаем тип float!</strong></p>\n\n<p>При сложении, умножении, вычитании и делении типов <strong>float</strong> всегда получим тип <strong>float.&nbsp;</strong></p>\n\n<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-number\">15.2</span>\nb = <span class=\"hljs-number\">3.4</span>\nr1 = a + b\nr2 = a - b\nr3 = a * b\nr4 = a / b\n<span class=\"hljs-keyword\">print</span> (type(r1), type(r2), type(r3), type(r4))</codes></pre>\n\n<p>Рассмотрим ещё такой пример для бо\'льшего понимания типов:<br>\n<strong>a = 15<br>\nb = 15.0<br>\nc = \"15\"<br>\nd = \"\"</strong><br>\nТип переменной <strong>a - int.</strong> Это без сомнений.<br>\nТип переменной <strong>b - float.&nbsp;</strong>Здесь могут возникнуть сомнения, но вы должны понимать, раз есть дробная часть, пусть даже она равна 0, то тип переменной будет уже <strong>float!</strong><br>\nТип переменной <strong>c&nbsp;- str. </strong>Здесь тоже могут посетить сомнения начинающих программистов. Но вам надо смотреть на кавычки. Если они есть, то это тип&nbsp;&nbsp;<strong>str.&nbsp;</strong>Компьютеру совсем не важно, что записано внутри кавычек.<br>\nТип переменной <strong>d&nbsp;- str. </strong>Это, так называемая, пустая строка. При написании программ нам иногда такая запись будет нужна.</p>\n\n<ol>\n</ol></span></div>', 1671027956795),
(12, 'Преобразование типов', '<div id=\"ember282\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Преобразование типов</strong></p>\n<p>В процессе написания программы нам надо будет преобразовывать один тип данных в другой. Рассматриваем на примерах. </p>\n<ol>	<li>\n	<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-number\">15</span>\nb = str(a)\nprint(b)\nprint(type(b))</codes></pre>\n	Тип <strong>int </strong>без проблем преобразуется в тип <strong>str </strong>с помощью функции <strong>str.</strong></li>\n	<li>\n	<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-number\">15</span>\nb = float(a)\nprint(b)\nprint(type(b))</codes></pre>\n	В этом примере тип <strong>int </strong>без проблем преобразовался в тип <strong> float </strong>с помощью функции <strong>float. </strong>Здесь в числе b появляется дробная часть в виде 0. То есть b = 15.0</li>\n	<li>\n	<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-string\">\"15\"</span>\nb = int(a)\nprint(b)\nprint(type(b))</codes></pre>\n	В этом примере тип <strong>str </strong>без проблем преобразовался в тип <strong> int </strong>с помощью функции <strong>int.</strong></li>\n	<li>\n	<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-string\">\"15ab\"</span>\nb = int(a)\nprint(b)\nprint(type(b))</codes></pre>\n	В этом примере тип <strong>str </strong>не может быть преобразован в тип <strong> int. </strong>Этот код работать не будет, он выдаст ошибку, которая выглядит следующим образом: <span style=\"color: #990000;\"><em>ValueError: invalid literal for int() with base 10: \'15ab\'. </em></span>Вполне понятно, почему это происходит. В исходной строке есть символы, которые не могут быть преобразованы в число. Я думаю понятно, что такую строку также не удастся преобразовать в тип <strong>float </strong>по той же причине.</li>\n	<li>\n	<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-number\">15.8</span>\nb = int(a)\nprint(b)\nprint(type(b))</codes></pre>\n	В этом примере тип <strong>float </strong>без проблем преобразовался в тип <strong> int </strong>с помощью функции <strong>int. </strong>Здесь в числе b отбрасывается дробная часть. Получаем b = 15.</li>\n	<li>\n	<pre><codes class=\"language-python hljs\">a = <span class=\"hljs-number\">15.8</span>\nb = str(a)\nprint(b)\nprint(type(b))</codes></pre>\n	В этом примере тип <strong>float </strong>без проблем преобразовался в тип <strong> str.</strong></li>\n</ol></span></div>', 1671028077781),
(13, 'Чтение данных с клавиатуры. Оператор input()', '<article id=\"ember1379\" class=\"step-show ember-view\"><div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember1380\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember1381\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Чтение данных с клавиатуры. Оператор input()</strong></p>\n\n<p>Вспомним&nbsp;первый&nbsp;урок, когда мы обсуждали с вами, для чего нужно программирование. Программа&nbsp;должна&nbsp;облегчить работу человека следующим образом. На вход программы&nbsp;мы подаём исходные данные, а программа должна обработать эти данные и выдать на экран ответ. В следующий раз мы должны иметь возможность подавать на вход новые исходные и опять же получить результат. Теперь нам надо понять, каким образом мы можем считать исходные данные с клавиатуры. Для этой цели служит функция <strong>input().</strong></p>\n\n<p>Рассмотрим такой пример:</p>\n\n<pre><codes class=\"language-python hljs\">a = input()\nb = input()\n<span class=\"hljs-keyword\">print</span> (a + b)</codes></pre>\n\n<p>При запуске программы произойдёт задержка работы программы. Функция input() будет ждать ввода данных. Введём число 15 и нажмём на клавиатуре клавишу Enter для подтверждения ввода. Затем опять будет задержка работы программы. Это работает вторая функция input(). Введём число 25 и нажмём Enter. В результате работы программы на экране увидим ответ - 1525. Что это означает? Это означает, что ПО УМОЛЧАНИЮ функция input() считывает исходные данные, как тип <strong>str.&nbsp;</strong>Если же мы планируем работать с исходными данными, как с типом <strong>int </strong>или <strong>float,&nbsp;</strong>то надо будет применить соответствующую функцию для преобразования типа. Смотрим следующий пример.</p>\n\n<pre><codes class=\"language-python hljs\">a = input()\na = int(a)\nb = input()\nb = int(b)\n<span class=\"hljs-keyword\">print</span> (a + b)</codes></pre>\n\n<p>Эта программа после ввода исходных данных преобразует типы в int, а затем складывает их как целые числа. То есть при вводе исходных данных 15 и 25, мы получим ответ - 40.&nbsp;</p>\n\n<p>Предыдущую программу можно записать короче, если объединить две функции input() и int().</p>\n\n<pre><codes class=\"language-python hljs\">a = int(input())\nb = int(input())\n<span class=\"hljs-keyword\">print</span> (a + b)</codes></pre>\n\n<p>Работа в выражении&nbsp;<strong>a = int(input()) </strong>начинается с функции input(). То есть сначала считывается исходное данное. Потом начинает работать функция <strong>int,&nbsp;</strong>она преобразует исходное данное в целое число. После этого полученное число присваивается переменной<strong> а.</strong></p>\n\n<p>Если при запуске предыдущей программы мы введем дробное&nbsp;число 15.5, то получим ошибку! Она выглядит вот так:<br>\n<span style=\"color: #990000;\"><em><strong>ValueError: invalid literal for int() with base 10: \'15.5\'.&nbsp;</strong></em></span><br>\nПоэтому надо понимать, какие исходные данные мы будем принимать на входе в программу. И считывать и преобразовывать их надо в соответствии с этой информацией. Если на вход будут приходить дробные числа, то будем писать:</p>\n\n<pre><codes class=\"language-python hljs\">a = float(input())\nb = float(input())\n<span class=\"hljs-keyword\">print</span> (a + b)</codes></pre>\n\n<p>В формулировках задач должно быть сказано, какие исходные данные поступают на вход.</p></span></div>\n      </div>\n</div>\n</div>\n</div>\n</article>', 1671028363810),
(14, 'Чтение нескольких данных из одной строки', '<div id=\"ember1446\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember1447\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Чтение нескольких данных из одной строки</strong></p>\n\n<p>Итак, мы научились считывать данные с клавиатуры. Но, обратите внимание на тот факт, что данные нам каждый раз подавались в столбик. Однако, возможны ситуации, когда данные будут подаваться одной строкой. Например, два или три целых числа будут подаваться в таком виде:<br>\n<strong>23 45<br>\n1.5 1.6 1.7</strong></p>\n\n<p>Как же считывать&nbsp;данные в память компьютера в такой ситуации?<br>\nЕсли читать данные такой командой&nbsp; x = input(), то мы считаем строку <strong>\"23 45\".&nbsp;</strong><br>\nТакая команда x = int(input()) и вовсе выдаст ошибку&nbsp;<span style=\"color: #990000;\"><em><strong>ValueError: invalid literal for int() with base 10: \'23 45\'.</strong></em></span></p>\n\n<p>Видимо, нужны новые функции и новые возможности. Заметим, что между входными данными есть пробел. А это значит, нам нужна такая функция, которая будет разбивать строку по пробелам. Такая функция, конечно,&nbsp;имеется.<br>\nЭто -&nbsp;&nbsp;<strong>split(),&nbsp;</strong>она ПО УМОЛЧАНИЮ&nbsp; разбивает строку по пробелам. Смотрим пример:</p>\n\n<pre><codes class=\"language-python hljs\">a, b = input().split()\n<span class=\"hljs-keyword\">print</span> (type(a), a)\n<span class=\"hljs-keyword\">print</span> (type(b), b)</codes></pre>\n\n<p>Если на вход подать&nbsp;<strong>23 45, </strong>то увидим результат:<br>\n<strong>&lt;class \'str\'&gt; 23<br>\n&lt;class \'str\'&gt; 45</strong><br>\nЛогично, что считанные данные имеют строковый тип - <strong>str. </strong><br>\nИ ещё обращаем внимание на то, что слева от знака присваивая в языке Python может стоять несколько переменных. Это, так называемое, множественное присваивание. Слева должно стоять столько переменных, сколько справа стоит значений. Иначе, получим ошибку.</p>\n\n<p>Теперь нам надо научиться получать тот тип данных, который нужен по условию задачи, а не только тип <strong>str. </strong>Для этого будем использовать функцию <strong>map. </strong>Это функция множественной работы. В скобках к этой функции мы укажем, что нам надо сделать - перевести в <strong>int,</strong> после запятой укажем к чему надо применить. Смотрим пример:</p>\n\n<pre><codes class=\"language-python hljs\">a, b = map (int, input().split())</codes></pre>\n\n<p>Работает это следующим образом. Сначала функция <strong>input() </strong>читает строку. Далее&nbsp;<strong>split()&nbsp;</strong>разбивает по пробелам. Получаем две строки <strong>\"23\"</strong> и <strong>\"45\". </strong>Функция <strong>map</strong> переводит в <strong>int </strong>эти строки. И, наконец, оператор присваивания переменным a и b присваивает значения <strong>23</strong> и <strong>45.&nbsp;</strong></p>\n\n<p>Подытожим. Как мы будем писать, если нам надо считать разные типы данных:</p>\n\n<ol>\n	<li><strong>a, b, c&nbsp;= map (int, input().split()) -&nbsp;</strong>считываем три целых числа и записываем их в переменные a, b и с.</li>\n	<li><strong>a, b, с, d&nbsp;= map (float, input().split()) -&nbsp;</strong>считываем четыре вещественных числа и записываем их в переменные a, b, с и d.</li>\n	<li><strong>s = \"Python C++\"<br>\n	x, y = s.split() - </strong>исходная строка была разбита по пробелам. В результате <strong>x = \"Python\", y = \"C++\"</strong></li>\n	<li>Если данные подаются в таком виде <strong>45+56+76</strong>. А нам надо получить числа, то вспоминаем, что функция <strong>split()</strong> разбивает строку по пробелам ПО УМОЛЧАНИЮ. Меняем эту настройку таким образом:<br>\n	<strong>x, y, z </strong>=&nbsp;<strong>map (int, input().split(\"+\")). </strong><br>\n	Результат <strong>x = 45, y = 56, z = 76.</strong></li>\n</ol>\n\n<p><strong>Теперь тренируемся, вникаем глубже и закрепляем!&nbsp; --&gt;</strong></p></span></div>\n      </div>\n</div>\n</div>', 1671028426443),
(15, 'Целочисленное деление и остаток от деления', '<div id=\"ember1588\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember1589\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Целочисленное деление и остаток от деления</strong></p>\n\n<p>Во всех алгоритмических языках программирования имеются ещё 2 арифметические операции. Это - целочисленное деление и остаток от деления. В языке Python для целочисленного&nbsp;деления используется //, а для остатка от деления %.</p>\n\n<p>Давайте разберём, для чего эти операции могут нам пригодится. Например, мы хотим разделить&nbsp;5 кг муки на 2 человек. Для этого будем использовать обычное деление, запишем&nbsp;выражение 5 / 2. Каждому человеку достанется по 2,5 кг муки. Здесь всё хорошо.</p>\n\n<p>Теперь будем делить 5 книг на двоих. Предыдущее выражение для деления нам не подойдёт. В таких случаях будем использовать целочисленное деление 5 // 2. В этом случае дробная часть отбрасывается и в результате получается целое число 2. В результате такого деления появляется остаток. 5 % 2 даёт 1.</p>\n\n<p>Рассмотрим всё это в более общем виде.&nbsp;<br>\nn - делимое<br>\nm - делитель<br>\nq - частное<br>\nr - остаток от деления<br>\nn = m * q + r<br>\nq = n // m<br>\nr = n % m</p>\n\n<p>Рассмотренные операции помогут решать нам очень много самых разных задач. Например, чётное число даёт при делении на 2 в остатке 0, а нечётное при делении на 2 даёт в остатке 1.<br>\n15 % 2 - результат 1<br>\n16 % 2 - результат 0<br>\nЭтот факт мы будем использовать достаточно часто в дальнейшем.</p>\n\n<p>Операции целочисленного деления помогут нам \"разобрать\" число по цифрам.</p>\n\n<p><strong>Задача №1. </strong>Дано четырёхзначное число и нам надо вывести каждую цифру этого числа, начиная с последней.&nbsp;<br>\nЕсли, например, дано число 1234. Надо вывести 4 3 2 1.</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input()) <span class=\"hljs-comment\"># считали четырёхзначное число</span>\nx4 = n%<span class=\"hljs-number\">10</span>      <span class=\"hljs-comment\"># остаток от деления числа на 10 даст нам последнюю цифру этого числа</span>\nx3 = n//<span class=\"hljs-number\">10</span>%<span class=\"hljs-number\">10</span>  <span class=\"hljs-comment\"># целочисленно делим на 10, \"отрезаем\" последнюю цифру числа, затем в полученном&nbsp; &nbsp;</span>\n               <span class=\"hljs-comment\"># трёхзначном числе выделяем последнюю цифру</span>\nx2 = n//<span class=\"hljs-number\">100</span>%<span class=\"hljs-number\">10</span>&nbsp;<span class=\"hljs-comment\"># число целочисленно делим на 100, таким образом \"отрезаем\" 2 последних&nbsp;цифры&nbsp;числа, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# затем в полученном двузначном числе выделяем последнюю цифру</span>\nx1 = n//<span class=\"hljs-number\">1000</span>&nbsp; &nbsp;<span class=\"hljs-comment\"># число целочисленно делим на 1000, таким образом \"отрезаем\" 3&nbsp;последних&nbsp;цифры&nbsp;числа</span>\n<span class=\"hljs-keyword\">print</span> (x4, x3, x2, x1)</codes></pre>\n\n<p><strong>Задача №2. </strong>Продолжение предыдущей задачи. Пусть нам теперь надо из четырёхзначного числа составить число, которое будет выглядеть \"зеркально\" исходному.&nbsp; Число надо получить, а не просто выдать цифры без пробелов. Дано число 1234. Надо получить число 4321.&nbsp;</p>\n\n<p>Цифры из числа мы получать умеем. Нам нужно понять, как составить число. Здесь всё просто, надо взять цифру, которая должна стоять в разряде тысяч и умножить её на 1000, затем цифру, которая должна быть сотней умножаем её на 100, далее цифру десятков умножаем на 10 и складываем все полученные произведения и цифру, которая представляет единицы. Получим четырёхзначное число:</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\nx1 = n // <span class=\"hljs-number\">1000</span>\nx2 = n // <span class=\"hljs-number\">100</span> % <span class=\"hljs-number\">10</span>\nx3 = n // <span class=\"hljs-number\">10</span> % <span class=\"hljs-number\">10</span>\nx4 = n % <span class=\"hljs-number\">10</span>\ns = x4 * <span class=\"hljs-number\">1000</span> + x3 * <span class=\"hljs-number\">100</span> + x2 * <span class=\"hljs-number\">10</span> + x1\n<span class=\"hljs-keyword\">print</span> (s)</codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671028458000),
(16, 'Применение целочисленного деления для разных задач', '<div id=\"ember1626\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember1627\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Применение целочисленного деления для разных задач</strong></p>\n\n<p>Рассмотрим несколько задач, в которых нам понадобятся операции целочисленного деления и остатка от деления.</p>\n\n<p><strong>Задача №1.</strong> Дано количество копеек, например 250, а надо выделить целое количество рублей и количество копеек.<br>\nДелаем следующее:<br>\nr = 250 // 100 # находим целую часть при делении на 100 - это количество рублей<br>\nk = 250 % 100 # находим остаток от деления на 100 - это количество копеек</p>\n\n<p>Конечно, задачу будем решать в общем виде. Для любого исходного количества копеек:</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\nr = n // <span class=\"hljs-number\">100</span>\nk = n % <span class=\"hljs-number\">100</span>\n<span class=\"hljs-keyword\">print</span> (r, <span class=\"hljs-string\">\"pуб\"</span>, k, <span class=\"hljs-string\">\"коп\"</span>)</codes></pre>\n\n<p><strong>Задача №2.&nbsp;</strong>Пирожок в столовой стоит&nbsp;a&nbsp;рублей и&nbsp;b&nbsp;копеек. Определите, сколько рублей и копеек нужно заплатить за&nbsp;n&nbsp;пирожков.&nbsp;</p>\n\n<p>При решении задач такого типа имеет смысл перевести стоимость в копейки, затем умножить на количество. Результат будет получен, но он будет в копейках. Из копеек в рубли и копейки мы уже умеем переводить.</p>\n\n<pre><codes class=\"language-python hljs\">a = int(input()) <span class=\"hljs-comment\"># считали рубли</span>\nb = int(input())&nbsp;<span class=\"hljs-comment\"># считали копейки</span>\nn = int(input())&nbsp;<span class=\"hljs-comment\"># считали количество пирожков</span>\ns = a*<span class=\"hljs-number\">100</span> + b <span class=\"hljs-comment\"># нашли стоимость пирожка в копейках</span>\ns = s * n&nbsp;<span class=\"hljs-comment\"># нашли стоимость n пирожков в копейках</span>\nprint(s//<span class=\"hljs-number\">100</span>, s%<span class=\"hljs-number\">100</span>) <span class=\"hljs-comment\"># перевели в копейки в рубли&nbsp; и копейки</span></codes></pre>\n\n<p><strong>Задача №3. </strong>Дано количество секунд. Надо выделить часы, минуты и секунды и вывести их в таком виде - 5:34:12.</p>\n\n<p>Для решения такой задачи надо вспомнить соотношения,&nbsp; показывающие сколько крупных единиц измерения содержатся в мелких:<br>\nВ одной минуте - 60 секунд<br>\nВ одном часе - 60 минут или 3600 секунд.</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())<span class=\"hljs-comment\"># считали количество секунд</span>\nh = n//<span class=\"hljs-number\">3600</span>&nbsp;    <span class=\"hljs-comment\"># выделили целое количество часов</span>\nm = n%<span class=\"hljs-number\">3600</span>//<span class=\"hljs-number\">60</span>  <span class=\"hljs-comment\"># определили оставшееся количество секунд и выделили целое количество минут</span>\ns =&nbsp;n %&nbsp;<span class=\"hljs-number\">3600</span> %&nbsp;<span class=\"hljs-number\">60</span>  <span class=\"hljs-comment\"># определили оставшееся количество секунд</span>\n<span class=\"hljs-keyword\">print</span> (h,&nbsp;m, &nbsp;s, sep = <span class=\"hljs-string\">\":\"</span>)</codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671028514712);
INSERT INTO `teory` (`id`, `name`, `description`, `time`) VALUES
(17, 'Целочисленное деление с округлением вверх', '<article id=\"ember1711\" class=\"step-show ember-view\"><div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember1712\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember1713\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Целочисленное деление с округлением вверх</strong></p>\n\n<p><strong>Рассмотрим задачу.<br>\n​</strong>​​​​​​Надо разложить по коробкам n книг. В каждую коробку можно положить не более, чем m книг. Сколько коробок понадобится?&nbsp;</p>\n\n<p>Рассмотрим различные исходные данные.</p>\n\n<p>Если n = 40 и m = 20, то формула может&nbsp;выглядеть так n&nbsp;// m&nbsp;= 2. В этом случае понадобится&nbsp;2 коробки. Здесь всё верно.</p>\n\n<p>Если n = 45&nbsp;и m = 20, то предыдущая формула не подойдёт. Формула нам выдаст 2 коробки, хотя нужно&nbsp;будет 3 коробки.</p>\n\n<p>Формула&nbsp;n&nbsp;// m округляет результат&nbsp;<strong>вниз.&nbsp;</strong>Дробная часть в этом случае просто отбрасывается. В рассмотренной задаче нужно поступить наоборот. Если появляется дробная часть, то нужно результат округлить <strong>вверх.</strong> Если есть хотя бы одна книга, которая не помещается, то нам надо будет взять ещё одну коробку!</p>\n\n<p>Формула целочисленного деления с округлением&nbsp;вверх:&nbsp;<strong>(n - 1)//m + 1.&nbsp;</strong></p>\n\n<p>Для понимания работы формулы подставим рассмотренные значения.</p>\n\n<p>k = (40 - 1) // 20 + 1. Здесь k примет значение 2.</p>\n\n<p>k =&nbsp;(45&nbsp;- 1) // 20 + 1.&nbsp;Здесь k примет значение 3.</p>\n\n<p>Код программы, который находит количество коробок:</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())   <span class=\"hljs-comment\"># считали количество книг, которое нужно разложить</span>\nm = int(input())&nbsp;  <span class=\"hljs-comment\"># считали количество книг, которое помещается в одной коробке</span>\nk =&nbsp;(n - <span class=\"hljs-number\">1</span>)//m + <span class=\"hljs-number\">1</span>&nbsp;<span class=\"hljs-comment\"># по формуле округления вверх находим количество коробок</span>\n<span class=\"hljs-keyword\">print</span> (k)</codes></pre></span></div>\n      </div>\n</div>\n</div>\n</div>\n</article>', 1671028553536),
(18, 'Условный оператор, полное ветвление', '<div id=\"ember1811\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: right;\">Думаю, искусство программировать немногим сложнее других человеческих навыков.<br>\nПрограммирование делает вас лучше точно так же, как вам помогают развиваться<br>\nизучение иностранного языка, математики или чтение книг.</p>\n\n<p style=\"text-align: right;\"><em>Jack Dorsey</em></p>\n\n<p style=\"text-align: center;\"><strong>Условный оператор, полное ветвление</strong></p>\n\n<p>В предыдущем разделе мы писали линейные программы. Но, существует много случаев, когда наш алгоритм зависит от какого-то начального условия.</p>\n\n<p><br>\nНапример, измеряем температуру тела человека. Если температура < 37, то надо выдать сообщение - здоров, иначе - болен. Изобразим в виде схемы:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://ucarecdn.com/5b6153f7-1874-40c8-8475-6df681e92903/-/crop/363x264/0,18/-/preview/\"></p>\n\n<p><br>\nВидим, что есть две ветки. Мы делаем вывод в зависимости от условия: здоров или болен. Ещё пример. Подходим к светофору. Если горит свет зелёный, то мы переходим дорогу, иначе - стоим. Если нарисуем блок-схему, то она будет выглядеть также, как и в первом примере. Такое ветвление называется полным. Посмотрим, как оно записывается на языке Питон.</p>\n\n<p>Условный оператор в Питоне имеет следующий синтаксис:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">if</span> Условие:\n    Блок инструкций <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>:\n    Блок инструкций <span class=\"hljs-number\">2</span></codes></pre>\n\n<p>После <em><strong>Условия</strong></em> и после служебного слова else должны стоять двоеточия, иначе будет - ошибка. <br>\n<em><strong><var>Блок инструкций 1</var></strong></em> будет выполнен, если <strong><var>Условие</var></strong> истинно. Если <strong><var>Условие</var></strong> ложно, будет выполнен <em><strong><var>Блок инструкций 2</var></strong></em>.</p>\n\n<p>!!! Причём Блоки инструкций пишутся с отступами в 4 пробела. Если вы поставили перед блоками инструкций двоеточие, то среда разработки, при нажатии Enter, сама сделает необходимый сдвиг. То есть вы делаете сдвиг сами или вам помогает среда разработки, но он должен быть! Так как сдвиг показывает ветки, которые мы рисуем на блок-схеме.</p>\n\n<p>Напишем полный текст программы, которая определяет, здоров или болен человек.</p>\n\n<pre><codes class=\"language-python hljs\">t = int(input())\n<span class=\"hljs-keyword\">if</span> t < <span class=\"hljs-number\">37</span>:\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"Здоров\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"Болен\"</span>)</codes></pre>\n\n<p>Попробуйте сами придумать примеры на проверку условия. Если хорошо подумаете, то убедитесь, что проверять условия нам приходится практически постоянно: идёт ли дождь, пришло ли сообщение на почту, есть ли в холодильнике любимая еда)) </p>\n\n<p>Но в школьном курсе программирования, мы будем решать в основном \"математические\" задачи. Для оформления условия в условном операторе, мы будем использовать знаки больше, меньше, равно, не равно. Вы с ними знакомились в курсе математики. Только запись этих знаков немного будет отличаться от привычных<br>\n </p>\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 500px;\">\n	<tbody>\n		<tr>\n			<td style=\"text-align: center;\"><strong>Оператор сравнения</strong></td>\n			<td style=\"text-align: center;\"><strong>Запись<br>\n			оператора сравнения</strong></td>\n		</tr>\n		<tr>\n			<td>Больше</td>\n			<td style=\"text-align: center;\"><strong>></strong></td>\n		</tr>\n		<tr>\n			<td>Меньше</td>\n			<td style=\"text-align: center;\"><strong><</strong></td>\n		</tr>\n		<tr>\n			<td>Больше или равно</td>\n			<td style=\"text-align: center;\"><strong>>=</strong></td>\n		</tr>\n		<tr>\n			<td>Меньше или равно</td>\n			<td style=\"text-align: center;\"><strong><=</strong></td>\n		</tr>\n		<tr>\n			<td>Не равно</td>\n			<td style=\"text-align: center;\"><strong>!=</strong></td>\n		</tr>\n		<tr>\n			<td>Равно</td>\n			<td style=\"text-align: center;\"><strong>==</strong></td>\n		</tr>\n	</tbody>\n</table>\n<p><br>\nРассмотрим ещё один пример. Подаётся на вход рост двух детей в сантиметрах в виде целого числа. Нужно выдать число 1, если первый имеет более высокий рост и 2, если второй имеет более высокий рост. Гарантируется, что ребята имеют разный рост. </p>\n<pre><codes class=\"language-python hljs\">x1 = int(input())\nx2 = int(input())\n<span class=\"hljs-keyword\">if</span> x1 > x2:\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">2</span>)</codes></pre></span></div>', 1671028681596),
(19, 'Сложные условия. Немного логики. Неполные ветвления', '<div id=\"ember1945\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember1946\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Сложные условия. Немного логики. Неполные ветвления</strong></p>\n\n<p><strong>Задачa №1.</strong> Напишите программу, которая запрашивает три числа и отвечает на вопрос: \"Все ли числа одинаковы?\". Если да - вывести \"YES\", иначе - ничего не выводить. </p>\n\n<p>Как выполнить сравнение трёх чисел, если a=5, b=5, d=5? Понятно, что только одним сравнением мы не обойдёмся. Мы можем сравнить a c b, а потом b c d. И нам надо, чтобы первое сравнение было истинным <strong>И </strong>второе сравнение тоже было истинным. Обращаем внимание на связку <strong>И.</strong> С её помощью мы получим сложное условие, которое будет истинно только в одном случае, когда оба исходных простых условия будут истинны. Рассмотрим все возможные варианты простых условий в таблице истинности. Связка <strong>и</strong> в языке Питон записывается как and. Такую связку называют<strong> логическим умножением (конъюнкцией).</strong><br>\n </p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 500px;\">\n	<tbody>\n		<tr>\n			<td style=\"text-align: center;\"><strong>a==b</strong></td>\n			<td style=\"text-align: center;\"><strong>b==d</strong></td>\n			<td style=\"text-align: center;\"><strong>a==b and b==d</strong></td>\n		</tr>\n		<tr>\n			<td>истина</td>\n			<td>истина</td>\n			<td>истина</td>\n		</tr>\n		<tr>\n			<td>истина</td>\n			<td>ложь</td>\n			<td>ложь</td>\n		</tr>\n		<tr>\n			<td>ложь</td>\n			<td>истина</td>\n			<td>ложь</td>\n		</tr>\n		<tr>\n			<td>ложь</td>\n			<td>ложь</td>\n			<td>ложь</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Конечный код программы:</p>\n\n<pre><codes class=\"language-python hljs\">a, b, c = map(int, input().split())\n<span class=\"hljs-keyword\">if</span> a==b <span class=\"hljs-keyword\">and</span> b==с:\n     <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"YES\"</span>)</codes></pre>\n\n<p>Так как в том случае, когда условие будет ложно, нам делать ничего не надо, то мы просто не пишем ветку else. Такое ветвление называется<em><strong> неполным. </strong></em>Схема неполного ветвления:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://ucarecdn.com/5204af4d-5f4b-4576-ba33-d645fee496fd/-/crop/324x254/37,25/-/preview/\"></p>\n\n<p>В языке Питон можно записать сложное условие без логической связки, вот в таком виде:</p>\n\n<pre><codes class=\"language-python hljs\">a, b, d = map(int, input().split())\n<span class=\"hljs-keyword\">if</span> a == b == d:\n     <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"YES\"</span>)</codes></pre>\n\n<p><strong>Задача №2.</strong> Напишите программу, которая проверяет истинность условия: \"Среди трёх введённых целых чисел есть хотя бы одна пара совпадающих\". Если есть, выведите - \"YES\", иначе ничего выводить не надо.</p>\n\n<p>Теперь нам надо проверить, чтобы a==b <strong>или</strong> b==d <strong>или </strong>a==d. Если хотя бы одно условие будет истинно, то значит одна совпадающая пара имеется. </p>\n\n<p>Рассмотрим все возможные варианты простых условий в таблице истинности. Связка <strong>или</strong> в языке Питон записывается как<strong> or. </strong>Такую связку называют <strong>логическим сложением (дизъюнкцией).</strong></p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 500px;\">\n	<tbody>\n		<tr>\n			<td style=\"text-align: center;\"><strong>a==b</strong></td>\n			<td style=\"text-align: center;\"><strong>b==d</strong></td>\n			<td style=\"text-align: center;\"><strong>a==b or b==d</strong></td>\n		</tr>\n		<tr>\n			<td>истина</td>\n			<td>истина</td>\n			<td>истина</td>\n		</tr>\n		<tr>\n			<td>истина</td>\n			<td>ложь</td>\n			<td>истина</td>\n		</tr>\n		<tr>\n			<td>ложь</td>\n			<td>истина</td>\n			<td>истина</td>\n		</tr>\n		<tr>\n			<td>ложь</td>\n			<td>ложь</td>\n			<td>ложь</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Конечный код программы:</p>\n\n<pre><codes class=\"language-python hljs\">a, b, c = map(int, input().split())\n<span class=\"hljs-keyword\">if</span> a==b <span class=\"hljs-keyword\">or</span> b==с <span class=\"hljs-keyword\">or</span> a==с:\n     <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"YES\"</span>)</codes></pre>\n\n<p><strong>Задача №3</strong><em><strong>. </strong></em>Напишите программу, которая запрашивает два числа и отвечает на вопрос: \"Различны ли введённые числа?\". Если да - вывести \"YES\", иначе -  ничего не выводить.</p>\n\n<p>Мы можем проверить числа на равенство, а потом применить к нему отрицание - <strong>not</strong>. Эта связка истинное условие делает ложным, а ложное истинным. Код программы:</p>\n\n<pre><codes class=\"language-python hljs\">a, b = map(int, input().split())\n<span class=\"hljs-keyword\">if</span>  <span class=\"hljs-keyword\">not</span> (a==b):\n     <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"YES\"</span>)</codes></pre>\n\n<p>Таблица истинности для отрицания:</p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 500px;\">\n	<tbody>\n		<tr>\n			<td style=\"text-align: center;\"><strong>a==b</strong></td>\n			<td style=\"text-align: center;\"><strong>not (a==b)</strong></td>\n		</tr>\n		<tr>\n			<td>истина</td>\n			<td>ложь</td>\n		</tr>\n		<tr>\n			<td>ложь</td>\n			<td>истина</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Эту же программу можно записать без логической связки <strong>not:</strong></p>\n\n<pre><codes class=\"language-python hljs\">a, b = map(int, input().split())\n<span class=\"hljs-keyword\">if</span>  a !=b :\n     <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"YES\"</span>)</codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671034303922),
(20, 'Вложенные ветвления. Каскадная конструкция в Python', '<article id=\"ember2095\" class=\"step-show ember-view\"><div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember2096\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember2097\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Вложенные ветвления. Каскадная конструкция в Python</strong></p>\n\n<p><strong>Задача №1.</strong> Два целых числа подаются по одному в строке. Программа должна вывести число 1, если первое число больше второго, число 2, если второе больше первого или число 0, если они равны.</p>\n\n<p>Обращаем внимание на тот факт, что в этой задаче нужно сделать целых 3! различных вывода. В предыдущих разделах нам надо было сделать 1 или 2 вывода и мы обходились либо полным, либо неполным ветвлением. </p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://ucarecdn.com/20349a04-b6d4-40e2-a88d-40af5fad4e09/-/crop/751x337/0,0/-/preview/\"></p>\n\n<p>Рассуждаем по поводу задачи (а рассуждать надо всегда!)). Пусть первое число - x1, а второе число - x2. Сравним их в условном операторе <strong>if x1 > x2, </strong>в случае истины выведем число <strong>1. </strong>Что писать в ветке <strong>else</strong>? Сразу что-то вывести мы не можем, мы не знаем равны они или x2>x1. Значит нам опять надо проверять условие. Так и будем писать <strong>if x2 >x1. </strong>Таким образом, мы в один условный оператор вложили другой. Нарисуем схему:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://ucarecdn.com/76659988-3167-4c27-b460-3311cf88cf6e/-/crop/516x344/0,19/-/preview/\"></p>\n\n<p>Напишем код:</p>\n\n<pre><codes class=\"language-python hljs\">x1 = int(input())\nx2 = int(input())\n<span class=\"hljs-keyword\">if</span>  x1 > x2:\n      <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">else</span>:\n      <span class=\"hljs-keyword\">if</span> x2 > x1:\n             <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">2</span>)\n      <span class=\"hljs-keyword\">else</span>:\n             <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">0</span>)</codes></pre>\n\n<p>Охватите взглядом текст программы и увидите, что в ветке else вложен полный условный оператор. Его вложенность отслеживаем за счёт сдвига. Может так случиться в очередной задаче нам надо будет выводить больше вариантов - 5, 6 и более. Каждый раз писать вложение со сдвигом не очень удобно, учитывая, что сдвиги будут увеличиваться с каждым новым вложением. Поэтому в языке Питон есть более компактная запись вложенных условий. Для этого <strong>else</strong> и <strong>if </strong> соединили В ОДНО СЛУЖЕБНОЕ СЛОВО <strong>elif. </strong>За счёт этого запись программы получается более компактной:</p>\n\n<pre><codes class=\"language-python hljs\">x1 = int(input())\nx2 = int(input())\n<span class=\"hljs-keyword\">if</span>  x1 > x2:\n      <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">elif</span> x2 > x1:\n      <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">else</span>:\n      <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">0</span>)</codes></pre>\n\n<p><strong>Elif </strong>можно писать столько раз, сколько нужно, ограничений нет. Рассуждаем так: иначе, мы опять проверяем условие. Такая последовательность операций называется \"каскадной\".</p>\n\n<p><strong>Задача №2</strong><em><strong>. </strong></em>Даны координаты точки на плоскости, требуется определить в какой координатной четверти находится точка и вывести 1, 2, 3 или 4. При условии, что координаты отличны от нуля. </p>\n\n<p>Координатные четверти:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://ucarecdn.com/5f742a05-9240-44ae-9e57-c9c49b2488ad/\"></p>\n\n<p>Если x > 0 и y > 0, то 1 четверть.<br>\nЕсли x < 0 и y > 0, то 2 четверть.<br>\nЕсли x < 0 и y < 0, то 3 четверть.<br>\nЕсли x > 0 и y < 0, то 4 четверть.</p>\n\n<p>Код программы:</p>\n\n<pre><codes class=\"language-python hljs\">x, y = map(int, input().split())\n<span class=\"hljs-keyword\">if</span> x > <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> y > <span class=\"hljs-number\">0</span>:\n      <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">elif</span> x < <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> y > <span class=\"hljs-number\">0</span>:\n      <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">elif</span> x < <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> y < <span class=\"hljs-number\">0</span>:\n      <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-keyword\">else</span>:\n      <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">4</span>)</codes></pre></span></div>\n      </div>\n</div>\n</div>\n</div>\n</article>', 1671034281181),
(21, 'Поиск суммы, количества и произведения', '<article id=\"ember2184\" class=\"step-show ember-view\"><div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember2185\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember2186\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Поиск суммы, количества и произведения</strong></p>\n\n<p>Очень часто люди решают такие жизненные задачи, как поиск суммы и количества. Давайте поразмышляем и вспомним примеры из жизни.&nbsp;<br>\n<strong>Пример №1. </strong>Заглядываем в кошелёк. Конечно, нам надо знать сколько денег там лежит. Например, там лежит 3 купюры по 50 рублей. 3 купюры - это <em><strong>количество</strong></em>. 150 рублей - это <em><strong>сумма</strong></em>.</p>\n\n<p><strong>Пример №2. </strong>К вам приходят гости. Вы начинаете считать в своём доме <em><strong>количество</strong></em> стульев, тарелок и т.д.. Вам надо убедиться, чтобы вам всего для гостей хватило.</p>\n\n<p><strong>Пример №3.</strong> Собираетесь компанией в недельный поход, складываете продукты. 2 кг гречки, 2 кг картошки, 3 кг овощей и т.д.. Что вам нужно узнать в процессе сборов? Конечно, <strong>сумму</strong> всех вещей в килограммах! Чтобы потом распределить равномерно груз на всех участников похода.</p>\n\n<p>Предлагаю далее посмотреть по сторонам у убедиться, что это действительно актуальная задача - поиск суммы и количества. А раз она такая актуальная, то мы будем писать программы для решения таких задач.&nbsp;</p>\n\n<p><strong>Задача №1.&nbsp;</strong>В кошельке лежит 4&nbsp;купюры. На вход программы будет подаваться номинал каждой купюры. Надо определить, <em><strong>какую&nbsp;сумму денег</strong></em> составляют бумажные купюры, начиная со 100 руб. Остальными купюрами надо пренебречь.</p>\n\n<p>Для того, чтобы искать сумму, будем использовать такой приём. Заведём переменную S и запишем в неё 0. Это будет означать, что до начала всех подсчётов сумма пока равна 0. А потом по очереди будем просматривать каждую купюру и при необходимости&nbsp;прибавлять к переменной S её номинал. Для этого будем использовать оператор присваивания: S = S + x1.&nbsp;</p>\n\n<p>Значение переменной S постепенно увеличивается. Так собственно мы поступаем и в жизни. По сути, здесь нет нового для вас алгоритма. В программировании такой приём называется накапливание суммы.</p>\n\n<p>Команда S=0 обязательна! Обратите&nbsp;внимание, что случится с программой, если вы забудете написать&nbsp;S=0.</p>\n\n<p>Код программы:</p>\n\n<pre><codes class=\"language-python hljs\">x1, x2, x3, x4&nbsp;= map(int, input().split())\nS = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> x1 &gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + x1\n<span class=\"hljs-keyword\">if</span> x2&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + x2\n<span class=\"hljs-keyword\">if</span> x3&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + x3\n<span class=\"hljs-keyword\">if</span> x4&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + x4\n<span class=\"hljs-keyword\">print</span> (S)</codes></pre>\n\n<p><strong>Задача №2.&nbsp;</strong>В кошельке лежит 4&nbsp;купюры. На вход программы будет подаваться номинал каждой купюры. Надо определить, <em><strong>какое количество&nbsp;</strong></em>составляют бумажные купюры, начиная со 100 руб.</p>\n\n<p>Эта задача очень похожа на предыдущую. Но в чём разница? Теперь мы считаем количество! А что мы делаем, когда считаем количество? Загибаем пальчики)) То есть прибавляем 1.</p>\n\n<p>Переменная S в таких задачах называется счётчиком. Команда S = 0 - инициализация счётчика.</p>\n\n<p>Код программы:</p>\n\n<pre><codes class=\"language-python hljs\">x1, x2, x3, x4&nbsp;= map(int, input().split())\nS = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> x1 &gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">if</span> x2&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">if</span> x3&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">if</span> x4&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">print</span> (S)</codes></pre>\n\n<p><strong>Задача №3.&nbsp;</strong>Давайте соединим две задачи в одну. То есть нам надо будет найти сумму и количество купюр, больших 100 и выдать на экран эти два значения. В такой задаче нам надо инициализировать сразу две переменных - одну для суммы, другую - для количества.</p>\n\n<pre><codes class=\"language-python hljs\">x1, x2, x3, x4&nbsp;= map(int, input().split())\nS = <span class=\"hljs-number\">0</span>\nK = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> x1 &gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + x1\n&nbsp; &nbsp; &nbsp; K = K + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">if</span> x2&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + x2\n&nbsp; &nbsp; &nbsp;&nbsp;K = K + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">if</span> x3&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + x3\n&nbsp; &nbsp; &nbsp;&nbsp;K = K + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">if</span> x4&nbsp;&gt;= <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; S = S + x4\n&nbsp; &nbsp; &nbsp;&nbsp;K = K + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">print</span> (S, K)</codes></pre>\n\n<p>Видим, что когда условие истинно, то есть мы взяли нужную нам купюру, то мы делаем сразу 2 действия: находим сумму и количество. Два действия расположены в ветке <em><strong>истина</strong></em>&nbsp;и имеют одинаковый сдвиг.</p>\n\n<p>А если нам надо будет найти произведение чисел? что изменится в коде программы? Попробуйте догадаться сами. Для того, чтобы проверить свои предположения, решите предложенные задачи на поиск произведения.</p></span></div>\n      </div>\n</div>\n</div>\n</div>\n</article>', 1671028844761),
(22, 'Обмен значений переменных. Упорядочивание трёх чисел', '<div id=\"ember2268\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember2269\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Обмен значений переменных.&nbsp; Упорядочивание трёх чисел</strong></p>\n\n<p><strong>Задача №1.&nbsp;</strong>Надо написать программу, которая&nbsp;меняет значения переменных. Например, изначально <strong>a</strong> = 10, <strong>b</strong> = 15.<br>\nВ результате работы они должны поменяться местами, то есть должно получиться: <strong>a</strong> = 15, <strong>b </strong>= 10.</p>\n\n<p>Первое, что может прийти в голову (если плохо подумать)), записать такой оператор присваивания a = b. Что же в этом случае произойдёт? Переменная <em><strong>а</strong></em> теперь будет ссылаться на число 15. При этом мы потеряем число 10!&nbsp;</p>\n\n<p>Что же делать? Как поступить, чтобы не потерять значение переменной 10? Заведём ещё одну переменную, назовём её<strong> f </strong>и запишем в неё значение переменной <strong>a</strong>. Далее&nbsp;в <strong>а</strong> можно записать <strong>b,&nbsp;</strong>теперь это можно сделать, значение переменной <strong>a</strong> мы сохранили. И последний шаг, в <strong>b</strong> запишем <strong>f.</strong><br>\n&nbsp;</p>\n\n<pre><codes class=\"language-python hljs\">f = a\na = b\nb = f\n</codes></pre>\n\n<p>В языке программирования Питон есть возможность записать обмен значениями переменных короче. За счёт того, что в этом языке имеется множественное присваивание:</p>\n\n<pre><codes class=\"language-python hljs\">a, b = b, a</codes></pre>\n\n<p><strong>Задача №2.&nbsp;</strong>Дано три числа. Упорядочите их в порядке неубывания. Программа должна считывать три числа a, b, c затем программа должна менять их значения так, чтобы стали выполнены условия&nbsp;a &lt;= b &lt;=&nbsp;c и затем программа выводит тройку&nbsp;a, b, c. Оператор вывода print() разрешается использовать только один раз.&nbsp;</p>\n\n<p>Как будем решать задачу? Понятно, что надо сравнивать между собой значения переменных и при необходимости менять местами. Рассмотрим \"самый плохой случай\", когда значения подаются по убыванию <strong>3, 2, 1</strong>. Сколько сравнений и обменов понадобиться? Смотрим в таблице.</p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 800px;\">\n	<tbody>\n		<tr>\n			<td style=\"text-align: center;\"><strong>a</strong></td>\n			<td style=\"text-align: center;\"><strong>b</strong></td>\n			<td style=\"text-align: center;\"><strong>c</strong></td>\n			<td style=\"text-align: center;\"><strong>Что делаем</strong></td>\n			<td style=\"text-align: center;\"><strong>Комментарий</strong></td>\n		</tr>\n		<tr>\n			<td>3</td>\n			<td>2</td>\n			<td>1</td>\n			<td>Если&nbsp; a &gt; b, то меняем значения</td>\n			<td>Больший элемент ставим на второе место</td>\n		</tr>\n		<tr>\n			<td>2</td>\n			<td>3</td>\n			<td>1</td>\n			<td>&nbsp;</td>\n			<td>Результат после первого обмена</td>\n		</tr>\n		<tr>\n			<td>2</td>\n			<td>3</td>\n			<td>1</td>\n			<td>Если&nbsp; b &gt; c, то меняем значения</td>\n			<td>Больший элемент оказывается на своём! месте</td>\n		</tr>\n		<tr>\n			<td>2</td>\n			<td>1</td>\n			<td>3</td>\n			<td>&nbsp;</td>\n			<td>Результат после второго обмена</td>\n		</tr>\n		<tr>\n			<td>2</td>\n			<td>1</td>\n			<td>3</td>\n			<td>Если&nbsp; a &gt; b, то меняем значения</td>\n			<td>Сравниваем первый и второй элементы и меняем местами при необходимости. Это последнее сравнение.</td>\n		</tr>\n		<tr>\n			<td>1</td>\n			<td>2</td>\n			<td>3</td>\n			<td>&nbsp;</td>\n			<td>Результат последнего обмена. Все элементы стоят в нужном порядке.</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Понадобилось три сравнения и три обмена. Запишем код программы на языке Python:</p>\n\n<pre><codes class=\"language-python hljs\">a = int(input())\nb = int(input())\nc = int(input())\n<span class=\"hljs-keyword\">if</span> a &gt; b:\n&nbsp; &nbsp; a, b = b, a\n<span class=\"hljs-keyword\">if</span> b &gt; c:\n&nbsp; &nbsp; b, c = c, b\n<span class=\"hljs-keyword\">if</span> a &gt; b:\n&nbsp; &nbsp; a, b = b, a\nprint(a, b, c)</codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671028926596),
(23, 'Виды циклов', '<article id=\"ember2594\" class=\"step-show ember-view\"><div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember2595\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember2596\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Виды циклов</strong></p>\n\n<p>Цикл - это многократное повторение одних и тех же действий. Прежде чем программировать, давайте посмотрим вокруг. Где мы можем увидеть циклы?&nbsp;</p>\n\n<ul>\n	<li>Смена дня и ночи - циклическое повторение.</li>\n	<li>Мытьё тарелок вручную - с каждой следующей тарелкой мы повторяем одни и те же действия, а это цикл.</li>\n	<li>Движение любого человека - шаг левой, потом правой ногой и опять&nbsp;левой, правой.</li>\n	<li>Чистка картошки вручную - с каждой следующей картофелиной делаем одни и те же действия.</li>\n	<li>Ежедневные процедуры человека: умыться, причесаться, одеться и т.д.</li>\n	<li>Ещё примеры придумайте сами)</li>\n</ul>\n\n<p>Циклы бывают двух видов - с известным числом повторений и с неизвестным числом повторений. Давайте рассмотрим на примере мытья тарелок.</p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 900px;\">\n	<tbody>\n		<tr>\n			<td style=\"text-align: center;\"><strong>Цикл с известным числом повторений</strong></td>\n			<td style=\"text-align: center;\"><strong>Цикл с неизвестным числом повторений</strong></td>\n		</tr>\n		<tr>\n			<td>\n			<p>Например, вы знаете, что вам надо вымыть ровно 3 тарелки. Как можно действовать?&nbsp;</p>\n\n			<ol>\n				<li>Взять первую тарелку (с чётким пониманием, что она идёт под номером 1), вымыть её, убрать на место.</li>\n				<li>Взять вторую тарелку (осознаём, что она с номером 2), моем, убираем.</li>\n				<li>Взять третью тарелку (понимаем, что она последняя в нашем цикле), моем, убираем.</li>\n				<li>Цикл окончен! Дело сделано.</li>\n			</ol>\n\n			<p>В этом случае мы заранее знали, что нам надо сделать ровно три повторения. Для этого нам пригодился некий счётчик. Мы отсчитывали 1, 2, 3. Дошли до трёх - это конец цикла.</p>\n			</td>\n			<td>\n			<p>В этом случае вам надо вымыть очень много тарелок. Считать их количество&nbsp;в таком случае - нерационально.</p>\n\n			<p>Как действовать?<br>\n			Каждый раз при мытье очередной тарелки проверять условие, есть ли следующая?<br>\n			Если есть, то продолжаем мыть, если больше тарелок нет, то происходит выход из цикла.</p>\n\n			<p>В этом случае мы не знаем, когда надо закончить цикл, поэтому <strong>каждый раз</strong> проверяем условие.&nbsp; Пока условие <em><strong>Истинно</strong></em>, мы продолжаем делать действия. Как только условие становится<em><strong> Ложным,&nbsp;</strong></em>заканчиваем работу цикла.</p>\n\n			<p>&nbsp;</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n			<p style=\"text-align: center;\"><strong>Блок схема цикла<br>\n			с известным числом повторений</strong></p>\n\n			<p><img alt=\"\" src=\"https://ucarecdn.com/1487b760-13e2-469a-8abd-3571cea57ddb/-/crop/399x294/0,31/-/preview/\"></p>\n\n			<p>В шестиугольнике прописываем количество повторений. Как только все повторения выполнены, происходит выход из цикла.<br>\n			&nbsp;</p>\n\n			<p>&nbsp;</p>\n			</td>\n			<td>\n			<p style=\"text-align: center;\"><strong>Блок схема цикла<br>\n			с неизвестным числом повторений</strong></p>\n\n			<p style=\"text-align: center;\"><img alt=\"\" height=\"274\" src=\"https://ucarecdn.com/48efe7cb-762e-4459-82b1-8f65f2a7db04/-/crop/398x300/0,25/-/preview/\" width=\"364\"></p>\n\n			<p>Условие оформляется, как и в условном операторе, в фигуре в виде ромба.&nbsp;</p>\n\n			<p>Те действия, которые надо повторять многократно называют телом цикла и оформляются в прямоугольнике</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>Эти два вида циклов есть в любом алгоритмическом языке программирования. Начнём с цикла с известным числом повторений.</p></span></div>\n      </div>\n</div>\n</div>\n</div>\n</article>', 1671028975662),
(24, 'Цикл с известным числом повторений', '<article id=\"ember2795\" class=\"step-show ember-view\"><div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember2796\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember2797\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Цикл с известным числом повторений</strong></p>\n\n<p>Такой вид циклов называется циклом с параметром и считается более лёгким для понимания. Рассмотрим несколько задач, на которых разберём применение цикла.</p>\n\n<p><strong>Задача №1.&nbsp;</strong>Надо вывести в столбик 5 раз слово \"Hello\". Какие у нас варианты? Как мы можем поступить? Например, написать 5 раз функцию print(). Вроде бы не много, можно и написать.&nbsp;Но вот если нам надо будет напечатать&nbsp;100 раз одно и то же?&nbsp;Это уже существенно! Не хочется 100 раз писать одно и то же. Нужен цикл. Выглядеть он будет таким образом:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):\n&nbsp; &nbsp; &nbsp; print(<span class=\"hljs-string\">\"Hello\"</span>)</codes></pre>\n\n<p>Этот цикл будет работать 5 раз. Разберём из чего состоит эта запись.</p>\n\n<ul>\n	<li>В конце первой строки стоит двоеточие, после которого идёт тело цикла.</li>\n	<li>Тело цикла, как и в случае с условным оператором, пишется со сдвигом в 4 пробела.</li>\n	<li><strong>i</strong> - это параметр цикла, тот счётчик, о котором мы говорили чуть раньше, он будет \"вести подсчёт нужного количества повторений\". Но чтобы разобраться, как он это делает, нам надо подробно разобрать функцию <strong>range.</strong></li>\n</ul>\n\n<p><strong>Задача №2. </strong>Надо вывести числа 0, 1, ..., 9. Всего 10 чисел в столбик. Код программы:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):\n&nbsp; &nbsp; &nbsp; print(i)</codes></pre>\n\n<p>При запуске программы мы увидим нужную последовательность. Дело в том, что функция <strong>range </strong>генерирует так называемые арифметические последовательности.<br>\nПри такой записи первое сгенерированное число - &nbsp;0, следующие&nbsp;значения&nbsp;получаются путём прибавления 1. Таким образом будут получены числа 0, 1,&nbsp;&nbsp;2, 3, 4 и т.д.- всего 10 чисел. Но так как первое число было 0, то последнее будет - 9.</p>\n\n<p>Параметр цикла <strong>i </strong>принимает по очереди все значения, которые сгенерировала функция <strong>range,&nbsp;</strong>поэтому по команде&nbsp;<strong>print ( i&nbsp;) </strong>все значения будут напечатаны в столбик.</p>\n\n<p>Генерирование первого числа 0 и шаг равный 1 для получения следующих чисел - это значения, заданные <em>ПО УМОЛЧАНИЮ</em> в функции <strong>range</strong>. Мы можем их&nbsp;изменить.</p>\n\n<p><strong>Задача №3. </strong>Надо вывести числа 5, 6, ..., 10. Всего 6&nbsp;чисел в строку через пробел. Код программы:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> j&nbsp;<span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">11</span>):\n&nbsp; &nbsp; &nbsp; print(j, )</codes></pre>\n\n<p>Здесь параметр цикла обозначили для разнообразия другой переменной - <strong>j</strong>.&nbsp;<br>\nНа первом месте в функции <strong>range</strong>&nbsp;указываем число 5, на последнем 11. При такой записи&nbsp;будут сгенерированы числа&nbsp; 5, 6, 7, 8, 9, 10. Число 11 не будет включено.<br>\nШаг по прежнему равен 1. Это означает, что каждое следующее число больше предыдущего на 1.</p>\n\n<p>Для того, чтобы данные были выведены в строку, изменили параметр <strong>end</strong> в функции <strong>print()</strong>.</p>\n\n<p><strong>Задача №4. </strong>Надо вывести числа 2, 4, 6, 8, 10.&nbsp;Всего 5&nbsp;чисел в строку через пробел. Код программы:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> j&nbsp;<span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>):\n&nbsp; &nbsp; &nbsp; print(j, )</codes></pre>\n\n<p>В функции <strong>range</strong> заданы все три параметра. Начальное, конечное и шаг.</p>\n\n<p><strong>Задача №5. </strong>Надо вывести числа 40, 35, 30, 25, 20, 15, 10, 5, 0.&nbsp;Всего 9&nbsp;чисел в строку через пробел. Код программы:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> j&nbsp;<span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-5</span>):\n&nbsp; &nbsp; &nbsp; print(j, )</codes></pre>\n\n<p>В функции <strong>range</strong> заданы все три параметра. Шаг может быть отрицательным. В этом случае получается убывающая последовательность. В таком случае начальное значение должно быть больше, а конечное меньше.&nbsp;</p>\n\n<p>Подытожим, какие у нас есть варианты по использованию функции <strong>range.</strong></p>\n\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width: 900px;\">\n	<tbody>\n		<tr>\n			<td style=\"text-align: center;\"><strong>Пример</strong></td>\n			<td style=\"text-align: center;\"><strong>Как работает</strong></td>\n		</tr>\n		<tr>\n			<td>range(15)</td>\n			<td>Генерируется последовательность из 15 элементов. Первый элемент - 0, шаг - 1,&nbsp;<br>\n			они заданы по умолчанию. Число 15 не генерируется!</td>\n		</tr>\n		<tr>\n			<td>range(3, 10)</td>\n			<td>Генерируется последовательность из 7 элементов.&nbsp;Первый элемент - 3. Шаг - 1,&nbsp;<br>\n			задан по умолчанию. Число 10 не генерируется!</td>\n		</tr>\n		<tr>\n			<td>range(3, 22, 3)</td>\n			<td>Генерируется последовательность 3, 6, 9, 12, 15, 18, 21.&nbsp;Первый элемент - 3, шаг - 3.<br>\n			Число 22 не генерируется!</td>\n		</tr>\n		<tr>\n			<td>range(10, -1, -1)</td>\n			<td>Генерируется последовательность 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0.&nbsp;Первый элемент - 10,<br>\n			шаг - (-1).&nbsp;Число -1 не генерируется!</td>\n		</tr>\n		<tr>\n			<td>range(0, 10, -1)</td>\n			<td>Ошибки нет, но и ничего не генерируется.</td>\n		</tr>\n	</tbody>\n</table></span></div>\n      </div>\n</div>\n</div>\n</div>\n</article>', 1671029125298),
(25, 'Поиск элементов в последовательности', '<div id=\"ember2960\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember2961\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Поиск элементов в последовательности</strong></p>\n\n<p><strong>Задача. </strong>Напишите программу, которая запрашивает число n, а далее последовательность из n целых чисел. Надо определить, есть ли в этой последовательности элемент, равный 0 или нет. И выдать на экран соответствующее сообщение \"YES\" или \"NO\".</p>\n\n<p>Как действовать? Я сейчас приведу код программы, который очень часто приходит в голову школьникам:</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n      x = int(input())\n      <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-number\">0</span>:\n           print(<span class=\"hljs-string\">\"YES\"</span>)\n      <span class=\"hljs-keyword\">else</span>:\n           print(<span class=\"hljs-string\">\"NO\"</span>)</codes></pre>\n\n<p>В чём же здесь проблема? Дело в том, что по условию задачи, нам надо выдать ровно одно сообщение на экран. А эта программа каждый элемент nсравнивает с нулём и пишет нам сообщение. То есть эта программа решает другую задачу. Она выводит сообщение про каждый! элемент последовательности, сообщает равен ли он нулю или нет. Такие задачи тоже иной раз будем решать Но пока у нас другое условие.</p>\n\n<p><strong>Верное решение №1.</strong> Думаем дальше. Нам нужно вывести ровно одно! сообщение. Мы умеем считать количество элементов. Давайте применим это умение к данной задаче. Мы посчитаем количество элементов, которые равны нулю. И потом, когда цикл подсчёта будет закончен, мы можем записать условный оператор, который будет смотреть на количество элементов и делать вывод. Если количество равно нулю, то таких элементов не было и мы печатаем \"NO\", иначе печатаем \"YES\".</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\nk = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n      x = int(input())\n      <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-number\">0</span>:\n               k = k + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">if</span> k==<span class=\"hljs-number\">0</span>:\n      print(<span class=\"hljs-string\">\"NO\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n      print(<span class=\"hljs-string\">\"YES\"</span>)</codes></pre>\n\n<p>Этот код будет работать верно. Но давайте подумаем вот над чем. Исходные данные могут быть различны. Предположим, что в последовательности 100 элементов и самый первый элемент равен 0. Наша программа встретит первый 0 и продолжит проверять остальные 99 элементов! Хотя уже понятно, что нулевой элемент есть и дальше нет смысла проверять.</p>\n\n<p><strong>Верное решение №2. </strong>Напишем другое, более рациональное решение. Для того, чтобы его написать, подумаем, как бы мы действовали, если бы видели перед глазами цепочку чисел. До начала просмотра у нас <strong>НЕТ </strong>нулевого элемента. Начинаем глазами просматривать элементы. И вдруг, видим нулевой элемент. Мы понимаем, что <strong>ЕСТЬ </strong>нулевой. Дальше смотреть на элементы не нужно, можно останавливаться. </p>\n\n<p>Но если мы просмотрели все элементы и не встретили нулевого элемента, то получается, что его как не было, так и нет!</p>\n\n<p>Теперь этот алгоритм запишем на языке Python. Заведём переменную<strong> f </strong>- это будет некий флаг. Изначально запишем в эту переменную <strong>\"NO\"</strong>. Далее с помощью цикла и условного оператора просматриваем элемент за элементом и сравниваем с числом 0. Если элемент оказался равен 0, то в переменную<strong> f </strong>записываем<strong> \"YES\" </strong>и останавливаем работу цикла с помощью команды <strong>break. </strong>Эта команда прекращает работу цикла, хотя параметр ещё не дошёл до конечного значения. После работы цикла, необходимо вывести переменную <strong>f. </strong>В ней будет храниться ответ.</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\nf = <span class=\"hljs-string\">\"NO\"</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n      x = int(input())\n      <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-number\">0</span>:\n               f = <span class=\"hljs-string\">\"YES\"</span>\n               <span class=\"hljs-keyword\">break</span>\nprint(f)</codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671029287946);
INSERT INTO `teory` (`id`, `name`, `description`, `time`) VALUES
(26, 'Цикл в цикле или вложенные циклы', '<article id=\"ember3106\" class=\"step-show ember-view\"><div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember3107\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember3108\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Цикл в цикле или вложенные циклы</strong></p>\n\n<p>Для решения многих задач нам понадобится понимание того, как работает такая алгоритмическая конструкция, как цикл в цикле. Разберём её работу. Для этого, надо набрать код в среде разработки и&nbsp;поэкспериментировать:&nbsp;</p>\n\n<pre><codes class=\"language-python hljs\">n = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (n):\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range (n):\n        <span class=\"hljs-keyword\">print</span> (i, j)</codes></pre>\n\n<p>При запуске такого кода увидим столбик чисел:<br>\n0 0<br>\n0 1<br>\n0 2<br>\n1 0<br>\n1 1<br>\n1 2<br>\n2 0<br>\n2 1<br>\n2 2<br>\nЧто надо здесь заметить? Первую цифру выводит переменная <strong>i, </strong>а вторую переменную выводит переменная <strong>j. </strong>Первый цикл будем называть внешним, второй цикл - внутренним. Потому что он находится внутри первого.&nbsp;</p>\n\n<p>Далее замечаем, что во внешнем цикле параметр<strong> i </strong>принимает своё первое значение&nbsp;<strong>i = 0.&nbsp;</strong>По всем правилам работы цикла, всё что записано внутри него, должно быть выполнено. Но там, в свою очередь, записан второй цикл. Вот он, как раз, полностью должен быть отработан. Переменная <strong>j </strong>пробежит все свои значения. Поэтому мы увидим такие строки:<br>\n0 0<br>\n0 1<br>\n0 2<br>\nПосле того, как внутренний цикл отработал, это означает, что тело внешнего цикла было выполнено. Тогда параметр внешнего цикла будет принимать следующее значение&nbsp;<strong>i = 1.&nbsp;</strong>И опять внутренний цикл должен выполнить всю свою работу. Поэтому мы увидим следующие три строки:<br>\n1 0<br>\n1 1<br>\n1 2<br>\nИ так далее. <em><strong>Говорят, что для внешнего цикла внутренний пробегает все свои значения.</strong></em></p>\n\n<p><strong>Задача №1.&nbsp;</strong>На&nbsp;вход программы подаются два натуральных числа n и m. Программа должна построить таблицу, состоящую из нулей. В таблице должно быть n строк. В каждой строке m нулей. Нули выводятся через пробел.<br>\nПри n = 4 и m = 7&nbsp;:<br>\n0 0 0 0 0 0 0&nbsp;&nbsp;<br>\n0 0 0 0 0 0 0<br>\n0 0 0 0 0 0 0&nbsp; &nbsp;<br>\n0 0 0 0 0 0 0&nbsp;&nbsp;<br>\nКонкретно эту задачу можно решить используя один цикл. Но нам надо разобрать вложенные циклы, поэтому будем использовать их.</p>\n\n<p>Итак, нам надо n строк. За подсчёт количества строк будет отвечать внешний цикл. Он будет работать n раз. Внутри каждой строки надо организовать вывод m нулей. Замечаем, внутри первой строки надо вывести m нулей, внутри второй строки - m нулей, внутри третьей строки - m нулей. То есть номер строки зафиксирован, а внутри строки выводятся элемент за элементом. При таком алгоритме решения задачи нам поможет цикл в цикле.</p>\n\n<p>Напишем код, учитывая, что нули должны выводится через пробел:</p>\n\n<pre><codes class=\"language-python hljs\">n, m = map(int, input().split())\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (n):\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(m):\n        <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">0</span>, end = <span class=\"hljs-string\">\" \"</span>)</codes></pre>\n\n<p>Этот код выведет нужное количество нулей. Но выведены они будут одной строкой потому, что у нас в функции <strong>print()</strong> параметр end задаёт пробел. Но нигде нет перехода на новую строку. То есть где-то нам надо вставить команду перевода на новую строку, это будет&nbsp;<strong>print()</strong> без параметров и без списка вывода. Где должна стоять эта функция?</p>\n\n<p>Нам надо осуществлять переход на новую строку после того, как будут выведены все элементы строки. Строку выводит внутренний цикл. Вот после него и вставим&nbsp;<strong>print().&nbsp;</strong>Итоговый код:</p>\n\n<pre><codes class=\"language-python hljs\">n, m = map(int, input().split())\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (n):\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(m):\n&nbsp; &nbsp;     <span class=\"hljs-keyword\">print</span> (<span class=\"hljs-number\">0</span>, end = <span class=\"hljs-string\">\" \"</span>)\n&nbsp; &nbsp; print()</codes></pre>\n\n<p>Итак,&nbsp;<strong>print() </strong>находится в теле внешнего цикла. Но он будет работать после того, как отработает внутренний цикл. Поэтому он имеет такой же отступ, как вложенный цикл.</p></span></div>\n      </div>\n</div>\n</div>\n</div>\n</article>', 1671032755259),
(27, 'Метод перебора при решении задач', '<div id=\"ember3148\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember3149\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Метод перебора при решении задач</strong></p>\n\n<p><strong>Старинная задача.</strong> Сколько можно купить быков, коров и телят, если плата за быка 10 рублей, за корову — 5 рублей, за теленка — полтинник (0.5 рубля), если на 100 рублей надо купить 100 голов скота.</p>\n\n<p>Будем перебирать все возможные значения для быков, коров и телят. И проверять условия.</p>\n\n<p>&nbsp;Итак, сколько мы можем купить быков, если у нас всего 100 руб? Получается, что быков у нас минимум может быть 0, а максимум 10. То есть количество быков от лежит в диапазоне [0;10]. Для перебора быков будем использовать переменную <strong>b.</strong></p>\n\n<p>Разберёмся с коровами. Минимум коров - 0. Максимум на 100 рублей можем купить 20 коров. Для перебора коров будем использовать переменную <strong>k.</strong></p>\n\n<p>Теперь телята. Минимальное количество телят - 0. Максимальное значение телят, купленное на 100 рублей - 200. Но по условию задачи, нам надо купить 100 голов скота. Поэтому максимальное значение телят - 100. Переменная - <strong>t.</strong></p>\n\n<p>У нас 2 условия. Нам надо купить 100 голов скота. Значит должно быть выполнено условие <strong>b+k+t == 100</strong>.&nbsp;<br>\nВторое условие - мы можем потратить только 100 руб. Умножаем количество на стоимость животных и проверяем, чтобы стоимость была равна 100, получаем условие вида: <strong>b*10 + k*5&nbsp;+ t*0.5 == 100</strong>.</p>\n\n<p>Пишем код программы:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> b <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">11</span>):\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">21</span>):\n&nbsp; &nbsp;     <span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">101</span>):\n&nbsp; &nbsp; &nbsp; &nbsp;     <span class=\"hljs-keyword\">if</span>&nbsp; b+k+t==<span class=\"hljs-number\">100</span> <span class=\"hljs-keyword\">and</span>&nbsp;b*<span class=\"hljs-number\">10</span> + k*<span class=\"hljs-number\">5</span>&nbsp;+ t*<span class=\"hljs-number\">0.5</span> == <span class=\"hljs-number\">100</span>:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     <span class=\"hljs-keyword\">print</span> (b, k, t)</codes></pre>\n\n<p>Эта программа перебирает все возможные значения быков, коров и телят и подставляет в условия. Как только оба условия будут истинны, происходит печать ответа.</p></span></div>\n      </div>\n</div>\n</div>', 1671032807130),
(28, 'Решаем математические ребусы методом перебора', '<div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember3154\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember3155\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Решаем математические ребусы методом перебора</strong></p>\n\n<p>Дан ребус&nbsp;<strong>ДА + ДА = НЕТ.&nbsp;</strong>Необходимо заменить буквы цифрами так, чтобы получилось верное равенство. Разным буквам соответствуют разные цифры. Число не может начинаться с нуля. Надо&nbsp;написать программу, которая находит все решения (если есть несколько).</p>\n\n<p>Проанализируем ситуацию:<br>\nБуква <strong>Д</strong> может принимать значения от 2&nbsp;до 9, выберем для неё переменную <strong>d.</strong><br>\nБуква <strong>A</strong>&nbsp;может принимать значения от 0 до 9, выберем для неё переменную <strong>a.</strong><br>\nБуква <strong>E</strong>&nbsp;может принимать значения от 0 до 9, выберем для неё переменную <strong>e.</strong><br>\nБуква <strong>T</strong>&nbsp;может принимать значения от 0 до 9, выберем для неё переменную <strong>t.</strong><br>\nБуква <strong>H</strong>&nbsp;может принимать значение только 1, так как это число сотен, полученное в результате сложения двузначных чисел. Чтобы в этом убедиться посмотрите, что будет в результате сложения двух самых больших</p>\n\n<p>Цифры для первых четырёх букв будем подбирать с помощью вложенных циклов. При этом нам надо, чтобы сработало условие&nbsp;<strong>ДА + ДА = НЕТ.&nbsp;</strong></p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> d <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>):\n   <span class=\"hljs-keyword\">for</span> a <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):\n&nbsp; &nbsp;   <span class=\"hljs-keyword\">for</span> e <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):\n&nbsp; &nbsp; &nbsp;    <span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   <span class=\"hljs-keyword\">if</span>&nbsp; a!=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> e!=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span>&nbsp; t!=<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span>&nbsp; d!=a <span class=\"hljs-keyword\">and</span> d!=e <span class=\"hljs-keyword\">and</span>&nbsp; d!=t <span class=\"hljs-keyword\">and</span> a!=e <span class=\"hljs-keyword\">and</span> a!=t <span class=\"hljs-keyword\">and</span> e!=t:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;    <span class=\"hljs-keyword\">if</span> (d*<span class=\"hljs-number\">10</span>+a) + (d*<span class=\"hljs-number\">10</span>+a) == <span class=\"hljs-number\">100</span>+e*<span class=\"hljs-number\">10</span>+t:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   <span class=\"hljs-keyword\">print</span> (d*<span class=\"hljs-number\">10</span>+a,<span class=\"hljs-string\">\'+\'</span>,d*<span class=\"hljs-number\">10</span>+a,<span class=\"hljs-string\">\'=\'</span>,<span class=\"hljs-number\">100</span>+e*<span class=\"hljs-number\">10</span>+t, sep=<span class=\"hljs-string\">\"\"</span>)</codes></pre>\n\n<p>Все возможные числовые значения решения ребуса&nbsp;<strong>ДА + ДА = НЕТ</strong>, полученные в результате работы программы<br>\n52+52=104<br>\n53+53=106<br>\n54+54=108<br>\n64+64=128<br>\n65+65=130<br>\n67+67=134<br>\n69+69=138<br>\n73+73=146<br>\n76+76=152<br>\n78+78=156<br>\n79+79=158<br>\n82+82=164<br>\n85+85=170<br>\n86+86=172<br>\n92+92=184<br>\n93+93=186</p></span></div>\n      </div>\n</div>\n</div>\n</div>', 1671032853889),
(29, 'Списки, массивы', '<div id=\"ember3980\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember3981\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Списки, массивы</strong></p>\n\n<p>До сих пор мы использовали отдельно взятые переменные строкового или числового типа и нам их пока хватало для решения задач. Но если взглянуть шире на то, с какими данными приходится иметь дело в жизни, то можно заметить, что люди часто имеют дело с большими наборами данных.</p>\n\n<p>Например, мы хотим записывать день за днём температуру воздуха в июне месяце в течение 30 дней, для того, чтобы получить потом статистическую информацию: максимальную и минимальную&nbsp;температуру в июне, а также среднюю температуру этого месяца. При этом получится&nbsp;достаточно большой&nbsp; набор данных. И хранить их в 30 различных переменных очень накладно! Только представьте:</p>\n\n<pre><codes class=\"language-python hljs\">t1 = <span class=\"hljs-number\">20</span>\nt2 = <span class=\"hljs-number\">21</span>\nt3 = <span class=\"hljs-number\">19</span>\n......\nt30 = <span class=\"hljs-number\">28</span></codes></pre>\n\n<p>При обработке этих переменных будет получаться огромный, неудобный код!<br>\n<br>\nВыход для таких ситуаций конечно придуман. Такие данные хранят в виде массивов. Простое определение массива звучит так:<em><strong>&nbsp;<br>\nМассив - это упорядоченный набор однотипных данных.&nbsp;</strong></em>Массиву присваивается имя, с помощью которого можно ссылаться как на массив данных в целом, так и на любой его элемент.<em><strong>&nbsp;</strong></em>Обращаем внимание на 2 момента:<br>\n1) Упорядоченный набор<br>\n2) Данные однотипные</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-comment\"># Пример хранения дневных температур за июнь месяц за 10 дней</span>\n\nTemp = [<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">25</span>]\n<span class=\"hljs-comment\"># Индексы 0  1   2   3   4   5   6   7   8   9</span>\n\n<span class=\"hljs-comment\"># В языке Python также используется отрицательная индексация, как в строках</span>\n       <span class=\"hljs-number\">-10</span>  <span class=\"hljs-number\">-9</span>  <span class=\"hljs-number\">-8</span>  <span class=\"hljs-number\">-7</span>  <span class=\"hljs-number\">-6</span>  <span class=\"hljs-number\">-5</span>  <span class=\"hljs-number\">-4</span>  <span class=\"hljs-number\">-3</span>  <span class=\"hljs-number\">-2</span>  <span class=\"hljs-number\">-1</span>\nTemp = [<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">25</span>]\n\n\n</codes></pre>\n\n<p>Фраза <em>упорядоченный набор</em>&nbsp;означает, что каждый элемент стоит на своём месте и он будет иметь <em><strong>индекс</strong></em>, точно также, как имел индекс каждый элемент строкового типа.&nbsp;</p>\n\n<p>Разберёмся, что значит&nbsp;о<em>днотипные данные. </em>Обычно в условиях задач и соответственно в жизни, приходится иметь дело с набором данных одного типа, например, с целочисленными данными или со строковыми данными.</p>\n\n<p>Однако в языке Python можно создать набор, который позволит хранить разные типы данных и такой набор называется <em><strong>списком - </strong></em>служебное слово<em><strong> list. </strong></em>Но<em><strong>&nbsp;</strong></em>в учебных задачах мы будем в основном обрабатывать однотипные данные. То есть структуру <em><strong>list </strong></em>мы будем использовать в режиме <em><strong>массива.&nbsp;</strong></em>&nbsp;</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-comment\"># В Python нет массива в чистом виде. В этом языке можно использовать разные типы данных в наборе.</span>\n<span class=\"hljs-comment\"># Такая структура данных называется - list:</span>\nA = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">1.3</span> ]\n\n<span class=\"hljs-comment\"># Но в учебных задачах вы будете обрабатывать однотипные данные, поэтому в условии задачи </span>\n<span class=\"hljs-comment\"># будет звучать слово массив:</span>\nA = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]       <span class=\"hljs-comment\"># целочисленный массив</span>\nB = [<span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-string\">\"ca\"</span>, <span class=\"hljs-string\">\"da\"</span>, <span class=\"hljs-string\">\"ka\"</span>] <span class=\"hljs-comment\"># массив строк</span>\nС = [<span class=\"hljs-number\">2.4</span>, <span class=\"hljs-number\">3.5</span>, <span class=\"hljs-number\">7.8</span>, <span class=\"hljs-number\">8.9</span>]     <span class=\"hljs-comment\"># массив действительных чисел</span></codes></pre>\n\n<p style=\"text-align: center;\"><strong>Создание массива (списка)</strong></p>\n\n<p>Научимся создавать массив в тексте программы,&nbsp;&nbsp;выводить его целиком&nbsp;и отдельные элементы.&nbsp;</p>\n\n<p>1) Массив можно создать в тексте программы.&nbsp;Для этого сами придумываем ему имя и записываем внутри квадратных скобок через запятую элементы массива:&nbsp;</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]       <span class=\"hljs-comment\"># целочисленный массив</span>\nB = [<span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-string\">\"ca\"</span>, <span class=\"hljs-string\">\"da\"</span>, <span class=\"hljs-string\">\"ka\"</span>] <span class=\"hljs-comment\"># массив строк</span>\nС = [<span class=\"hljs-number\">2.4</span>, <span class=\"hljs-number\">3.5</span>, <span class=\"hljs-number\">7.8</span>, <span class=\"hljs-number\">8.9</span>]     <span class=\"hljs-comment\"># массив действительных чисел</span></codes></pre>\n\n<p>2) Можно создать массив, состоящий из одинаковых элементов. Часто в начале программы нужен массив, состоящий только из одних нулей:</p>\n\n<pre><codes class=\"language-python hljs\">F = [<span class=\"hljs-number\">0</span>]* <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\"># создание массива, котроый содержит 10 нулей</span></codes></pre>\n\n<p>3) Можно создать пустой массив, подобно тому, как мы создавали пустую строку:</p>\n\n<pre><codes class=\"language-python hljs\">H = [] <span class=\"hljs-comment\"># этот массив пока пустой, но в него можно добавлять элементы</span></codes></pre>\n\n<p>4) Создать новый массив можно \"склеиванием\" имеющихся. Опять же полная аналогия работы со строками:</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\nB = [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]\nC = A + B</codes></pre>\n\n<p><em>Вывод элементов массива и самого массива:</em></p>\n\n<p>1) Для того, чтобы обратиться к элементу массива, надо указать имя массива и в квадратных скобках индекс элемента:</p>\n\n<pre><codes class=\"language-python hljs\">B = [<span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-string\">\"ca\"</span>, <span class=\"hljs-string\">\"da\"</span>, <span class=\"hljs-string\">\"ka\"</span>]\nprint(B[<span class=\"hljs-number\">0</span>])   <span class=\"hljs-comment\"># помним, что индексация начинается с 0</span>\nprint(B[<span class=\"hljs-number\">-1</span>])  <span class=\"hljs-comment\"># в Python есть отрицательные индексы, так легко обратиться к последнему элементу</span></codes></pre>\n\n<p>2) Для того, чтобы напечатать массив, можно написать просто print(B):</p>\n\n<pre><codes class=\"language-python hljs\">B = [<span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-string\">\"ca\"</span>, <span class=\"hljs-string\">\"da\"</span>, <span class=\"hljs-string\">\"ka\"</span>]\n<span class=\"hljs-keyword\">print</span> (B)  <span class=\"hljs-comment\"># такой вывод печатает скобки и запятые: [\'ba\', \'ca\', \'da\', \'ka\']</span>\n</codes></pre>\n\n<p>Такой вывод массива будете использовать для себя, во время тестирования и отладки программы. Так как в тестирующую систему надо отправлять результат работы без лишних знаков.</p>\n\n<p>3) Можно вывести массив без скобок, используя звёздочку перед названием массива. Но этот способ самый медленный. Использовать только в тех случаях, когда массивы небольшого размера и в&nbsp; процессе тестирования и отладки программы:</p>\n\n<pre><codes class=\"language-python hljs\">B = [<span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-string\">\"ca\"</span>, <span class=\"hljs-string\">\"da\"</span>, <span class=\"hljs-string\">\"ka\"</span>]\n<span class=\"hljs-keyword\">print</span> (*B)  <span class=\"hljs-comment\"># это самый МЕДЛЕННЫЙ вывод массива</span>\n</codes></pre>\n\n<p><strong>Решите несколько простых задач, прежде чем двигаться дальше --&gt;&gt;</strong></p></span></div>\n      </div>\n</div>\n</div>', 1671032924570),
(30, 'Чтение массива с клавиатуры', '<div class=\"step-dynamic-container\">\n<!---->\n      <div id=\"ember4072\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember4073\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Чтение массива с клавиатуры</strong></p>\n\n<p>Чаще всего массив будет подаваться на вход программы&nbsp;в виде набора данных. Их надо уметь&nbsp;считывать.<br>\nИмеется два варианта, как могут поступать&nbsp;данные на вход&nbsp; - одной строкой или по одному данному в столбец. Разберёмся по порядку.</p>\n\n<p><em><strong>Данные массива подаются одной строкой через пробел:</strong></em></p>\n\n<p>Надо вспомнить, как мы считывали несколько данных, которые подаются одной строкой через пробел:</p>\n\n<pre><codes class=\"language-python hljs\">m, n = map(int, input().split()) <span class=\"hljs-comment\"># так считывают два целых числа, которые записаны в одной строке</span></codes></pre>\n\n<p>Теперь у нас будет больше данных в наборе. Слева мы напишем только одну переменную - имя массива, а справа обернём все эти функции ещё одной функцией - <strong>list. </strong>Это служебное слово из всех считанных данных организует нам список (мы его используем в режиме массива):</p>\n\n<pre><codes class=\"language-python hljs\">A = list(map(int, input().split()))    <span class=\"hljs-comment\"># так записываем целые числа в массив А</span>\nB = list(map(float, input().split()))  <span class=\"hljs-comment\"># так записываем действительные числа в массив B</span>\nC = list(input().split())              <span class=\"hljs-comment\"># так получим массив строк</span>\nD = input().split() <span class=\"hljs-comment\"># так умный Python тоже создаст массив строк, даже без list! </span>\n                    <span class=\"hljs-comment\"># считанная строка разобъётся по пробелам и запишется в массив D.</span></codes></pre>\n\n<p><em><strong>Данные массива подаются по одному числу в строке, то есть в столбец:</strong></em></p>\n\n<p>В таком случае, когда данные подаются по одному в столбце, сначала, как правило, подают первое число - количество чисел, а потом сами числа.&nbsp;</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-number\">5</span>    - количество чисел в наборе, обычно обозначают n\n<span class=\"hljs-number\">2.4</span>  - далее сами числа в количестве n\n<span class=\"hljs-number\">2.7</span>\n<span class=\"hljs-number\">4.2</span>\n<span class=\"hljs-number\">1.3</span>\n<span class=\"hljs-number\">4.6</span>\n\n</codes></pre>\n\n<p><em>Алгоритм чтения данных №1:</em><br>\n1) Считываем количество чисел в переменную n<br>\n2) Заводим пустой массив <strong>A = [ ]</strong><br>\n3) Запускаем цикл на n повторений. Делаем n раз следующее: 1. Читаем элемент 2. Записываем его в конец массива.&nbsp;<br>\nКоманда, которая дописывает элемент <strong>x</strong> в конец&nbsp;массива выглядит так: <strong>A.append(x):</strong></p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())     <span class=\"hljs-comment\"># читаем количество элементов в будущем массиве</span>\nA = []               <span class=\"hljs-comment\"># создали пустой массив (список)</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):   <span class=\"hljs-comment\"># цикл на n повторений</span>\n      x = float(input()) <span class=\"hljs-comment\"># прочитали число действительного типа </span>\n&nbsp; &nbsp; &nbsp; A.append(x)        <span class=\"hljs-comment\"># добавили число в конец массива (спискa)</span></codes></pre>\n\n<p>В этот момент надо осознать, что списки в&nbsp;языке Python - <em><strong>динамическая</strong></em> структура. Мы можем добавлять в массив элементы в любом количестве.&nbsp;&nbsp;Логично, что есть команды, которые позволяют убирать элементы из массива, хотя мы про них пока не знаем. Но интуиция должна подсказывать, что такие команды - есть))</p>\n\n<p>Язык Python, подобно русскому языку, очень богат и многообразен! <em>Есть ещё несколько способов чтения и генерации </em>массивов. Но пока остановимся ещё на одном способе чтения. И если вы - новичок, то пока пользуйтесь этими способами. Потом будете двигаться дальше.</p>\n\n<p><em>Алгоритм чтения данных №2:</em><br>\n1) Считываем количество чисел в переменную n<br>\n2) Заводим массив, состоящий из n нулей&nbsp;<strong>A = [0] *n</strong><br>\n3) Запускаем цикл на n повторений. Делаем n раз следующее: 1. Читаем элемент 2. Записываем его в массив по своему адресу с помощью&nbsp;команды&nbsp;A[ i ] = x.</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())     <span class=\"hljs-comment\"># читаем количество элементов в будущем массиве</span>\nA = [<span class=\"hljs-number\">0</span>]*n            <span class=\"hljs-comment\"># создали массив (список), состоящий из n нулей</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):   <span class=\"hljs-comment\"># цикл на n повторений</span>\n      x = float(input()) <span class=\"hljs-comment\"># прочитали число действительного типа </span>\n&nbsp; &nbsp; &nbsp; A[i] = x       <span class=\"hljs-comment\"># изменили нулевое значение массива на считанное</span></codes></pre>\n\n<p style=\"text-align: center;\"><strong>Вывод массива</strong></p>\n\n<p>Мы уже разобрали два вида вывода массива. Но эти выводы не самые хорошие! Разберём универсальные выводы массивов. Массив надо уметь выводить в строку через пробел и в столбец. Пусть у нас есть какой-то массив в программе, будем его выводить:</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"d\"</span>, <span class=\"hljs-string\">\"e\"</span>]\nn = len(A)                    <span class=\"hljs-comment\"># вычисляет длину массива (количество элементов)</span>\n                              <span class=\"hljs-comment\"># точно также, как длина строки!</span></codes></pre>\n\n<p>1) Вывод элементов массива одной строкой через пробел. В этом случае мы перебираем&nbsp;элементы массива с помощью индексов:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (n):            <span class=\"hljs-comment\"># перебираем индексы массива</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> (A[i], end = <span class=\"hljs-string\">\" \"</span>)  <span class=\"hljs-comment\"># берём по очереди из массива A[0], A[1] и т.д и печатаем их</span>\n                               <span class=\"hljs-comment\"># после напечатанного элемента ставим пробел</span></codes></pre>\n\n<p>2) Вывод элементов массива одной строкой через пробел. Перебираем напрямую элементы массива, не затрагивая индексы. Точно такой же приём работает для перебора элементов строки:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> A:                 <span class=\"hljs-comment\"># переменной elem присваиваются по очереди элементы массива</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> (elem, end = <span class=\"hljs-string\">\" \"</span>)  <span class=\"hljs-comment\"># печатаем элемент за элементом, </span>\n                               <span class=\"hljs-comment\"># после каждого элемента ставим пробел, с помощью параметра end=\" \"</span></codes></pre>\n\n<p>3)&nbsp;Вывод элементов массива по одному в столбик. Делаем всё тоже самое, только убираем из print параметр end. И теперь print будет действовать по умолчанию -&nbsp; после печати переводить курсор&nbsp;на новую строку:</p>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-comment\"># Печать элементов массива в столбец. К элементам обращаемся по индексу</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range (n):\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> (A[i])</codes></pre>\n\n<pre><codes class=\"language-python hljs\"><span class=\"hljs-comment\"># Печать элементов массива в столбец, перебираем сами элементы. Индексы не участвуют</span>\n<span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> A:\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> (elem)</codes></pre></span></div>\n      </div>\n</div>\n</div>\n</div>', 1671032959227),
(31, 'Обработка списков, линейный поиск', '<div id=\"ember4202\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember4203\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Обработка списков, линейный поиск</strong></p>\n\n<p>На этом уроке будем решать задачи на обработку массивов. Для простоты списки будут подаваться одной строкой через пробел. В каждой задаче надо будет что-либо найти в массиве (сумму, количество, произведение или просто какие-то элементы). Для того, чтобы осуществить поиск среди элементов, необходимо будет запустить цикл и просматривать элемент за элементом.&nbsp;<br>\n<br>\nРассмотрим несколько примеров.</p>\n\n<p><strong>Задача №1.&nbsp;</strong>Дан массив, состоящий из целых чисел. Напишите программу, которая выводит те элементы массива, которые являются чётными числами. Первой строкой подаётся количество элементов в массиве. Второй строкой элементы массива.&nbsp;</p>\n\n<p><strong><em>Алгоритм решения задачи:</em><br>\n1)&nbsp;</strong>Считываем количество элементов, затем сам массив.<br>\n2) Просматриваем элементы массива с помощью цикла и проверяем их на чётность. Если элемент чётный, то мы его печатаем.</p>\n\n<p><br>\n<strong>1 способ (</strong><em>к элементам массива обращаемся по индексу</em><strong>):</strong></p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())                    <span class=\"hljs-comment\"># считываем количество элементов</span>\nA = list(map(int, input().split())) <span class=\"hljs-comment\"># считываем целочисленный массив</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):   <span class=\"hljs-comment\"># запускаем цикл, чтобы посмотреть все элементы массива               </span>\n    <span class=\"hljs-keyword\">if</span> A[i]%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># проверяем, является ли элемент чётным</span>\n        print(A[i])  <span class=\"hljs-comment\"># если элемент чётный, то печатаем; элементы печатаются в столбик</span>\n</codes></pre>\n\n<p><strong>2 способ (</strong><em>перебираем элементы массива, не затрагивая индекс</em><strong>):</strong></p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())                    <span class=\"hljs-comment\"># считываем количество элементов</span>\nA = list(map(int, input().split())) <span class=\"hljs-comment\"># считываем целочисленный массив</span>\n\n<span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> A:       <span class=\"hljs-comment\"># запускаем цикл, чтобы посмотреть все элементы массива               </span>\n    <span class=\"hljs-keyword\">if</span> elem%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># проверяем, является ли элемент чётным</span>\n        print(elem)  <span class=\"hljs-comment\"># если элемент чётный, то печатаем; элементы печатаются в столбик</span>\n</codes></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Задача №2.&nbsp;</strong>В вещественном массиве задан вес спортсменок одной команды (в килограммах с округлением до десятых). Напишите программу подсчёта количества спортсменок, чей вес превышает 50 кг, но не более 57 кг. Если таких спортсменок нет, выведите <strong>-1</strong>.&nbsp;Первой строкой подаётся количество спортсменок. Второй строкой - вес спортсменок.&nbsp;</p>\n\n<p>На что обратить внимание в этой задаче:<br>\n1) Тип элементов - действительные числа. Внимательно надо считать элементы массива!<br>\n2) Вес больше 50, но не более 57. Последняя фраза означает, что вес менее или равен 57. Не забываем про знак&nbsp;&nbsp;равенства.<br>\n3) Если нужных спортсменок нет, то надо вывести <strong>-1.</strong>&nbsp;Для того, чтобы определится, есть ли нужный вес или нет, поможет счётчик.</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())                        <span class=\"hljs-comment\"># считали количество спортсменов</span>\na = list(map(float, input().split()))   <span class=\"hljs-comment\"># считали вес в массив, тип данных - float</span>\n\nk = <span class=\"hljs-number\">0</span>                                   <span class=\"hljs-comment\"># инициализировали счётчик</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):                      <span class=\"hljs-comment\"># просматриваем элемнты массива</span>\n    <span class=\"hljs-keyword\">if</span> a[i]&gt;<span class=\"hljs-number\">50</span> <span class=\"hljs-keyword\">and</span> a[i]&lt;=<span class=\"hljs-number\">57</span>:            <span class=\"hljs-comment\"># если нужный вес найден, то счётчик увеличивается на 1</span>\n        k += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">if</span> k &gt; <span class=\"hljs-number\">0</span>:                               <span class=\"hljs-comment\"># если было что-то найдено,то</span>\n    print(k)                            <span class=\"hljs-comment\"># печатаем найденое количество</span>\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-number\">-1</span>)                           <span class=\"hljs-comment\"># иначе - печатаем -1</span></codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671033053554),
(32, 'Задачи на поиск, в которых надо дать ответ YES или NO', '<div id=\"ember4362\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember4363\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задачи на поиск, в которых надо дать ответ YES или NO</strong></p>\n\n<p>Массивы (списки) нужны для <em><strong>удобства хранения и обработки информации</strong></em>. Особенно часто в массивах приходится что-то искать. Мы уже рассмотрели в предыдущем уроке задачи на поиск количества, суммы и т.д. На этом уроке тоже рассмотрим задачи на поиск информации, но с такими формулировками:<br>\n1) Определите, встречается ли тот или иной элемент в массиве. В качестве ответа напишите YES или NO.<br>\n2) Если в массиве встречается элемент с заданными свойствами, то выведите индекс первого такого элемента или сам элемент.</p>\n\n<p><strong>Задача №1.</strong> Самый простой вид поиска, когда требуется найти конкретный элемент. Например, есть массив данных с фамилиями участников мероприятия. Надо дать ответ на вопрос, есть ли среди них Иванов или нет. Для проверки вхождения элемента в массив используется операция <strong>in.</strong> Код такой программы:</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-string\">\'Архипов\'</span>, <span class=\"hljs-string\">\'Баранов\'</span>, <span class=\"hljs-string\">\'Иванов\'</span>,<span class=\"hljs-string\">\'Петров\'</span>,<span class=\"hljs-string\">\'Сидоров\'</span>]\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\'Иванов\'</span> <span class=\"hljs-keyword\">in</span> A:\n    print(<span class=\"hljs-string\">\'YES\'</span>)\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\'NO\'</span>)</codes></pre>\n\n<blockquote>\n<p><span style=\"color: #0000cc;\">В Python существует всего 2 оператора принадлежности —&nbsp;<strong>in и not in</strong>&nbsp; и предназначены они для проверки наличия элемента в строке (str), списке (list), словаре (dict) или кортеже (tuple).</span></p>\n</blockquote>\n\n<p><strong>Задача №2.&nbsp;</strong>Дан массив со среднесуточными температурами осеннего месяца. Надо определить, были ли в этом месяце отрицательные температуры или нет.&nbsp;</p>\n\n<p>Особенности задач такого типа:</p>\n\n<ul>\n	<li>Надо искать не конкретное значение, а элемент массива, который соответствует тому или иному условию.&nbsp;</li>\n	<li>Как только найдено первое подходящее значение, то поиск можно останавливать. Элемент найден, ответ - YES. При этом цикл <strong>for </strong>останавливаем командой <strong>break</strong>.</li>\n	<li>Если в массиве нет нужного элемента, то надо будет просмотреть все элементы. И только потом сделать вывод, что нужного элемента не было.</li>\n	<li>Для того, чтобы эффективно запрограммировать последние 2 пункта, стоит использовать флаг.&nbsp;</li>\n</ul>\n\n<p><strong>Способ решения №1</strong>, с использованием цикла for</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5.1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>]\n\nf = <span class=\"hljs-string\">\"NO\"</span>          <span class=\"hljs-comment\"># подняли флаг, предполагаем, что нет отрицательных среднесуточных температур</span>\n<span class=\"hljs-keyword\">for</span> temp <span class=\"hljs-keyword\">in</span> A:    <span class=\"hljs-comment\"># перебираем элементы массива</span>\n    <span class=\"hljs-keyword\">if</span> temp &lt; <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># если нашли элемент, который маньше нуля</span>\n        f = <span class=\"hljs-string\">\"YES\"</span> <span class=\"hljs-comment\"># меняем значение флага на YES</span>\n        <span class=\"hljs-keyword\">break</span>     <span class=\"hljs-comment\"># останавливаем цикл, дальше искать нет смысла</span>\n\nprint(f)          <span class=\"hljs-comment\"># печатаем ответ</span></codes></pre>\n\n<p><strong>Способ решения №2,</strong>&nbsp;с использованием цикла while</p>\n\n<p>Рассмотрим решение задачи на поиск отрицательного элемента с использованием цикла while. Этот цикл имеет свои особенности в сравнении с циклом <strong>for:</strong></p>\n\n<ul>\n	<li>До цикла надо задать первый индекс элемента i=0. Так как цикл while для продолжения работы проверяет условие и не перебирает индексы, как цикл <strong>for.</strong></li>\n	<li>Для цикла while надо верно написать условие его работы. В нашем случае, цикл продолжает проверять элементы до тех пор, пока индекс элемента \"реальный\" (пока не вышли за пределы массива) и пока элемент массива больше или равен нулю. Если эти два условия выполняются, то мы продолжаем поиск.</li>\n	<li>Внутри цикла индекс увеличиваем на единицу, чтобы на следующей итерации, было проверено условие для следующего элемента массива.</li>\n	<li>После окончания работы цикла, остаётся открытым вопрос, по какой причине он был остановлен? Либо встретился отрицательный элемент, либо все элементы были перебраны. Для ответа на этот вопрос, надо посмотреть чему равен i. Если индекс \"реальный\", то значит выход из массива был по причине того, что встретился отрицательный элемент.<br>\n	&nbsp;</li>\n</ul>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5.1</span>, <span class=\"hljs-number\">5</span>]\n\nf = <span class=\"hljs-string\">\"NO\"</span>              <span class=\"hljs-comment\"># подняли флаг, предполагаем, что нет отрицательных среднесуточных температур</span>\n\ni = <span class=\"hljs-number\">0</span>                         <span class=\"hljs-comment\"># задали первый индекс для элемента массива i=0</span>\n<span class=\"hljs-keyword\">while</span> i&lt;len(A) <span class=\"hljs-keyword\">and</span> A[i]&gt;=<span class=\"hljs-number\">0</span>:   <span class=\"hljs-comment\"># пока элемент массива больше нуля и пока не вышли за пределы массива</span>\n    i += <span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\"># увеличиваем индекс на единицу, чтобы на следующей итерации </span>\n                              <span class=\"hljs-comment\"># смотреть следующий элемент массива</span>\n\n<span class=\"hljs-keyword\">if</span> i &lt; len(A):                <span class=\"hljs-comment\"># если индекс \"реальный\", значит вышли из цикла, встретив A[i]&lt;0</span>\n    f = <span class=\"hljs-string\">\"YES\"</span>                 <span class=\"hljs-comment\"># в таком случае меняем флаг на \"YES\"</span>\n\nprint(f)                      <span class=\"hljs-comment\"># печатаем ответ   </span></codes></pre>\n\n<p><strong>Способ решения №3</strong>, с использованием цикла while c постусловием</p>\n\n<p>Иногда используют цикл while, как цикл с постусловием. Для этого запускается бесконечный цикл:&nbsp; while True. Внутри цикла проверяются нужные условия. Если эти условия выполняются, то цикл прерывается командой break.</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5.1</span>, <span class=\"hljs-number\">-5</span>]\n\nf = <span class=\"hljs-string\">\"NO\"</span>            <span class=\"hljs-comment\"># подняли флаг, предполагаем, что нет отрицательных среднесуточных температур</span>\n\ni = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\"># задали первый индекс для элемента массива i=0</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">True</span>:         <span class=\"hljs-comment\"># запустили бесконечный цикл</span>\n    <span class=\"hljs-keyword\">if</span> i == len(A): <span class=\"hljs-comment\"># если вышли за пределы массива, то останавливаем поиск</span>\n        <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">elif</span> A[i]&lt;<span class=\"hljs-number\">0</span>:    <span class=\"hljs-comment\"># если очередной элемент меньше 0, то останавливаем поиск</span>\n        f = <span class=\"hljs-string\">\"YES\"</span>\n        <span class=\"hljs-keyword\">break</span>\n    i += <span class=\"hljs-number\">1</span>          <span class=\"hljs-comment\"># берём следующий индекс. Не забываем это делать, иначе цикл зациклится!</span>\n\nprint(f)            <span class=\"hljs-comment\"># печатаем ответ   </span></codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671033107286);
INSERT INTO `teory` (`id`, `name`, `description`, `time`) VALUES
(33, 'Задачи на вывод индекса первого элемента с нужными свойствами', '<div id=\"ember4416\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember4417\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Задачи на вывод индекса первого элемента с нужными свойствами</strong></p>\n\n<p>В начале урока (шаг №1), при разборе задач, в которых надо дать ответ YES или NO, был упомянут ещё один тип задач: \"Если в массиве встречается элемент с заданными свойствами, то выведите индекс первого такого элемента или выведите NO\".&nbsp;</p>\n\n<p>Для поиска индекса первого вхождения элемента, в языке Python, имеется<strong> метод index().</strong> Но его можно применять только в том случае, если вы уверены, что искомый элемент присутствует в массиве, иначе функция сгенерирует исключение ValueError.</p>\n\n<p><strong>Пример №1</strong>&nbsp;</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">21</span>]\n\nind = A.index(<span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># метод индекс вернёт индекс первого вхождения элемента 2 в массив A</span>\n\nprint(ind)        <span class=\"hljs-comment\"># программа напечатает индекс 3</span></codes></pre>\n\n<p><strong>Пример №2</strong></p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">21</span>]\n\nind = A.index(<span class=\"hljs-number\">22</span>)  <span class=\"hljs-comment\"># метод индекс сгенерирует исключение ValueError: 22 is not in list</span>\n\nprint(ind)         <span class=\"hljs-comment\"># в результате работы программы увидим ValueError: 22 is not in list</span></codes></pre>\n\n<p><strong>Пример №3.&nbsp;</strong>Если заранее не известно, есть ли нужный элемент в массиве или нет, то надо проверить его наличие.</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">21</span>]\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-keyword\">in</span> A:             <span class=\"hljs-comment\"># проверили вхождение элемента в массив</span>\n    print(A.index(<span class=\"hljs-number\">22</span>))  <span class=\"hljs-comment\"># если элемент присутствует, то применяем метод index()</span>\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"NO\"</span>)         <span class=\"hljs-comment\"># если элемент отсутствует, то печатаем соответствующее сообщение</span></codes></pre>\n\n<p><strong>Пример №4.&nbsp;</strong>Можно проверить наличие элемента с помощью метода count().</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">21</span>]\n\n<span class=\"hljs-keyword\">if</span> A.count(<span class=\"hljs-number\">22</span>)!=<span class=\"hljs-number\">0</span>:      <span class=\"hljs-comment\"># проверили вхождение элемента в массив</span>\n    print(A.index(<span class=\"hljs-number\">22</span>))  <span class=\"hljs-comment\"># если элемент присутствует, то применяем метод index()</span>\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"NO\"</span>)         <span class=\"hljs-comment\"># если элемент отсутствует, то печатаем соответствующее сообщение</span></codes></pre>\n\n<p><strong>Пример №5.&nbsp;</strong>У метода index() есть необязательные параметры. Можно настроить срез для поиска.&nbsp;</p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">21</span>]\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-keyword\">in</span> A:                <span class=\"hljs-comment\"># проверили вхождение элемента в массив</span>\n    print(A.index(<span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">3</span>))  <span class=\"hljs-comment\"># применяем метод index() со срезом: ищем с 3 индекса и до конца массива</span>\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-string\">\"NO\"</span>)            <span class=\"hljs-comment\"># если элемент отсутствует, то печатаем соответствующее сообщение</span>\n          \n<span class=\"hljs-comment\"># для данного примера будет напечатан индекс 4</span></codes></pre>\n\n<p>Если в массиве надо искать элемент по каким-то заданным свойствам, то метод index() не подойдёт. Надо будет запускать цикл и проверять условия поиска с помощью условного оператора.</p>\n\n<p><strong>Задача №1.</strong>&nbsp;Дан массив строк, в котором содержатся предлоги. Определите, есть ли в массиве хотя бы один предлог, состоящий из 5 символов и выведите индекс первого такого предлога. Если таких предлогов нет, напечатайте <strong>NO.</strong></p>\n\n<pre><codes class=\"language-python hljs\">A = [<span class=\"hljs-string\">\"о\"</span>, <span class=\"hljs-string\">\"об\"</span>, <span class=\"hljs-string\">\"по\"</span>, <span class=\"hljs-string\">\"под\"</span>,<span class=\"hljs-string\">\"от\"</span>, <span class=\"hljs-string\">\"за\"</span>, <span class=\"hljs-string\">\"на\"</span>, <span class=\"hljs-string\">\"над\"</span>, <span class=\"hljs-string\">\"с\"</span>, <span class=\"hljs-string\">\"около\"</span>, <span class=\"hljs-string\">\"к\"</span>, <span class=\"hljs-string\">\"из\"</span>, <span class=\"hljs-string\">\"в\"</span>, <span class=\"hljs-string\">\"без\"</span>]\n\nf = <span class=\"hljs-string\">\"NO\"</span>                <span class=\"hljs-comment\"># предполагаем, что нужных элементов нет</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(A)): <span class=\"hljs-comment\"># запускаем перебор элементов по индексам </span>\n    <span class=\"hljs-keyword\">if</span> len(A[i]) == <span class=\"hljs-number\">5</span>:  <span class=\"hljs-comment\"># если длина очередного элемента = 5</span>\n        f = <span class=\"hljs-string\">\"YES\"</span>       <span class=\"hljs-comment\"># меняем флаг на YES</span>\n        print(i)        <span class=\"hljs-comment\"># печатаем индекс текущего элемента (его длина = 5)</span>\n        <span class=\"hljs-keyword\">break</span>           <span class=\"hljs-comment\"># прекращаем работу цикла, элемент найден</span>\n\n<span class=\"hljs-keyword\">if</span> f == <span class=\"hljs-string\">\"NO\"</span>:           <span class=\"hljs-comment\"># проверяем флаг, если в нём записано NO, то ничего не было найдно</span>\n    <span class=\"hljs-keyword\">print</span> (f)           <span class=\"hljs-comment\"># печатаем NO</span></codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671033143869),
(34, 'Обработка соседних элементов массива', '<div id=\"ember4483\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember4484\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Обработка соседних элементов массива</strong></p>\n\n<p><strong>Рассмотрим задачу.&nbsp;</strong>Дан целочисленный массив из N элементов. Элементы массива могут принимать целые значения<br>\nот −10 000 до 10 000 включительно. Напишите программу, позволяющую найти и вывести количество пар элементов массива, в которых хотя бы одно число делится на 13. В данной задаче под парой подразумевается два подряд идущих элемента массива. Например, для массива из пяти элементов: 13; 7; 26; −1; 9 — ответ: 3. Найденные пары: (13, 7), (7, 26), (26, -1).</p>\n\n<p>В этой задаче надо рассматривать 2 соседних элемента. Вы уже понимаете, для того, чтобы перебрать элементы массива надо запустить цикл. Но, кроме текущего элемента массива A[i], необходимо рассмотреть соседний элемент. Какие для этого есть способы?&nbsp;<br>\n<em><strong>1 вариант</strong></em> - взять A[i] и&nbsp;A[i+1]. Берём текущий элемент и следующий за ним.<br>\n<em><strong>2 вариант</strong></em> - взять A[i-1] и&nbsp;A[i]. Берём текущий элемент и предыдущий.</p>\n\n<p>Начинающие программисты часто пишут такую программу для <strong>1 варианта</strong> (неверный вариант):</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\nA = list(map(int, input().split()))\n\nk = <span class=\"hljs-number\">0</span> \n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):                 <span class=\"hljs-comment\"># при таком переборе элементов массива</span>\n    <span class=\"hljs-keyword\">if</span> A[i]%<span class=\"hljs-number\">13</span>==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> A[i+<span class=\"hljs-number\">1</span>]%<span class=\"hljs-number\">13</span>==<span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\"># получите ошибку IndexError: list index out of range</span>\n        k += <span class=\"hljs-number\">1</span>\n\nprint(k)</codes></pre>\n\n<p>И получают такую ошибку:&nbsp;&nbsp;<strong>IndexError: list index out of range. </strong>Эта ошибка связана с тем, что произошёл выход за пределы массива. Выход происходит тогда, когда цикл берёт индекс последнего элемента а в пару надо взять следующий элемент. Это и есть ошибка: программа должна взять <em><strong>последний элемент и следующий за последним!</strong></em>&nbsp;В этом случае компилятор объясняет, что <em><strong>за последним элементом нет следующего</strong></em>, даже не пытайтесь его искать).</p>\n\n<p>Чтобы не было выхода за пределы массива, надо уменьшить количество циклов на 1. Таким образом мы не будем брать последний элемент, остановимся на предпоследнем. Последняя пара, которая будет рассмотрена - это предпоследний элемент и следующий за ним. Вот так будет выглядеть верный код:<br>\n&nbsp;</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\nA = list(map(int, input().split()))\n\nk = <span class=\"hljs-number\">0</span> \n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n - <span class=\"hljs-number\">1</span>):             <span class=\"hljs-comment\"># количество циклов уменьшили на 1</span>\n    <span class=\"hljs-keyword\">if</span> A[i]%<span class=\"hljs-number\">13</span>==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> A[i+<span class=\"hljs-number\">1</span>]%<span class=\"hljs-number\">13</span>==<span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\"># выполнен верный перебор элементов</span>\n        k += <span class=\"hljs-number\">1</span>\n\nprint(k)</codes></pre>\n\n<p>Рассмотрим программу начинающего программиста для <strong>2 варианта</strong> (неверное решение)</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\nA = list(map(int, input().split()))\n\nk = <span class=\"hljs-number\">0</span> \n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):                 <span class=\"hljs-comment\"># при таком переборе элементов массива компилятор</span>\n    <span class=\"hljs-keyword\">if</span> A[i<span class=\"hljs-number\">-1</span>]%<span class=\"hljs-number\">13</span>==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> A[i]%<span class=\"hljs-number\">13</span>==<span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\"># не выдаст ошибку, но программа не пройдёт часть тестов!</span>\n        k += <span class=\"hljs-number\">1</span>\n\nprint(k)</codes></pre>\n\n<p>При запуске такой программы, компилятор не выдаст ошибку. Но такая программа будет работать не всегда верно. На части тестов она будет выдавать неверные ответы. Разберёмся, что будет происходить.<br>\nВнутри цикла при i=0 рассматривается пара A[-1]&nbsp; и A[0]. В языке Python существует элемент массива A[-1]&nbsp; (последний элемент). Поэтому выхода за пределы нет. Но сравнение первого элемента с последним может привести к неверному ответу, так как в задаче надо сравнивать двух соседей. Первый с последним сравнивать не требовалось.</p>\n\n<p>Для того, чтобы программа работала во всех случаях верно, нужно уменьшить количество циклов. Для верного перебора, цикл надо запустить с единицы:</p>\n\n<pre><codes class=\"language-python hljs\">n = int(input())\nA = list(map(int, input().split()))\n\nk = <span class=\"hljs-number\">0</span> \n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, n):              <span class=\"hljs-comment\"># корректируем количество циклов, первый цикл будет при i=1</span>\n    <span class=\"hljs-keyword\">if</span> A[i<span class=\"hljs-number\">-1</span>]%<span class=\"hljs-number\">13</span>==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> A[i]%<span class=\"hljs-number\">13</span>==<span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\"># такая программа работает верно и проходит все тесты</span>\n        k += <span class=\"hljs-number\">1</span>\n\nprint(k)</codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671033178000),
(35, 'Генерирование нового массива', '<div id=\"ember4654\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember4655\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Генерирование нового массива</strong></p>\n\n<p>В большинстве задач элементы массива подаются на вход. Но иногда, для решения задачи, надо сгенерировать новый массив из имеющихся данных или из одинаковых элементов. Рассмотрим способы генерирования&nbsp;&nbsp;</p>\n\n<p><strong>Задача №1.&nbsp;</strong>Сгенерируйте массив из <strong>n</strong> нулей и&nbsp;<strong>m </strong>единиц. В массиве сначала должны идти нули, потом единицы.<br>\nЧто знать для решения этой задачи:</p>\n\n<ul>\n	<li>Для того, чтобы создать массив из повторяющихся элементов, можно использовать знак умножения. Например, чтобы создать массив из трёх нулей, можно написать: [0]*3.</li>\n	<li>Для того, чтобы соединить два массива в один, можно использовать знак +.&nbsp;</li>\n</ul>\n\n<p>Все эти операции применялись для обработки строк. В случае со списками эти команды работают полностью аналогично.<br>\n<em><strong>Решение задачи №1</strong></em></p>\n\n<pre><codes class=\"language-python hljs\">n, m = map(int, input().split())\n\nA = [<span class=\"hljs-number\">0</span>]*n + [<span class=\"hljs-number\">1</span>]*m  <span class=\"hljs-comment\"># создаём список из n нулей и m единиц, соединяем в один массив</span>\nprint(A)           <span class=\"hljs-comment\"># печатаем массив с квадратными скобками и запятыми</span></codes></pre>\n\n<p><strong>Задача №2.&nbsp; </strong>Целочисленный массив подаётся одной строкой. Надо создать новый массив, в котором на первом месте будет стоять элемент, равный 0. После элемента 0 должны идти элементы исходного массива.</p>\n\n<pre><codes class=\"language-python hljs\">A = list(map(int, input().split()))\n\nB = [<span class=\"hljs-number\">0</span>] + A   <span class=\"hljs-comment\"># генерируем новый массив из нулевого элемента и имеющегося массива</span>\n             \nprint(B)</codes></pre>\n\n<p><em><strong>Что нужно понимать: </strong></em>операция добавления элемента в начало списка - неэффективна! Подумайте сами, каждый элемент имел определённый индекс. Вы поставили&nbsp; на первую позицию новый элемент. Все остальные элементы должны сдвинуться и получить новый индекс. А если массив содержит 10000 элементов? И хотя, была сделана одна операция - был добавлен один элемент на первое место, реально было выполнено 10000 операций! Все остальные элементы получили новые индексы.</p>\n\n<p>В связи с вышесказанным, запомните, что лучше создавать такие алгоритмы, в которых элементы массива добавляются на последнее место, с помощью метода append(). Эта функция делает ровно одну операцию, так как нет необходимости затрагивать другие элементы массива.</p>\n\n<p><strong>Задача №3.&nbsp; </strong>Подаётся целочисленный массив, затем число n, далее n чисел по одному в строке. Создайте новый массив из исходного дописываем n чисел.</p>\n\n<pre><codes class=\"language-python hljs\">A = list(map(int, input().split()))\n\nB = A.copy()           <span class=\"hljs-comment\"># в массив B записали все элементы массива A, используя метод copy()</span>\nn = int(input())\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):     <span class=\"hljs-comment\"># n раз делаем одно и тоже</span>\n    x = int(input())   <span class=\"hljs-comment\"># считали очередное число</span>\n    B.append(x)        <span class=\"hljs-comment\"># дописали считанное число в конец массива</span>\n\nprint(B) </codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671033218345),
(36, 'Генерирование массива с заданными свойствами', '<div id=\"ember4659\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember4660\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Генерирование массива с заданными свойствами</strong></p>\n\n<p>Прежде чем приступить к решению следующих задач, рассмотрим некоторые примеры.</p>\n\n<p><strong>Задача №1.</strong> Напишите программу, которая считывает целочисленный массив и генерирует из него новый массив, содержащий только чётные элементы исходного массива. Массив необходимо вывести с помощью команды print. Если чётных элементов не оказалось, то ничего выводить не надо.</p>\n\n<pre><codes class=\"language-python hljs\">A = list(map(int, input().split())\n\nB = []                 <span class=\"hljs-comment\"># создаём пустой массив B</span>\n<span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> A:         <span class=\"hljs-comment\"># перебираем элементы исходного массива</span>\n    <span class=\"hljs-keyword\">if</span> elem %<span class=\"hljs-number\">2</span> ==<span class=\"hljs-number\">0</span>:    <span class=\"hljs-comment\"># если элемент исходного массива чётный</span>\n        B.append(elem) <span class=\"hljs-comment\"># добавляем его в конец нового массива B</span>\n\n<span class=\"hljs-keyword\">if</span> len(B) !=<span class=\"hljs-number\">0</span>:         <span class=\"hljs-comment\"># проверяем, есть ли в массиве В элементы</span>\n    print(B)           <span class=\"hljs-comment\"># если элементы есть, то мы печатаем массив</span></codes></pre>\n\n<p><strong>Задача №2.</strong> Напишите программу, которая считывает целочисленный массив и генерирует из него новый массив, содержащий отрицательные числа. Массив необходимо вывести одной строкой через пробел. Если отрицательных элементов не оказалось, то вывести 0.</p>\n\n<pre><codes class=\"language-python hljs\">A = list(map(int, input().split())\n\nB = []                 <span class=\"hljs-comment\"># создаём пустой массив B</span>\n<span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> A:         <span class=\"hljs-comment\"># перебираем элементы исходного массива</span>\n    <span class=\"hljs-keyword\">if</span> elem &lt; <span class=\"hljs-number\">0</span>:       <span class=\"hljs-comment\"># если элемент исходного массива отрицательный</span>\n        B.append(elem) <span class=\"hljs-comment\"># добавляем его в конец нового массива B</span>\n\n<span class=\"hljs-keyword\">if</span> B:                          <span class=\"hljs-comment\"># провку наличия элементов в массиве можно выполнить таким образом</span>\n    <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> B:             <span class=\"hljs-comment\"># перебираем элементы массива B</span>\n        print(elem, end=<span class=\"hljs-string\">\" \"</span>)   <span class=\"hljs-comment\"># печатаем одной строкой через пробел</span>\n<span class=\"hljs-keyword\">else</span>:\n    print(<span class=\"hljs-number\">0</span>)                   <span class=\"hljs-comment\"># если массив B пустой, то печатаем 0</span></codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671033245813),
(37, 'Генерирование массива, состоящего из простых чисел', '<div id=\"ember4664\" class=\"step-view step-view_material ember-view\"><!----><div class=\"step-wrapper\">\n  <div class=\"step-inner page-fragment\">\n      <div id=\"ember4665\" class=\"html-content rich-text-viewer ember-view\" data-processed=\"\"><!----><span><p style=\"text-align: center;\"><strong>Генерирование массива, состоящего из простых чисел</strong></p>\n\n<p>Рассмотрим решение задачи, в которой надо выбрать простые числа.&nbsp;</p>\n\n<blockquote>\n<p><span style=\"color: #333399;\"><strong>Просто́е число́</strong>&nbsp;— натуральное&nbsp;число, имеющее ровно два различных натуральных делителя&nbsp;— единицу&nbsp;и самого себя. Другими словами, число&nbsp;<img alt=\"x\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/87f9e315fd7e2ba406057a97300593c4802b53e4\">&nbsp;является простым, если оно больше&nbsp;<img alt=\"1\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/92d98b82a3778f043108d4e20960a9193df57cbf\">&nbsp;и при этом делится без остатка только на&nbsp;<img alt=\"1\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/92d98b82a3778f043108d4e20960a9193df57cbf\">&nbsp;и на&nbsp;<img alt=\"x\" src=\"https://wikimedia.org/api/rest_v1/media/math/render/svg/87f9e315fd7e2ba406057a97300593c4802b53e4\">.&nbsp;</span></p>\n</blockquote>\n\n<p><strong>Задача №1. </strong>На вход программы подаются два числа n и m. Гарантируется, что n &lt; m. Напишите программу, которая генерирует массив, состоящий из элементов, которые являются простыми числами и их значения принадлежат отрезку [n, m].</p>\n\n<pre><codes class=\"language-python hljs\">n, m = map(int, input().split())\n\nA = []                      <span class=\"hljs-comment\"># завели пустой массив</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n, m+<span class=\"hljs-number\">1</span>):     <span class=\"hljs-comment\"># перебираем элементы от n до m включительно</span>\n    k = <span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\"># для каждого очередного значения считаем, что количество делителей 0</span>\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, i+<span class=\"hljs-number\">1</span>): <span class=\"hljs-comment\"># перебираем числа от 1 до самого числа i - все возможные делители</span>\n        <span class=\"hljs-keyword\">if</span> i % j == <span class=\"hljs-number\">0</span>:      <span class=\"hljs-comment\"># если i делится на j без остатка, значит j - делитель числа i</span>\n            k += <span class=\"hljs-number\">1</span>          <span class=\"hljs-comment\"># если нашли делитель, то счётчик увеличиваем на 1</span>\n    <span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">2</span>:              <span class=\"hljs-comment\"># после просмотра всех возможных делителей, проверяем счётчик</span>\n        A.append(i)         <span class=\"hljs-comment\"># если количество делителей 2, то число простое, добавляем его в массив</span>\n\nprint(A)                    <span class=\"hljs-comment\"># печатаем массив</span></codes></pre></span></div>\n      </div>\n</div>\n</div>', 1671033279419),
(38, 'Построение и анализ таблиц истинности логических выражений', '<div align=\"justify\" width=\"100%\" class=\"pbody\"><p class=\"left_margin\">Условные обозначения логических операций:</p><p class=\"left_margin\">¬<i>A</i>, <img src=\"https://ege.sdamgia.ru/formula/svg/0a/0a8e8cf8fb77f8e1282adc97cf88ee36.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\barA\"> — не <i>A</i> (отрицание, инверсия);</p><p class=\"left_margin\"><i>A</i> ∧ <i>B</i>, <i>A</i>&nbsp;·&nbsp;<i>B</i> — <i>A</i> и <i>B</i> (логическое умножение, конъюнкция);</p><p class=\"left_margin\"><i>A</i> ∨ B, <i>A</i> + <i>B</i>— <i>A</i> или <i>B</i> (логическое сложение, дизъюнкция);</p><p class=\"left_margin\"><i>A</i> → <i>B</i>— импликация (следование);</p><p class=\"left_margin\"><i>A</i> ≡ <i>B</i>— эквивалентность  (равносильность).</p><p class=\"left_margin\">Операцию «импликация» можно выразить  через «ИЛИ» и «НЕ»:</p><p class=\"left_margin\"><i>A</i> → <i>B</i> = ¬<i>A</i> ∨ <i>B</i> — <i>A</i> → B&nbsp;=&nbsp;<img src=\"https://ege.sdamgia.ru/formula/svg/f8/f8ce924a996b509756174cac6aaa54f6.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\barA плюс B.\"></p><p class=\"left_margin\">Иногда для упрощения выражений полезны формулы де Моргана:</p><p class=\"left_margin\">¬(<i>A</i> ∧ <i>B</i>) = ¬<i>A</i> ∨ ¬<i>B</i> — <img src=\"https://ege.sdamgia.ru/formula/svg/2a/2a4a7c4ba70d071070725d797c9d86e6.svg\" class=\"tex\" style=\"vertical-align:-2.3pt\" alt=\"\\overlineA умножить на B=\\barA плюс \\barB;\"></p><p class=\"left_margin\">¬(<i>A</i> ∨ <i>B</i>) = ¬<i>A</i> ∧ ¬<i>B</i> — <img src=\"https://ege.sdamgia.ru/formula/svg/b9/b94008e68450e00d15f26c5bce1324a4.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\overlineA плюс B=\\barA умножить на \\barB.\"></p><p class=\"left_margin\">Если в выражении нет скобок, сначала выполняются все операции «НЕ», затем&nbsp;— «И», затем&nbsp;— «ИЛИ», «импликация», и самая последняя&nbsp;— «эквивалентность».</p><p class=\"left_margin\">Таблица истинности выражения определяет его значения при всех возможных комбинациях исходных данных.</p><p class=\"left_margin\">Если известна только часть таблицы истинности, соответствующее логическое выражение однозначно определить нельзя, поскольку частичной таблице могут соответствовать несколько разных логических выражений (не совпадающих для других вариантов входных данных).</p><p class=\"left_margin\">Количество разных логических выражений, удовлетворяющих неполной таблице истинности, равно <img src=\"https://ege.sdamgia.ru/formula/svg/6e/6e77ce3c4f7950e0d738d6acf19c10f3.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\"2 в степени левая круглая скобка k правая круглая скобка ,\"> где <i>k</i> – число отсутствующих строк; например, полная таблица истинности выражения с тремя переменными содержит 23&nbsp;=&nbsp;8 строчек, если заданы только 6 из них, то можно найти 2<sup>8−6</sup>&nbsp;=&nbsp;2<sup>2</sup>&nbsp;=&nbsp;4 разных логических выражения, удовлетворяющие этим 6 строчкам (но отличающиеся в двух оставшихся).</p><p class=\"left_margin\">Логическая сумма <i>A</i> + <i>B</i> + <i>C</i> + … равна 0 (выражение ложно) тогда и только тогда, когда все слагаемые одновременно равны нулю, а в остальных случаях равна 1 (выражение истинно).</p><p class=\"left_margin\">Логическое произведение <i>A</i>&nbsp;·&nbsp;<i>B</i>&nbsp;·&nbsp;<i>C</i>&nbsp;·&nbsp;… равно 1 (выражение истинно) тогда и только тогда, когда все сомножители одновременно равны единице, а в остальных случаях равно 0 (выражение ложно).</p><p class=\"left_margin\">Логическое следование (импликация) <i>А</i> → <i>В</i> равна 0 тогда и только тогда, когда <i>A</i> (посылка) истинна, а <i>B</i> (следствие) ложно.</p><p class=\"left_margin\">Эквивалентность <i>А</i> ≡ <i>B</i>  равна 1 тогда и только тогда, когда оба значения одновременно равны 0 или одновременно равны&nbsp;1.</p></div>', 1671034011643),
(39, 'Составление запросов для поисковых систем с использованием  логических выражений', '<div align=\"justify\" width=\"100%\" class=\"pbody\"><p class=\"left_margin\">В поисковых запросах операция «НЕ» обозначается знаком ~, операция «И» обозначается знаком &amp;, а операция «ИЛИ»&nbsp;— знаком |.</p><p class=\"left_margin\">Пусть <i>A</i>&nbsp;— множество страниц, на которых встречается слово <i>A</i>, а <i>B</i>&nbsp;— множество страниц, на которых встречается слово <i>B</i>; тогда:</p><p class=\"left_margin\">а)	запрос <i>A</i> &amp; <i>B</i> соответствует пересечению множеств <i>A</i> ∩ <i>B</i>;</p><p class=\"left_margin\">б)	запрос <i>A</i> | <i>B</i> соответствует объединению множеств <i>A</i> ∪ <i>B</i>.</p><p class=\"left_margin\">Будем обозначать через <i>N</i><sub><i>X</i></sub> количество страниц, которые выдаёт поисковая система по запросу <i>X</i>.</p><p class=\"left_margin\">Для двух областей справедлива формула включений и исключений, которая позволяет легко решать все задачи с двумя областями:</p><p><img src=\"/get_file?id=40101\" style=\"margin:10px auto;display:block;max-width:100%\"></p><p>&nbsp;</p><center><p><i>N</i><sub><i>A</i> | <i>B</i></sub> = <i>N</i><sub><i>A</i></sub> + <i>N</i><sub><i>B</i></sub> −  <i>N</i><sub><i>A</i> &amp; <i>B</i></sub></p><p>&nbsp;</p></center><p class=\"left_margin\">Эту формулу можно переписать в разных формах в зависимости от того, что требуется найти, например,</p><p>&nbsp;</p><center><p><i>N</i><sub><i>A</i> &amp; <i>B</i></sub> = <i>N</i><sub><i>A</i></sub> + <i>N</i><sub><i>B</i></sub> −  <i>N</i><sub><i>A</i> | <i>B</i></sub>;</p><p><i>N</i><sub><i>A</i></sub> = <i>N</i><sub><i>A</i> | <i>B</i></sub> +    <i>N</i><sub><i>A</i> &amp; <i>B</i></sub> − <i>N</i><sub><i>B</i></sub>;</p><p><i>N</i><sub><i>A</i></sub> + <i>N</i><sub><i>B</i></sub> = <i>N</i><sub><i>A</i> | <i>B</i></sub> +  <i>N</i><sub><i>A</i> &amp; <i>B</i></sub></p><p>&nbsp;</p></center><p class=\"left_margin\">Равенство сохраняется, если каждая из 4-х областей заменяется на её пересечение с третьей областью <i>C</i>:</p><p><img src=\"/get_file?id=39516\" style=\"margin:10px auto;display:block;max-width:100%\" width=\"450\"></p><center><p><i>N</i><sub>(<i>A</i> | <i>B</i>) &amp; <i>C</i></sub> = <i>N</i><sub><i>A</i> &amp; <i>C</i></sub> + <i>N</i><sub><i>B</i> &amp; <i>C</i></sub>  – <i>N</i><sub><i>A</i> &amp; <i>B</i> &amp; <i>C</i></sub></p><p>&nbsp;</p></center><p class=\"left_margin\">Таким образом, если все 4 запроса имеют вид <i>X</i> &amp; <i>C</i>, область <i>C</i> при вычислениях можно игнорировать (это равносильно переходу от областей <i>A</i> и <i>B</i> к областям <i>A</i>’ = <i>A</i> &amp; <i>C</i> и <i>B</i>’ = <i>B</i> &amp; <i>C</i>, что не изменяет результата).</p><p class=\"left_margin\">Формула включений и исключений для трёх областей выглядит так: </p><p>&nbsp;</p><center><p><i>N</i><sub><i>A</i> | <i>B</i> | <i>C</i></sub> = <i>N</i><sub><i>A</i></sub> + <i>N</i><sub><i>B</i></sub> + <i>N</i><sub><i>C</i></sub> – <i>N</i><sub><i>A</i> &amp; <i>B</i></sub> – <i>N</i><sub><i>A</i> &amp; <i>C</i></sub> – <i>N</i><sub><i>B</i> &amp; <i>C</i></sub>  +</p><p>+ <i>N</i><sub><i>A</i> &amp; <i>B</i> &amp; <i>C</i></sub>.</p><p>&nbsp;</p></center></div>', 1671034077294),
(40, 'Основные понятия математической логики', '<div align=\"justify\" width=\"100%\" class=\"pbody\"><p class=\"left_margin\">Для упрощения выражений можно использовать формулы:</p><p>&nbsp;</p><center><p><img src=\"https://ege.sdamgia.ru/formula/svg/67/67dc0796ebea6670b2b261c8b258c020.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A плюс A умножить на B=A\"> (т. к. <img src=\"https://ege.sdamgia.ru/formula/svg/47/4767f1caf2db9917141f18693c7caa2a.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A плюс A умножить на B=\"></p><p>&nbsp;</p><p><img src=\"https://ege.sdamgia.ru/formula/svg/40/40975f76b1c5b9aa39e94908bf0f7aa2.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"=A умножить на 1 плюс A умножить на B=A умножить на левая круглая скобка 1 плюс B правая круглая скобка =A умножить на 1=A\">);</p><p>&nbsp;</p><p><img src=\"https://ege.sdamgia.ru/formula/svg/8a/8ae3c923f31cdf043cc6aa622cc3da2d.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A плюс \\barA умножить на B=A плюс B\"> (т.к. <img src=\"https://ege.sdamgia.ru/formula/svg/fb/fb9429ae8789552fc0e9594109cf8721.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A плюс \\barA умножить на B=\"></p><p>&nbsp;</p><p><img src=\"https://ege.sdamgia.ru/formula/svg/ce/cea1ab9e165508fb601121ba0dc01165.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"= левая круглая скобка A плюс \\barA правая круглая скобка умножить на левая круглая скобка A плюс B правая круглая скобка =1 умножить на левая круглая скобка A плюс B правая круглая скобка =A плюс B\">).</p><p>&nbsp;</p></center><p class=\"left_margin\">Некоторые свойства импликации:</p><p>&nbsp;</p><center><p><img src=\"https://ege.sdamgia.ru/formula/svg/ef/ef2ca1c2abe278cb36acebc0fcb98e85.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"A\\to левая круглая скобка B умножить на C правая круглая скобка = левая круглая скобка A\\to B правая круглая скобка умножить на левая круглая скобка A\\to C правая круглая скобка ;\"></p><p>&nbsp;</p><p><img src=\"https://ege.sdamgia.ru/formula/svg/43/43b936adf8c8c6319f9578cc2e90a0fa.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"A\\to левая круглая скобка B плюс C правая круглая скобка = левая круглая скобка A\\to B правая круглая скобка плюс левая круглая скобка A\\to C правая круглая скобка .\"></p><p>&nbsp;</p></center><p class=\"left_margin\">Связь логики и теории множеств:</p><p class=\"left_margin\">— пересечение множеств соответствует умножению логических величин, а объединение&nbsp;— логическому сложению;</p><p class=\"left_margin\">— пустое множество <img src=\"https://ege.sdamgia.ru/formula/svg/3b/3b648d0253c4c3feb8df7f91a36bab96.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\varnothing\">&nbsp;— это множество, не содержащее ни одного элемента, оно играет роль нуля в теории множеств;</p><p class=\"left_margin\">— универсальное множество <i>U</i>&nbsp;— это множество, содержащее все возможные элементы заданного типа (например, все целые числа), оно играет роль логической единицы: для любого множества целых чисел <i>X</i> справедливы равенства <img src=\"https://ege.sdamgia.ru/formula/svg/97/97e79513d9ecda95f1724b388119cfd3.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"X плюс U = U\"> и <img src=\"https://ege.sdamgia.ru/formula/svg/51/51a15b225ea78e29564fda797ab087d0.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"X умножить на U = X\"> (для простоты мы используем знаки сложения и умножения вместо знаков пересечения ∩ и объединения ∪ множеств);</p><p class=\"left_margin\">— дополнение <img src=\"https://ege.sdamgia.ru/formula/svg/58/58c3d0d0ebe063b8eb10b3dcf9c10b0c.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\barX\"> множества <i>X</i>&nbsp;— это разность между универсальным множеством <i>U</i> и множеством <i>X</i> (например, для целых чисел <img src=\"https://ege.sdamgia.ru/formula/svg/58/58c3d0d0ebe063b8eb10b3dcf9c10b0c.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\barX\"> — все целые числа, не входящие в <i>X</i>);</p><p class=\"left_margin\">— пусть требуется выбрать множество <i>A</i> так, чтобы выполнялось равенство <img src=\"https://ege.sdamgia.ru/formula/svg/47/474b07459c85790660313f3579d00f3f.svg\" class=\"tex\" style=\"vertical-align:-2.2pt\" alt=\"A плюс X = U;\"> в этом случае множество <i>A</i> должно включать дополнение <img src=\"https://ege.sdamgia.ru/formula/svg/81/818d9c87c973bbaa9dc65baebd5e3e4b.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\"\\barX,\"> то есть <img src=\"https://ege.sdamgia.ru/formula/svg/55/556db88930da3e47925e5e066a3c0ec8.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"A\\supseteq \\barX\"> (или «по-простому» можно записать <img src=\"https://ege.sdamgia.ru/formula/svg/27/27989fdd6f7458f5eca8fa7fc58655a9.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"A больше или равно \\barX правая круглая скобка ,\"> то есть <img src=\"https://ege.sdamgia.ru/formula/svg/72/72b41f4839f52661e8fdfda57c74464d.svg\" class=\"tex\" style=\"vertical-align:-2.6pt\" alt=\"A_\\min =\\barX.\"></p><p class=\"left_margin\">— пусть требуется выбрать множество <i>A</i> так, чтобы выполнялось равенство <img src=\"https://ege.sdamgia.ru/formula/svg/3e/3eb022e4b5675d90f50362054971da75.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\"\\barA плюс X=U,\"> в этом случае множество <img src=\"https://ege.sdamgia.ru/formula/svg/0a/0a8e8cf8fb77f8e1282adc97cf88ee36.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\barA\"> должно включать дополнение <img src=\"https://ege.sdamgia.ru/formula/svg/81/818d9c87c973bbaa9dc65baebd5e3e4b.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\"\\barX,\"> то есть <img src=\"https://ege.sdamgia.ru/formula/svg/cb/cb4d18c77538dd1f3a93784423fe72ee.svg\" class=\"tex\" style=\"vertical-align:-2.4pt\" alt=\"\\barA\\supseteq \\barX;\"> отсюда <img src=\"https://ege.sdamgia.ru/formula/svg/19/19f379eb7ce668f276a076b2f6b090e2.svg\" class=\"tex\" style=\"vertical-align:-3.0pt\" alt=\"A\\subseteq X,\"> то есть <img src=\"https://ege.sdamgia.ru/formula/svg/48/480d26e95499e15c0c5df14878a9fad7.svg\" class=\"tex\" style=\"vertical-align:-2.6pt\" alt=\"A_\\max =X.\"></p></div>', 1671034103056),
(41, 'Преобразование логических выражений', '<div align=\"justify\" width=\"100%\" class=\"pbody\"><p class=\"left_margin\">Операцию «эквиваленция» также можно выразить  через «ИЛИ» и «НЕ»:</p><p>&nbsp;</p><center><p><i>A</i> ≡ <i>B</i>&nbsp;=&nbsp;¬<i>A</i> ∧ ¬<i>B</i> ∨ <i>A</i> ∧ <i>B</i></p><p>&nbsp;</p></center><p>или в других обозначениях</p><p>&nbsp;</p><center><p><i>A</i> ≡ <i>B</i>&nbsp;=&nbsp;<img src=\"https://ege.sdamgia.ru/formula/svg/e2/e2257532ff16ae3d9342393fd66766ff.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\barA умножить на \\barB плюс A умножить на B.\"></p><p>&nbsp;</p></center><p class=\"left_margin\">Правила преобразования логических выражений (законы алгебры логики):</p><p>&nbsp;</p><p></p><table style=\"margin:auto\"><tbody><tr><th style=\"text-align:center\">Закон</th><th style=\"text-align:center\">Для <b>И</b></th><th style=\"text-align:center\">Для <b>ИЛИ</b></th></tr><tr><td style=\"text-align:left\">Двойного отрицания</td><td style=\"text-align:center\" colspan=\"2\"><img src=\"https://ege.sdamgia.ru/formula/svg/f9/f9caad089fdb62210950fa1292fb0d32.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\overline\\overlineA=A\"></td></tr><tr><td style=\"text-align:left\">Исключения третьего</td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/50/50db9b74e33b64029647d4ebcc0e8513.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A \\!\\! умножить на \\!\\! \\overlineA=0\"></td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/84/84042a83f88f1745029a881a56a6a4ae.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A плюс \\overlineA=1\"></td></tr><tr><td style=\"text-align:left\">Исключения констант</td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/c3/c327802170b74c42540debbab0a0d6c0.svg\" class=\"tex\" style=\"vertical-align:-2.2pt\" alt=\"A умножить на 1=A;A умножить на 0=0\"></td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/d8/d8369d39e32acd4fcdca3d959c981d6b.svg\" class=\"tex\" style=\"vertical-align:-2.2pt\" alt=\"A плюс 0=A;A плюс 1=1\"></td></tr><tr><td style=\"text-align:left\">Повторения</td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/31/31bca6b7d7e8a597da1698184ddac727.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A умножить на A=A\"></td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/85/85b1da5fa32e65ac1a7c85a946db16d3.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A плюс A=A\"></td></tr><tr><td style=\"text-align:left\">Поглощения</td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/38/384e92cded6ce51b324caf7937dafa7c.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"A умножить на левая круглая скобка A плюс B правая круглая скобка =A\"></td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/67/67dc0796ebea6670b2b261c8b258c020.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A плюс A умножить на B=A\"></td></tr><tr><td style=\"text-align:left\">Переместительный</td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/4d/4d25559f97a5baea78134b786ea9553e.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A умножить на B=B умножить на A\"></td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/92/9246423af39a3b2b4ff2a8b4e1c63e9c.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"A плюс B=B плюс A\"></td></tr><tr><td style=\"text-align:left\">Сочетательный</td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/46/46d1d0a9bd394d1402e296cf86d64535.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"A умножить на левая круглая скобка B умножить на C правая круглая скобка = левая круглая скобка A умножить на B правая круглая скобка умножить на C\"></td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/94/94f1d1a19bbd3421d91756e78ab7e9c0.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"A плюс левая круглая скобка B плюс C правая круглая скобка = левая круглая скобка A плюс B правая круглая скобка плюс C\"></td></tr><tr><td style=\"text-align:left\">Распределительный</td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/48/48ab6ce320ebf3dafd6192a05eed4bf6.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"A плюс B умножить на C= левая круглая скобка A плюс B правая круглая скобка умножить на левая круглая скобка A плюс C правая круглая скобка \"></td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/a4/a49998f00f7eefc9ab47e7045720d851.svg\" class=\"tex\" style=\"vertical-align:-3.6pt\" alt=\"A умножить на левая круглая скобка B плюс C правая круглая скобка =A умножить на B плюс A умножить на C\"></td></tr><tr><td style=\"text-align:left\">Де Моргана</td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/cc/ccb40bbab9e34138823305304aca0c3b.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\overlineA \\!\\! умножить на \\!\\! B=\\overlineA плюс \\overlineB\"></td><td style=\"text-align:center\"><img src=\"https://ege.sdamgia.ru/formula/svg/8c/8ca6c03648aa9ef99e2f2979c4a2e82e.svg\" class=\"tex\" style=\"vertical-align:-1.8pt\" alt=\"\\overlineA плюс B=\\overlineA \\!\\! умножить на \\!\\! \\overlineB\"></td></tr></tbody></table></div>', 1671034157991),
(42, 'ЕГЭ по информатике 2022 - Задание 2 ', '<p>В этой статье будут раскрыты методики решения 2 задания через язык программирования Питон.</p>\n<p>Будем перебирать для каждой логической переменной все возможные варианты в программе. А логическая переменная всего два значения может принимать: 1 или 0 (истину или ложь). Таким образом, если к примеру у нас 4 переменные, мы получим 2<sup>4</sup>=16 различных комбинаций.</p>\n<p>Кто знаком с мощнейшим методом для 2 задания из ЕГЭ по информатике, о котором я рассказывал в прошлогодней статье, тот поймёт, что мы будем применять тот же самый <b>мощнейший метод</b>, но автоматизированный с помощью питона.</p>\n<p>Нам нужно будет запрограммировать <b>логическую функцию</b> на языке Питон. Вот таблица, которая поможет это сделать.</p>\n<table class=\"height\"> <tbody><tr> <th>операция</th><th>пояснение</th> <th><span class=\"navy\">в программировании</span></th> </tr> <tr> <td>¬ a, <span style=\"text-decoration:overline\">a</span>  </td> <td>не a (отрицание, инверсия)</td> <td><span class=\"navy\">not(a)</span></td> </tr> <tr> <td>a ∧ b, a ⋅ b</td> <td> a и b (логическое умножение, конъюнкция)</td> <td><span class=\"navy\">a and b</span></td> </tr> <tr> <td>a ∨ b, a + b</td> <td>a или b (логическое сложение, дизъюнкция)</td> <td><span class=\"navy\">a or b</span></td> </tr> <tr> <td>a → b</td> <td>импликация (следование)</td> <td><span class=\"navy\">a <= b</span></td> </tr> <tr> <td>a ↔ b,  a ≡ b, a ∼ b </td> <td>эквиваленция (эквивалентность, равносильность)</td> <td><span class=\"navy\">a==b (python)<br>a=b(pascal)</span></td> </tr> <tr> <td>a ⊕ b </td> <td>строгая дизъюнкция</td> <td><span class=\"navy\">a != b (python)</span></td> </tr> </tbody></table>', 1671114123651);

-- --------------------------------------------------------

--
-- Структура таблицы `type_of_task`
--

CREATE TABLE `type_of_task` (
  `id` int(11) NOT NULL,
  `type` int(11) NOT NULL,
  `name` varchar(300) NOT NULL,
  `link` varchar(500) NOT NULL,
  `hide` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `type_of_task`
--

INSERT INTO `type_of_task` (`id`, `type`, `name`, `link`, `hide`) VALUES
(1, 1, 'Простейшие задачи на Python для старта', '/option?id=1', 0),
(2, 2, 'Простейшие задачи на вычисления Python', '/option?id=2', 0),
(3, 3, 'Простейшие задачи №2 из ЕГЭ на Python', '/option?id=3', 0),
(5, 4, 'Простейшие задачи алгебры логики на Python', '', 1),
(6, 5, 'Задачи алгебры логики из открытого банка РЕШУ ЕГЭ на Python', '', 1),
(7, 6, 'Определение результатов работы простейших алгоритмов на Python', '', 1),
(8, 7, 'Перебор слов и системы счисления на Python', '', 1),
(9, 15, 'Выигрышная стратегия. Задание 1', '', 0),
(10, 16, 'Выигрышная стратегия. Задание 2', '', 0),
(11, 17, 'Выигрышная стратегия. Задание 3', '', 0),
(12, 18, 'Оператор присваивания и ветвления. Перебор вариантов, построение дерева', '', 0),
(13, 19, 'Рекурсивные алгоритмы', '', 0);

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `login` varchar(30) NOT NULL,
  `password` varchar(100) NOT NULL,
  `typeUser` int(11) NOT NULL,
  `mail` varchar(200) NOT NULL,
  `name` varchar(100) NOT NULL,
  `surname` varchar(100) NOT NULL,
  `code` int(11) NOT NULL,
  `ban` int(11) NOT NULL,
  `timeofregistration` bigint(20) NOT NULL,
  `timelastonline` bigint(20) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `login`, `password`, `typeUser`, `mail`, `name`, `surname`, `code`, `ban`, `timeofregistration`, `timelastonline`) VALUES
(1, 'Admin', '11111', 4, '89879203004a@gmail.com', 'Anton', 'Sibgatulin', 0, 0, 0, 1674158439354),
(2, 'Anton', '11111', 0, '89879203004a@gmail.com', 'Anton', 'Sibgatulin', 0, 0, 0, 0),
(3, 'Antonio', 'Dert869kk', 0, '89879203004a@gmail.com', 'Сибгатулин', 'Александрович', 0, 0, 1671358344187, 1671358754128),
(4, 'AntonSibgatulin', 'Dert869kk', 0, '89879203004a@gmail.com', 'Anton', 'Sibgatulin', 89407, 0, 1674158507095, 1674158620763);

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `direction`
--
ALTER TABLE `direction`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `informatic_task`
--
ALTER TABLE `informatic_task`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `options`
--
ALTER TABLE `options`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `taskofoption`
--
ALTER TABLE `taskofoption`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `teory`
--
ALTER TABLE `teory`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `type_of_task`
--
ALTER TABLE `type_of_task`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `direction`
--
ALTER TABLE `direction`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- AUTO_INCREMENT для таблицы `informatic_task`
--
ALTER TABLE `informatic_task`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=971;

--
-- AUTO_INCREMENT для таблицы `options`
--
ALTER TABLE `options`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=46;

--
-- AUTO_INCREMENT для таблицы `taskofoption`
--
ALTER TABLE `taskofoption`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=688;

--
-- AUTO_INCREMENT для таблицы `teory`
--
ALTER TABLE `teory`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=43;

--
-- AUTO_INCREMENT для таблицы `type_of_task`
--
ALTER TABLE `type_of_task`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
